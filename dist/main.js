<<<<<<< HEAD
!function(e){var n={};function r(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=n,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)r.d(t,o,function(n){return e[n]}.bind(null,o));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s=6)}([function(e,n){n.getArg=function(e,n,r){if(n in e)return e[n];if(3===arguments.length)return r;throw new Error('"'+n+'" is a required argument.')};var r=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,t=/^data:.+\,.+$/;function o(e){var n=e.match(r);return n?{scheme:n[1],auth:n[2],host:n[3],port:n[4],path:n[5]}:null}function i(e){var n="";return e.scheme&&(n+=e.scheme+":"),n+="//",e.auth&&(n+=e.auth+"@"),e.host&&(n+=e.host),e.port&&(n+=":"+e.port),e.path&&(n+=e.path),n}function a(e){var r=e,t=o(e);if(t){if(!t.path)return e;r=t.path}for(var a,s=n.isAbsolute(r),u=r.split(/\/+/),l=0,c=u.length-1;c>=0;c--)"."===(a=u[c])?u.splice(c,1):".."===a?l++:l>0&&(""===a?(u.splice(c+1,l),l=0):(u.splice(c,2),l--));return""===(r=u.join("/"))&&(r=s?"/":"."),t?(t.path=r,i(t)):r}function s(e,n){""===e&&(e="."),""===n&&(n=".");var r=o(n),s=o(e);if(s&&(e=s.path||"/"),r&&!r.scheme)return s&&(r.scheme=s.scheme),i(r);if(r||n.match(t))return n;if(s&&!s.host&&!s.path)return s.host=n,i(s);var u="/"===n.charAt(0)?n:a(e.replace(/\/+$/,"")+"/"+n);return s?(s.path=u,i(s)):u}n.urlParse=o,n.urlGenerate=i,n.normalize=a,n.join=s,n.isAbsolute=function(e){return"/"===e.charAt(0)||r.test(e)},n.relative=function(e,n){""===e&&(e="."),e=e.replace(/\/$/,"");for(var r=0;0!==n.indexOf(e+"/");){var t=e.lastIndexOf("/");if(t<0)return n;if((e=e.slice(0,t)).match(/^([^\/]+:\/)?\/*$/))return n;++r}return Array(r+1).join("../")+n.substr(e.length+1)};var u=!("__proto__"in Object.create(null));function l(e){return e}function c(e){if(!e)return!1;var n=e.length;if(n<9)return!1;if(95!==e.charCodeAt(n-1)||95!==e.charCodeAt(n-2)||111!==e.charCodeAt(n-3)||116!==e.charCodeAt(n-4)||111!==e.charCodeAt(n-5)||114!==e.charCodeAt(n-6)||112!==e.charCodeAt(n-7)||95!==e.charCodeAt(n-8)||95!==e.charCodeAt(n-9))return!1;for(var r=n-10;r>=0;r--)if(36!==e.charCodeAt(r))return!1;return!0}function p(e,n){return e===n?0:null===e?1:null===n?-1:e>n?1:-1}n.toSetString=u?l:function(e){return c(e)?"$"+e:e},n.fromSetString=u?l:function(e){return c(e)?e.slice(1):e},n.compareByOriginalPositions=function(e,n,r){var t=p(e.source,n.source);return 0!==t?t:0!=(t=e.originalLine-n.originalLine)?t:0!=(t=e.originalColumn-n.originalColumn)||r?t:0!=(t=e.generatedColumn-n.generatedColumn)?t:0!=(t=e.generatedLine-n.generatedLine)?t:p(e.name,n.name)},n.compareByGeneratedPositionsDeflated=function(e,n,r){var t=e.generatedLine-n.generatedLine;return 0!==t?t:0!=(t=e.generatedColumn-n.generatedColumn)||r?t:0!==(t=p(e.source,n.source))?t:0!=(t=e.originalLine-n.originalLine)?t:0!=(t=e.originalColumn-n.originalColumn)?t:p(e.name,n.name)},n.compareByGeneratedPositionsInflated=function(e,n){var r=e.generatedLine-n.generatedLine;return 0!==r?r:0!=(r=e.generatedColumn-n.generatedColumn)?r:0!==(r=p(e.source,n.source))?r:0!=(r=e.originalLine-n.originalLine)?r:0!=(r=e.originalColumn-n.originalColumn)?r:p(e.name,n.name)},n.parseSourceMapInput=function(e){return JSON.parse(e.replace(/^\)]}'[^\n]*\n/,""))},n.computeSourceURL=function(e,n,r){if(n=n||"",e&&("/"!==e[e.length-1]&&"/"!==n[0]&&(e+="/"),n=e+n),r){var t=o(r);if(!t)throw new Error("sourceMapURL could not be parsed");if(t.path){var u=t.path.lastIndexOf("/");u>=0&&(t.path=t.path.substring(0,u+1))}n=s(i(t),n)}return a(n)}},function(e,n){e.exports=require("electron")},function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const t=r(1);n.default=class{constructor(e){this.windowParams={minWidth:440,minHeight:150,icon:`${__dirname}/logo.png`},this.view=e}createWindow(){return this.window?this.window:(this.window=new t.BrowserWindow(this.windowParams),this.window.loadURL(`file://${__dirname}/${this.view}.html`),this.window.on("closed",this.closeWindow),this.window)}closeWindow(){this.window&&this.window.close(),this.window=void 0}getWindow(){return this.window instanceof t.BrowserWindow?this.window:this.createWindow()}sendEvent(e,...n){if(this.window)return this.window.webContents.send(e,n)}}},function(e,n,r){var t=r(4),o=r(0),i=r(5).ArraySet,a=r(10).MappingList;function s(e){e||(e={}),this._file=o.getArg(e,"file",null),this._sourceRoot=o.getArg(e,"sourceRoot",null),this._skipValidation=o.getArg(e,"skipValidation",!1),this._sources=new i,this._names=new i,this._mappings=new a,this._sourcesContents=null}s.prototype._version=3,s.fromSourceMap=function(e){var n=e.sourceRoot,r=new s({file:e.file,sourceRoot:n});return e.eachMapping(function(e){var t={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(t.source=e.source,null!=n&&(t.source=o.relative(n,t.source)),t.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(t.name=e.name)),r.addMapping(t)}),e.sources.forEach(function(t){var i=t;null!==n&&(i=o.relative(n,t)),r._sources.has(i)||r._sources.add(i);var a=e.sourceContentFor(t);null!=a&&r.setSourceContent(t,a)}),r},s.prototype.addMapping=function(e){var n=o.getArg(e,"generated"),r=o.getArg(e,"original",null),t=o.getArg(e,"source",null),i=o.getArg(e,"name",null);this._skipValidation||this._validateMapping(n,r,t,i),null!=t&&(t=String(t),this._sources.has(t)||this._sources.add(t)),null!=i&&(i=String(i),this._names.has(i)||this._names.add(i)),this._mappings.add({generatedLine:n.line,generatedColumn:n.column,originalLine:null!=r&&r.line,originalColumn:null!=r&&r.column,source:t,name:i})},s.prototype.setSourceContent=function(e,n){var r=e;null!=this._sourceRoot&&(r=o.relative(this._sourceRoot,r)),null!=n?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[o.toSetString(r)]=n):this._sourcesContents&&(delete this._sourcesContents[o.toSetString(r)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},s.prototype.applySourceMap=function(e,n,r){var t=n;if(null==n){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');t=e.file}var a=this._sourceRoot;null!=a&&(t=o.relative(a,t));var s=new i,u=new i;this._mappings.unsortedForEach(function(n){if(n.source===t&&null!=n.originalLine){var i=e.originalPositionFor({line:n.originalLine,column:n.originalColumn});null!=i.source&&(n.source=i.source,null!=r&&(n.source=o.join(r,n.source)),null!=a&&(n.source=o.relative(a,n.source)),n.originalLine=i.line,n.originalColumn=i.column,null!=i.name&&(n.name=i.name))}var l=n.source;null==l||s.has(l)||s.add(l);var c=n.name;null==c||u.has(c)||u.add(c)},this),this._sources=s,this._names=u,e.sources.forEach(function(n){var t=e.sourceContentFor(n);null!=t&&(null!=r&&(n=o.join(r,n)),null!=a&&(n=o.relative(a,n)),this.setSourceContent(n,t))},this)},s.prototype._validateMapping=function(e,n,r,t){if(n&&"number"!=typeof n.line&&"number"!=typeof n.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0)||n||r||t)&&!(e&&"line"in e&&"column"in e&&n&&"line"in n&&"column"in n&&e.line>0&&e.column>=0&&n.line>0&&n.column>=0&&r))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:r,original:n,name:t}))},s.prototype._serializeMappings=function(){for(var e,n,r,i,a=0,s=1,u=0,l=0,c=0,p=0,h="",g=this._mappings.toArray(),f=0,d=g.length;f<d;f++){if(e="",(n=g[f]).generatedLine!==s)for(a=0;n.generatedLine!==s;)e+=";",s++;else if(f>0){if(!o.compareByGeneratedPositionsInflated(n,g[f-1]))continue;e+=","}e+=t.encode(n.generatedColumn-a),a=n.generatedColumn,null!=n.source&&(i=this._sources.indexOf(n.source),e+=t.encode(i-p),p=i,e+=t.encode(n.originalLine-1-l),l=n.originalLine-1,e+=t.encode(n.originalColumn-u),u=n.originalColumn,null!=n.name&&(r=this._names.indexOf(n.name),e+=t.encode(r-c),c=r)),h+=e}return h},s.prototype._generateSourcesContent=function(e,n){return e.map(function(e){if(!this._sourcesContents)return null;null!=n&&(e=o.relative(n,e));var r=o.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,r)?this._sourcesContents[r]:null},this)},s.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},s.prototype.toString=function(){return JSON.stringify(this.toJSON())},n.SourceMapGenerator=s},function(e,n,r){var t=r(9);n.encode=function(e){var n,r="",o=function(e){return e<0?1+(-e<<1):0+(e<<1)}(e);do{n=31&o,(o>>>=5)>0&&(n|=32),r+=t.encode(n)}while(o>0);return r},n.decode=function(e,n,r){var o,i,a=e.length,s=0,u=0;do{if(n>=a)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(i=t.decode(e.charCodeAt(n++))))throw new Error("Invalid base64 digit: "+e.charAt(n-1));o=!!(32&i),s+=(i&=31)<<u,u+=5}while(o);r.value=function(e){var n=e>>1;return 1==(1&e)?-n:n}(s),r.rest=n}},function(e,n,r){var t=r(0),o=Object.prototype.hasOwnProperty,i="undefined"!=typeof Map;function a(){this._array=[],this._set=i?new Map:Object.create(null)}a.fromArray=function(e,n){for(var r=new a,t=0,o=e.length;t<o;t++)r.add(e[t],n);return r},a.prototype.size=function(){return i?this._set.size:Object.getOwnPropertyNames(this._set).length},a.prototype.add=function(e,n){var r=i?e:t.toSetString(e),a=i?this.has(e):o.call(this._set,r),s=this._array.length;a&&!n||this._array.push(e),a||(i?this._set.set(e,s):this._set[r]=s)},a.prototype.has=function(e){if(i)return this._set.has(e);var n=t.toSetString(e);return o.call(this._set,n)},a.prototype.indexOf=function(e){if(i){var n=this._set.get(e);if(n>=0)return n}else{var r=t.toSetString(e);if(o.call(this._set,r))return this._set[r]}throw new Error('"'+e+'" is not in the set.')},a.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},a.prototype.toArray=function(){return this._array.slice()},n.ArraySet=a},function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),r(7).install();const t=r(1),o=r(19),i=r(22),a=r(23),s=r(24);class u{constructor(){this.menuTemplate=[{label:"Colorpicker",submenu:[{label:"About Colorpicker",accelerator:"Shift+CmdOrCtrl+A",click:()=>this.settingsView.createWindow()},{label:`Version ${t.app.getVersion()}`,enabled:!1},{type:"separator"},{label:"Preferences",accelerator:"CmdOrCtrl+,",click:()=>this.settingsView.createWindow()},{type:"separator"},{label:"Hide Colorpicker",accelerator:"CmdOrCtrl+H",role:"minimize"},{label:"Developer",submenu:[{label:"Toggle Devtools",accelerator:"CmdOrCtrl+Alt+I",role:"toggledevtools"},{label:"Reload Window",accelerator:"CmdOrCtrl+R",role:"reload"}]},{type:"separator"},{label:"Quit",accelerator:"CmdOrCtrl+Q",click:()=>t.app.quit()}]},{label:"Edit",role:"editMenu"},{label:"View",submenu:[{label:"Show Colorpicker",accelerator:"Shift+CmdOrCtrl+C",click:()=>this.colorpickerView.createWindow()},{label:"Show ColorsBook",accelerator:"Shift+CmdOrCtrl+B",click:()=>this.colorsbookView.createWindow()},{type:"separator"},{label:"Save Color",accelerator:"CmdOrCtrl+S",click:()=>this.colorpickerView.sendEvent("shortSave")},{type:"separator"},{label:"Copy Hex Color",accelerator:"CmdOrCtrl+W",click:()=>this.colorpickerView.sendEvent("shortCopyHex")},{label:"Copy RGB(a) Color",accelerator:"Shift+CmdOrCtrl+W",click:()=>this.colorpickerView.sendEvent("shortCopyRGB")},{type:"separator"},{label:"set Negative Color",accelerator:"CmdOrCtrl+N",click:()=>this.colorpickerView.sendEvent("shortNegative")}]},{label:"Tools",submenu:[{label:"Pin to Foreground",accelerator:"CmdOrCtrl+F",click:()=>this.colorpickerView.sendEvent("shortPin")},{type:"separator"},{label:"Pick Color",accelerator:"CmdOrCtrl+P",click:()=>this.pickerView.createWindow()},{label:"Get Clipboard's Colors",accelerator:"Shift+CmdOrCtrl+V",click:()=>this.colorpickerView.sendEvent("shortApply")},{label:"Toggle Shading",accelerator:"CmdOrCtrl+T",click:()=>this.colorpickerView.sendEvent("shortShading")},{label:"Toggle Opacity",accelerator:"CmdOrCtrl+O",click:()=>this.colorpickerView.sendEvent("shortOpacity")},{label:"Set Random Color",accelerator:"CmdOrCtrl+M",click:()=>this.colorpickerView.sendEvent("shortRandom")}]}],this.colorpickerView=new o.default,this.colorsbookView=new i.default,this.pickerView=new a.default,this.settingsView=new s.default,"linux"===process.platform&&(t.app.commandLine.appendSwitch("--enable-transparent-visuals"),t.app.disableHardwareAcceleration()),this.initApplication()}initApplication(){t.app.on("ready",()=>{this.createTray(),this.createMenu(),this.colorpickerView.createWindow()}),t.app.on("activate",()=>this.colorpickerView.createWindow()),t.app.on("window-all-closed",()=>{"darwin"!==process.platform&&t.app.quit()})}createMenu(){t.Menu.setApplicationMenu(t.Menu.buildFromTemplate(this.menuTemplate))}createTray(){return this.tray?this.tray:(this.tray=new t.Tray(`${__dirname}/tray-white.png`),this.tray.on("click",e=>this.colorpickerView.createWindow()),this.tray)}}n.default=u;new u},function(e,n,r){var t,o=r(8).SourceMapConsumer,i=r(15);try{(t=r(16)).existsSync&&t.readFileSync||(t=null)}catch(e){}var a=r(17),s=!1,u=!1,l=!1,c="auto",p={},h={},g=/^data:application\/json[^,]+base64,/,f=[],d=[];function m(){return"browser"===c||"node"!==c&&("undefined"!=typeof window&&"function"==typeof XMLHttpRequest&&!(window.require&&window.module&&window.process&&"renderer"===window.process.type))}function _(e){return function(n){for(var r=0;r<e.length;r++){var t=e[r](n);if(t)return t}return null}}var v=_(f);function w(e,n){if(!e)return n;var r=i.dirname(e),t=/^\w+:\/\/[^\/]*/.exec(r),o=t?t[0]:"",a=r.slice(o.length);return o&&/^\/\w\:/.test(a)?(o+="/")+i.resolve(r.slice(o.length),n).replace(/\\/g,"/"):o+i.resolve(r.slice(o.length),n)}f.push(function(e){if(e=e.trim(),/^file:/.test(e)&&(e=e.replace(/file:\/\/\/(\w:)?/,function(e,n){return n?"":"/"})),e in p)return p[e];var n="";try{if(t)t.existsSync(e)&&(n=t.readFileSync(e,"utf8"));else{var r=new XMLHttpRequest;r.open("GET",e,!1),r.send(null),4===r.readyState&&200===r.status&&(n=r.responseText)}}catch(e){}return p[e]=n});var y=_(d);function C(e){var n=h[e.source];if(!n){var r=y(e.source);r?(n=h[e.source]={url:r.url,map:new o(r.map)}).map.sourcesContent&&n.map.sources.forEach(function(e,r){var t=n.map.sourcesContent[r];if(t){var o=w(n.url,e);p[o]=t}}):n=h[e.source]={url:null,map:null}}if(n&&n.map){var t=n.map.originalPositionFor(e);if(null!==t.source)return t.source=w(n.url,t.source),t}return e}function S(){var e,n="";if(this.isNative())n="native";else{!(e=this.getScriptNameOrSourceURL())&&this.isEval()&&(n=this.getEvalOrigin(),n+=", "),n+=e||"<anonymous>";var r=this.getLineNumber();if(null!=r){n+=":"+r;var t=this.getColumnNumber();t&&(n+=":"+t)}}var o="",i=this.getFunctionName(),a=!0,s=this.isConstructor();if(!(this.isToplevel()||s)){var u=this.getTypeName();"[object Object]"===u&&(u="null");var l=this.getMethodName();i?(u&&0!=i.indexOf(u)&&(o+=u+"."),o+=i,l&&i.indexOf("."+l)!=i.length-l.length-1&&(o+=" [as "+l+"]")):o+=u+"."+(l||"<anonymous>")}else s?o+="new "+(i||"<anonymous>"):i?o+=i:(o+=n,a=!1);return a&&(o+=" ("+n+")"),o}function b(e){var n={};return Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach(function(r){n[r]=/^(?:is|get)/.test(r)?function(){return e[r].call(e)}:e[r]}),n.toString=S,n}function O(e){if(e.isNative())return e;var n=e.getFileName()||e.getScriptNameOrSourceURL();if(n){var r=e.getLineNumber(),t=e.getColumnNumber()-1;1===r&&t>62&&!m()&&!e.isEval()&&(t-=62);var o=C({source:n,line:r,column:t}),i=(e=b(e)).getFunctionName;return e.getFunctionName=function(){return o.name||i()},e.getFileName=function(){return o.source},e.getLineNumber=function(){return o.line},e.getColumnNumber=function(){return o.column+1},e.getScriptNameOrSourceURL=function(){return o.source},e}var a=e.isEval()&&e.getEvalOrigin();return a?(a=function e(n){var r=/^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(n);if(r){var t=C({source:r[2],line:+r[3],column:r[4]-1});return"eval at "+r[1]+" ("+t.source+":"+t.line+":"+(t.column+1)+")"}return(r=/^eval at ([^(]+) \((.+)\)$/.exec(n))?"eval at "+r[1]+" ("+e(r[2])+")":n}(a),(e=b(e)).getEvalOrigin=function(){return a},e):e}function M(e,n){return l&&(p={},h={}),e+n.map(function(e){return"\n    at "+O(e)}).join("")}function A(e){var n=/\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(e.stack);if(n){var r=n[1],o=+n[2],i=+n[3],a=p[r];if(!a&&t&&t.existsSync(r))try{a=t.readFileSync(r,"utf8")}catch(e){a=""}if(a){var s=a.split(/(?:\r\n|\r|\n)/)[o-1];if(s)return r+":"+o+"\n"+s+"\n"+new Array(i).join(" ")+"^"}}return null}function L(){var e=process.emit;process.emit=function(n){if("uncaughtException"===n){var r=arguments[1]&&arguments[1].stack,t=this.listeners(n).length>0;if(r&&!t)return function(e){var n=A(e);process.stderr._handle&&process.stderr._handle.setBlocking&&process.stderr._handle.setBlocking(!0),n&&(console.error(),console.error(n)),console.error(e.stack),process.exit(1)}(arguments[1])}return e.apply(this,arguments)}}d.push(function(e){var n,r=function(e){var n;if(m())try{var r=new XMLHttpRequest;r.open("GET",e,!1),r.send(null),n=4===r.readyState?r.responseText:null;var t=r.getResponseHeader("SourceMap")||r.getResponseHeader("X-SourceMap");if(t)return t}catch(e){}n=v(e);for(var o,i,a=/(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/)[ \t]*$)/gm;i=a.exec(n);)o=i;return o?o[1]:null}(e);if(!r)return null;if(g.test(r)){var t=r.slice(r.indexOf(",")+1);n=a(t,"base64").toString(),r=e}else r=w(e,r),n=v(r);return n?{url:r,map:n}:null});var E=f.slice(0),R=d.slice(0);n.wrapCallSite=O,n.getErrorSource=A,n.mapSourcePosition=C,n.retrieveSourceMap=y,n.install=function(e){if((e=e||{}).environment&&(c=e.environment,-1===["node","browser","auto"].indexOf(c)))throw new Error("environment "+c+" was unknown. Available options are {auto, browser, node}");if(e.retrieveFile&&(e.overrideRetrieveFile&&(f.length=0),f.unshift(e.retrieveFile)),e.retrieveSourceMap&&(e.overrideRetrieveSourceMap&&(d.length=0),d.unshift(e.retrieveSourceMap)),e.hookRequire&&!m()){var n;try{n=r(18)}catch(e){}var t=n.prototype._compile;t.__sourceMapSupport||(n.prototype._compile=function(e,n){return p[n]=e,h[n]=void 0,t.call(this,e,n)},n.prototype._compile.__sourceMapSupport=!0)}(l||(l="emptyCacheBetweenOperations"in e&&e.emptyCacheBetweenOperations),s||(s=!0,Error.prepareStackTrace=M),u)||(!("handleUncaughtExceptions"in e)||e.handleUncaughtExceptions)&&"object"==typeof process&&null!==process&&"function"==typeof process.on&&(u=!0,L())},n.resetRetrieveHandlers=function(){f.length=0,d.length=0,f=E.slice(0),d=R.slice(0)}},function(e,n,r){n.SourceMapGenerator=r(3).SourceMapGenerator,n.SourceMapConsumer=r(11).SourceMapConsumer,n.SourceNode=r(14).SourceNode},function(e,n){var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");n.encode=function(e){if(0<=e&&e<r.length)return r[e];throw new TypeError("Must be between 0 and 63: "+e)},n.decode=function(e){return 65<=e&&e<=90?e-65:97<=e&&e<=122?e-97+26:48<=e&&e<=57?e-48+52:43==e?62:47==e?63:-1}},function(e,n,r){var t=r(0);function o(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}o.prototype.unsortedForEach=function(e,n){this._array.forEach(e,n)},o.prototype.add=function(e){!function(e,n){var r=e.generatedLine,o=n.generatedLine,i=e.generatedColumn,a=n.generatedColumn;return o>r||o==r&&a>=i||t.compareByGeneratedPositionsInflated(e,n)<=0}(this._last,e)?(this._sorted=!1,this._array.push(e)):(this._last=e,this._array.push(e))},o.prototype.toArray=function(){return this._sorted||(this._array.sort(t.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},n.MappingList=o},function(e,n,r){var t=r(0),o=r(12),i=r(5).ArraySet,a=r(4),s=r(13).quickSort;function u(e,n){var r=e;return"string"==typeof e&&(r=t.parseSourceMapInput(e)),null!=r.sections?new p(r,n):new l(r,n)}function l(e,n){var r=e;"string"==typeof e&&(r=t.parseSourceMapInput(e));var o=t.getArg(r,"version"),a=t.getArg(r,"sources"),s=t.getArg(r,"names",[]),u=t.getArg(r,"sourceRoot",null),l=t.getArg(r,"sourcesContent",null),c=t.getArg(r,"mappings"),p=t.getArg(r,"file",null);if(o!=this._version)throw new Error("Unsupported version: "+o);u&&(u=t.normalize(u)),a=a.map(String).map(t.normalize).map(function(e){return u&&t.isAbsolute(u)&&t.isAbsolute(e)?t.relative(u,e):e}),this._names=i.fromArray(s.map(String),!0),this._sources=i.fromArray(a,!0),this._absoluteSources=this._sources.toArray().map(function(e){return t.computeSourceURL(u,e,n)}),this.sourceRoot=u,this.sourcesContent=l,this._mappings=c,this._sourceMapURL=n,this.file=p}function c(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function p(e,n){var r=e;"string"==typeof e&&(r=t.parseSourceMapInput(e));var o=t.getArg(r,"version"),a=t.getArg(r,"sections");if(o!=this._version)throw new Error("Unsupported version: "+o);this._sources=new i,this._names=new i;var s={line:-1,column:0};this._sections=a.map(function(e){if(e.url)throw new Error("Support for url field in sections not implemented.");var r=t.getArg(e,"offset"),o=t.getArg(r,"line"),i=t.getArg(r,"column");if(o<s.line||o===s.line&&i<s.column)throw new Error("Section offsets must be ordered and non-overlapping.");return s=r,{generatedOffset:{generatedLine:o+1,generatedColumn:i+1},consumer:new u(t.getArg(e,"map"),n)}})}u.fromSourceMap=function(e,n){return l.fromSourceMap(e,n)},u.prototype._version=3,u.prototype.__generatedMappings=null,Object.defineProperty(u.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),u.prototype.__originalMappings=null,Object.defineProperty(u.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),u.prototype._charIsMappingSeparator=function(e,n){var r=e.charAt(n);return";"===r||","===r},u.prototype._parseMappings=function(e,n){throw new Error("Subclasses must implement _parseMappings")},u.GENERATED_ORDER=1,u.ORIGINAL_ORDER=2,u.GREATEST_LOWER_BOUND=1,u.LEAST_UPPER_BOUND=2,u.prototype.eachMapping=function(e,n,r){var o,i=n||null;switch(r||u.GENERATED_ORDER){case u.GENERATED_ORDER:o=this._generatedMappings;break;case u.ORIGINAL_ORDER:o=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var a=this.sourceRoot;o.map(function(e){var n=null===e.source?null:this._sources.at(e.source);return{source:n=t.computeSourceURL(a,n,this._sourceMapURL),generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}},this).forEach(e,i)},u.prototype.allGeneratedPositionsFor=function(e){var n=t.getArg(e,"line"),r={source:t.getArg(e,"source"),originalLine:n,originalColumn:t.getArg(e,"column",0)};if(r.source=this._findSourceIndex(r.source),r.source<0)return[];var i=[],a=this._findMapping(r,this._originalMappings,"originalLine","originalColumn",t.compareByOriginalPositions,o.LEAST_UPPER_BOUND);if(a>=0){var s=this._originalMappings[a];if(void 0===e.column)for(var u=s.originalLine;s&&s.originalLine===u;)i.push({line:t.getArg(s,"generatedLine",null),column:t.getArg(s,"generatedColumn",null),lastColumn:t.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++a];else for(var l=s.originalColumn;s&&s.originalLine===n&&s.originalColumn==l;)i.push({line:t.getArg(s,"generatedLine",null),column:t.getArg(s,"generatedColumn",null),lastColumn:t.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++a]}return i},n.SourceMapConsumer=u,l.prototype=Object.create(u.prototype),l.prototype.consumer=u,l.prototype._findSourceIndex=function(e){var n,r=e;if(null!=this.sourceRoot&&(r=t.relative(this.sourceRoot,r)),this._sources.has(r))return this._sources.indexOf(r);for(n=0;n<this._absoluteSources.length;++n)if(this._absoluteSources[n]==e)return n;return-1},l.fromSourceMap=function(e,n){var r=Object.create(l.prototype),o=r._names=i.fromArray(e._names.toArray(),!0),a=r._sources=i.fromArray(e._sources.toArray(),!0);r.sourceRoot=e._sourceRoot,r.sourcesContent=e._generateSourcesContent(r._sources.toArray(),r.sourceRoot),r.file=e._file,r._sourceMapURL=n,r._absoluteSources=r._sources.toArray().map(function(e){return t.computeSourceURL(r.sourceRoot,e,n)});for(var u=e._mappings.toArray().slice(),p=r.__generatedMappings=[],h=r.__originalMappings=[],g=0,f=u.length;g<f;g++){var d=u[g],m=new c;m.generatedLine=d.generatedLine,m.generatedColumn=d.generatedColumn,d.source&&(m.source=a.indexOf(d.source),m.originalLine=d.originalLine,m.originalColumn=d.originalColumn,d.name&&(m.name=o.indexOf(d.name)),h.push(m)),p.push(m)}return s(r.__originalMappings,t.compareByOriginalPositions),r},l.prototype._version=3,Object.defineProperty(l.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),l.prototype._parseMappings=function(e,n){for(var r,o,i,u,l,p=1,h=0,g=0,f=0,d=0,m=0,_=e.length,v=0,w={},y={},C=[],S=[];v<_;)if(";"===e.charAt(v))p++,v++,h=0;else if(","===e.charAt(v))v++;else{for((r=new c).generatedLine=p,u=v;u<_&&!this._charIsMappingSeparator(e,u);u++);if(i=w[o=e.slice(v,u)])v+=o.length;else{for(i=[];v<u;)a.decode(e,v,y),l=y.value,v=y.rest,i.push(l);if(2===i.length)throw new Error("Found a source, but no line and column");if(3===i.length)throw new Error("Found a source and line, but no column");w[o]=i}r.generatedColumn=h+i[0],h=r.generatedColumn,i.length>1&&(r.source=d+i[1],d+=i[1],r.originalLine=g+i[2],g=r.originalLine,r.originalLine+=1,r.originalColumn=f+i[3],f=r.originalColumn,i.length>4&&(r.name=m+i[4],m+=i[4])),S.push(r),"number"==typeof r.originalLine&&C.push(r)}s(S,t.compareByGeneratedPositionsDeflated),this.__generatedMappings=S,s(C,t.compareByOriginalPositions),this.__originalMappings=C},l.prototype._findMapping=function(e,n,r,t,i,a){if(e[r]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[r]);if(e[t]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[t]);return o.search(e,n,i,a)},l.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var n=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var r=this._generatedMappings[e+1];if(n.generatedLine===r.generatedLine){n.lastGeneratedColumn=r.generatedColumn-1;continue}}n.lastGeneratedColumn=1/0}},l.prototype.originalPositionFor=function(e){var n={generatedLine:t.getArg(e,"line"),generatedColumn:t.getArg(e,"column")},r=this._findMapping(n,this._generatedMappings,"generatedLine","generatedColumn",t.compareByGeneratedPositionsDeflated,t.getArg(e,"bias",u.GREATEST_LOWER_BOUND));if(r>=0){var o=this._generatedMappings[r];if(o.generatedLine===n.generatedLine){var i=t.getArg(o,"source",null);null!==i&&(i=this._sources.at(i),i=t.computeSourceURL(this.sourceRoot,i,this._sourceMapURL));var a=t.getArg(o,"name",null);return null!==a&&(a=this._names.at(a)),{source:i,line:t.getArg(o,"originalLine",null),column:t.getArg(o,"originalColumn",null),name:a}}}return{source:null,line:null,column:null,name:null}},l.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some(function(e){return null==e}))},l.prototype.sourceContentFor=function(e,n){if(!this.sourcesContent)return null;var r=this._findSourceIndex(e);if(r>=0)return this.sourcesContent[r];var o,i=e;if(null!=this.sourceRoot&&(i=t.relative(this.sourceRoot,i)),null!=this.sourceRoot&&(o=t.urlParse(this.sourceRoot))){var a=i.replace(/^file:\/\//,"");if("file"==o.scheme&&this._sources.has(a))return this.sourcesContent[this._sources.indexOf(a)];if((!o.path||"/"==o.path)&&this._sources.has("/"+i))return this.sourcesContent[this._sources.indexOf("/"+i)]}if(n)return null;throw new Error('"'+i+'" is not in the SourceMap.')},l.prototype.generatedPositionFor=function(e){var n=t.getArg(e,"source");if((n=this._findSourceIndex(n))<0)return{line:null,column:null,lastColumn:null};var r={source:n,originalLine:t.getArg(e,"line"),originalColumn:t.getArg(e,"column")},o=this._findMapping(r,this._originalMappings,"originalLine","originalColumn",t.compareByOriginalPositions,t.getArg(e,"bias",u.GREATEST_LOWER_BOUND));if(o>=0){var i=this._originalMappings[o];if(i.source===r.source)return{line:t.getArg(i,"generatedLine",null),column:t.getArg(i,"generatedColumn",null),lastColumn:t.getArg(i,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},n.BasicSourceMapConsumer=l,p.prototype=Object.create(u.prototype),p.prototype.constructor=u,p.prototype._version=3,Object.defineProperty(p.prototype,"sources",{get:function(){for(var e=[],n=0;n<this._sections.length;n++)for(var r=0;r<this._sections[n].consumer.sources.length;r++)e.push(this._sections[n].consumer.sources[r]);return e}}),p.prototype.originalPositionFor=function(e){var n={generatedLine:t.getArg(e,"line"),generatedColumn:t.getArg(e,"column")},r=o.search(n,this._sections,function(e,n){var r=e.generatedLine-n.generatedOffset.generatedLine;return r||e.generatedColumn-n.generatedOffset.generatedColumn}),i=this._sections[r];return i?i.consumer.originalPositionFor({line:n.generatedLine-(i.generatedOffset.generatedLine-1),column:n.generatedColumn-(i.generatedOffset.generatedLine===n.generatedLine?i.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},p.prototype.hasContentsOfAllSources=function(){return this._sections.every(function(e){return e.consumer.hasContentsOfAllSources()})},p.prototype.sourceContentFor=function(e,n){for(var r=0;r<this._sections.length;r++){var t=this._sections[r].consumer.sourceContentFor(e,!0);if(t)return t}if(n)return null;throw new Error('"'+e+'" is not in the SourceMap.')},p.prototype.generatedPositionFor=function(e){for(var n=0;n<this._sections.length;n++){var r=this._sections[n];if(-1!==r.consumer._findSourceIndex(t.getArg(e,"source"))){var o=r.consumer.generatedPositionFor(e);if(o)return{line:o.line+(r.generatedOffset.generatedLine-1),column:o.column+(r.generatedOffset.generatedLine===o.line?r.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},p.prototype._parseMappings=function(e,n){this.__generatedMappings=[],this.__originalMappings=[];for(var r=0;r<this._sections.length;r++)for(var o=this._sections[r],i=o.consumer._generatedMappings,a=0;a<i.length;a++){var u=i[a],l=o.consumer._sources.at(u.source);l=t.computeSourceURL(o.consumer.sourceRoot,l,this._sourceMapURL),this._sources.add(l),l=this._sources.indexOf(l);var c=null;u.name&&(c=o.consumer._names.at(u.name),this._names.add(c),c=this._names.indexOf(c));var p={source:l,generatedLine:u.generatedLine+(o.generatedOffset.generatedLine-1),generatedColumn:u.generatedColumn+(o.generatedOffset.generatedLine===u.generatedLine?o.generatedOffset.generatedColumn-1:0),originalLine:u.originalLine,originalColumn:u.originalColumn,name:c};this.__generatedMappings.push(p),"number"==typeof p.originalLine&&this.__originalMappings.push(p)}s(this.__generatedMappings,t.compareByGeneratedPositionsDeflated),s(this.__originalMappings,t.compareByOriginalPositions)},n.IndexedSourceMapConsumer=p},function(e,n){n.GREATEST_LOWER_BOUND=1,n.LEAST_UPPER_BOUND=2,n.search=function(e,r,t,o){if(0===r.length)return-1;var i=function e(r,t,o,i,a,s){var u=Math.floor((t-r)/2)+r,l=a(o,i[u],!0);return 0===l?u:l>0?t-u>1?e(u,t,o,i,a,s):s==n.LEAST_UPPER_BOUND?t<i.length?t:-1:u:u-r>1?e(r,u,o,i,a,s):s==n.LEAST_UPPER_BOUND?u:r<0?-1:r}(-1,r.length,e,r,t,o||n.GREATEST_LOWER_BOUND);if(i<0)return-1;for(;i-1>=0&&0===t(r[i],r[i-1],!0);)--i;return i}},function(e,n){function r(e,n,r){var t=e[n];e[n]=e[r],e[r]=t}function t(e,n,o,i){if(o<i){var a=o-1;r(e,function(e,n){return Math.round(e+Math.random()*(n-e))}(o,i),i);for(var s=e[i],u=o;u<i;u++)n(e[u],s)<=0&&r(e,a+=1,u);r(e,a+1,u);var l=a+1;t(e,n,o,l-1),t(e,n,l+1,i)}}n.quickSort=function(e,n){t(e,n,0,e.length-1)}},function(e,n,r){var t=r(3).SourceMapGenerator,o=r(0),i=/(\r?\n)/,a="$$$isSourceNode$$$";function s(e,n,r,t,o){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==n?null:n,this.source=null==r?null:r,this.name=null==o?null:o,this[a]=!0,null!=t&&this.add(t)}s.fromStringWithSourceMap=function(e,n,r){var t=new s,a=e.split(i),u=0,l=function(){return e()+(e()||"");function e(){return u<a.length?a[u++]:void 0}},c=1,p=0,h=null;return n.eachMapping(function(e){if(null!==h){if(!(c<e.generatedLine)){var n=(r=a[u]||"").substr(0,e.generatedColumn-p);return a[u]=r.substr(e.generatedColumn-p),p=e.generatedColumn,g(h,n),void(h=e)}g(h,l()),c++,p=0}for(;c<e.generatedLine;)t.add(l()),c++;if(p<e.generatedColumn){var r=a[u]||"";t.add(r.substr(0,e.generatedColumn)),a[u]=r.substr(e.generatedColumn),p=e.generatedColumn}h=e},this),u<a.length&&(h&&g(h,l()),t.add(a.splice(u).join(""))),n.sources.forEach(function(e){var i=n.sourceContentFor(e);null!=i&&(null!=r&&(e=o.join(r,e)),t.setSourceContent(e,i))}),t;function g(e,n){if(null===e||void 0===e.source)t.add(n);else{var i=r?o.join(r,e.source):e.source;t.add(new s(e.originalLine,e.originalColumn,i,n,e.name))}}},s.prototype.add=function(e){if(Array.isArray(e))e.forEach(function(e){this.add(e)},this);else{if(!e[a]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},s.prototype.prepend=function(e){if(Array.isArray(e))for(var n=e.length-1;n>=0;n--)this.prepend(e[n]);else{if(!e[a]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},s.prototype.walk=function(e){for(var n,r=0,t=this.children.length;r<t;r++)(n=this.children[r])[a]?n.walk(e):""!==n&&e(n,{source:this.source,line:this.line,column:this.column,name:this.name})},s.prototype.join=function(e){var n,r,t=this.children.length;if(t>0){for(n=[],r=0;r<t-1;r++)n.push(this.children[r]),n.push(e);n.push(this.children[r]),this.children=n}return this},s.prototype.replaceRight=function(e,n){var r=this.children[this.children.length-1];return r[a]?r.replaceRight(e,n):"string"==typeof r?this.children[this.children.length-1]=r.replace(e,n):this.children.push("".replace(e,n)),this},s.prototype.setSourceContent=function(e,n){this.sourceContents[o.toSetString(e)]=n},s.prototype.walkSourceContents=function(e){for(var n=0,r=this.children.length;n<r;n++)this.children[n][a]&&this.children[n].walkSourceContents(e);var t=Object.keys(this.sourceContents);for(n=0,r=t.length;n<r;n++)e(o.fromSetString(t[n]),this.sourceContents[t[n]])},s.prototype.toString=function(){var e="";return this.walk(function(n){e+=n}),e},s.prototype.toStringWithSourceMap=function(e){var n={code:"",line:1,column:0},r=new t(e),o=!1,i=null,a=null,s=null,u=null;return this.walk(function(e,t){n.code+=e,null!==t.source&&null!==t.line&&null!==t.column?(i===t.source&&a===t.line&&s===t.column&&u===t.name||r.addMapping({source:t.source,original:{line:t.line,column:t.column},generated:{line:n.line,column:n.column},name:t.name}),i=t.source,a=t.line,s=t.column,u=t.name,o=!0):o&&(r.addMapping({generated:{line:n.line,column:n.column}}),i=null,o=!1);for(var l=0,c=e.length;l<c;l++)10===e.charCodeAt(l)?(n.line++,n.column=0,l+1===c?(i=null,o=!1):o&&r.addMapping({source:t.source,original:{line:t.line,column:t.column},generated:{line:n.line,column:n.column},name:t.name})):n.column++}),this.walkSourceContents(function(e,n){r.setSourceContent(e,n)}),{code:n.code,map:r}},n.SourceNode=s},function(e,n){e.exports=require("path")},function(e,n){e.exports=require("fs")},function(e,n){var r=Object.prototype.toString,t="function"==typeof Buffer.alloc&&"function"==typeof Buffer.allocUnsafe&&"function"==typeof Buffer.from;e.exports=function(e,n,o){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return function(e){return"ArrayBuffer"===r.call(e).slice(8,-1)}(e)?function(e,n,r){n>>>=0;var o=e.byteLength-n;if(o<0)throw new RangeError("'offset' is out of bounds");if(void 0===r)r=o;else if((r>>>=0)>o)throw new RangeError("'length' is out of bounds");return t?Buffer.from(e.slice(n,n+r)):new Buffer(new Uint8Array(e.slice(n,n+r)))}(e,n,o):"string"==typeof e?function(e,n){if("string"==typeof n&&""!==n||(n="utf8"),!Buffer.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');return t?Buffer.from(e,n):new Buffer(e,n)}(e,n):t?Buffer.from(e):new Buffer(e)}},function(e,n){e.exports=require("module")},function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const t=r(1),o=r(2),i=r(20);n.default=class extends o.default{constructor(){super("colorpicker"),this.windowParams={frame:!1,autoHideMenuBar:!0,minWidth:440,minHeight:150,width:440,height:150,transparent:!1,icon:`${__dirname}/logo.png`}}createWindow(){const e=super.createWindow(),n=new i.default;return e.setTouchBar(n.getTouchBar()),e.webContents.openDevTools(),e}closeWindow(){this.window&&(this.window=void 0);let e=t.BrowserWindow.getAllWindows();for(let n of e)n.close()}}},function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const t=r(21),o=r(1),{TouchBarColorPicker:i,TouchBarButton:a}=o.TouchBar;n.default=class{constructor(){this.eventEmitter=new t.EventEmitter,this.touchBar=new o.TouchBar({items:[]}),this.init()}init(){const e=new i({change:e=>this.eventEmitter.emit("changeColor",e)}),n=new a({icon:o.nativeImage.createFromPath(`${__dirname}/eyedropper-touchbar.png`),click:()=>this.eventEmitter.emit("launchPicker")}),r=new a({icon:o.nativeImage.createFromPath(`${__dirname}/colorsbook-touchbar.png`),click:()=>this.eventEmitter.emit("launchColorsbook")}),t=new a({icon:o.nativeImage.createFromPath(`${__dirname}/settings-touchbar.png`),click:()=>this.eventEmitter.emit("showPreferences")});this.touchBar=new o.TouchBar({items:[e,n,r,t]})}getTouchBar(){return this.touchBar}}},function(e,n){e.exports=require("events")},function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const t=r(2);n.default=class extends t.default{constructor(){super("colorsbook"),this.windowParams={frame:!1,autoHideMenuBar:!0,width:365,height:400,minHeight:285,minWidth:360,icon:`${__dirname}/logo.png`}}}},function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const t=r(2);n.default=class extends t.default{constructor(){super("picker"),this.windowParams={frame:!1,autoHideMenuBar:!0,width:100,height:100,transparent:!0,alwaysOnTop:!0,resizable:!1,focusable:!0,hasShadow:!1,icon:`${__dirname}/logo.png`}}}},function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const t=r(2);n.default=class extends t.default{constructor(){super("settings"),this.windowParams={width:700,height:500,minWidth:460,minHeight:340,fullscreenable:!1,icon:`${__dirname}/logo.png`}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZWxlY3Ryb25cIiIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi92aWV3cy93aW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAtZ2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9iYXNlNjQtdmxxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9hcnJheS1zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC1zdXBwb3J0L3NvdXJjZS1tYXAtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9zb3VyY2UtbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9iYXNlNjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL21hcHBpbmctbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1jb25zdW1lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmluYXJ5LXNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvcXVpY2stc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW5vZGUuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicGF0aFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImZzXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci1mcm9tL2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIm1vZHVsZVwiIiwid2VicGFjazovLy8uL3NyYy9tYWluL3ZpZXdzL2NvbG9ycGlja2VyVmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi90b3VjaGJhci9jb2xvcnBpY2tlclRvdWNoYmFyLnRzIiwid2VicGFjazovLy9leHRlcm5hbCBcImV2ZW50c1wiIiwid2VicGFjazovLy8uL3NyYy9tYWluL3ZpZXdzL2NvbG9yc2Jvb2tWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9tYWluL3ZpZXdzL3BpY2tlclZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vdmlld3Mvc2V0dGluZ3NWaWV3LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZ2V0QXJnIiwiYUFyZ3MiLCJhTmFtZSIsImFEZWZhdWx0VmFsdWUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJFcnJvciIsInVybFJlZ2V4cCIsImRhdGFVcmxSZWdleHAiLCJ1cmxQYXJzZSIsImFVcmwiLCJtYXRjaCIsInNjaGVtZSIsImF1dGgiLCJob3N0IiwicG9ydCIsInBhdGgiLCJ1cmxHZW5lcmF0ZSIsImFQYXJzZWRVcmwiLCJ1cmwiLCJub3JtYWxpemUiLCJhUGF0aCIsInBhcnQiLCJpc0Fic29sdXRlIiwicGFydHMiLCJzcGxpdCIsInVwIiwic3BsaWNlIiwiam9pbiIsImFSb290IiwiYVBhdGhVcmwiLCJhUm9vdFVybCIsImpvaW5lZCIsImNoYXJBdCIsInJlcGxhY2UiLCJ0ZXN0IiwicmVsYXRpdmUiLCJsZXZlbCIsImluZGV4T2YiLCJpbmRleCIsImxhc3RJbmRleE9mIiwic2xpY2UiLCJBcnJheSIsInN1YnN0ciIsInN1cHBvcnRzTnVsbFByb3RvIiwiaWRlbnRpdHkiLCJpc1Byb3RvU3RyaW5nIiwiY2hhckNvZGVBdCIsInN0cmNtcCIsImFTdHIxIiwiYVN0cjIiLCJ0b1NldFN0cmluZyIsImFTdHIiLCJmcm9tU2V0U3RyaW5nIiwiY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMiLCJtYXBwaW5nQSIsIm1hcHBpbmdCIiwib25seUNvbXBhcmVPcmlnaW5hbCIsImNtcCIsInNvdXJjZSIsIm9yaWdpbmFsTGluZSIsIm9yaWdpbmFsQ29sdW1uIiwiZ2VuZXJhdGVkQ29sdW1uIiwiZ2VuZXJhdGVkTGluZSIsImNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkIiwib25seUNvbXBhcmVHZW5lcmF0ZWQiLCJjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZCIsInBhcnNlU291cmNlTWFwSW5wdXQiLCJzdHIiLCJKU09OIiwicGFyc2UiLCJjb21wdXRlU291cmNlVVJMIiwic291cmNlUm9vdCIsInNvdXJjZVVSTCIsInNvdXJjZU1hcFVSTCIsInBhcnNlZCIsInN1YnN0cmluZyIsInJlcXVpcmUiLCJlbGVjdHJvbl8xIiwiZGVmYXVsdCIsIltvYmplY3QgT2JqZWN0XSIsInZpZXciLCJ0aGlzIiwid2luZG93UGFyYW1zIiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJpY29uIiwiX19kaXJuYW1lIiwid2luZG93IiwiQnJvd3NlcldpbmRvdyIsImxvYWRVUkwiLCJvbiIsImNsb3NlV2luZG93IiwiY2xvc2UiLCJ1bmRlZmluZWQiLCJjcmVhdGVXaW5kb3ciLCJjaGFubmVsIiwiYXJncyIsIndlYkNvbnRlbnRzIiwic2VuZCIsImJhc2U2NFZMUSIsInV0aWwiLCJBcnJheVNldCIsIk1hcHBpbmdMaXN0IiwiU291cmNlTWFwR2VuZXJhdG9yIiwiX2ZpbGUiLCJfc291cmNlUm9vdCIsIl9za2lwVmFsaWRhdGlvbiIsIl9zb3VyY2VzIiwiX25hbWVzIiwiX21hcHBpbmdzIiwiX3NvdXJjZXNDb250ZW50cyIsIl92ZXJzaW9uIiwiZnJvbVNvdXJjZU1hcCIsImFTb3VyY2VNYXBDb25zdW1lciIsImdlbmVyYXRvciIsImZpbGUiLCJlYWNoTWFwcGluZyIsIm1hcHBpbmciLCJuZXdNYXBwaW5nIiwiZ2VuZXJhdGVkIiwibGluZSIsImNvbHVtbiIsIm9yaWdpbmFsIiwiYWRkTWFwcGluZyIsInNvdXJjZXMiLCJmb3JFYWNoIiwic291cmNlRmlsZSIsInNvdXJjZVJlbGF0aXZlIiwiaGFzIiwiYWRkIiwiY29udGVudCIsInNvdXJjZUNvbnRlbnRGb3IiLCJzZXRTb3VyY2VDb250ZW50IiwiX3ZhbGlkYXRlTWFwcGluZyIsIlN0cmluZyIsImFTb3VyY2VGaWxlIiwiYVNvdXJjZUNvbnRlbnQiLCJrZXlzIiwiYXBwbHlTb3VyY2VNYXAiLCJhU291cmNlTWFwUGF0aCIsIm5ld1NvdXJjZXMiLCJuZXdOYW1lcyIsInVuc29ydGVkRm9yRWFjaCIsIm9yaWdpbmFsUG9zaXRpb25Gb3IiLCJhR2VuZXJhdGVkIiwiYU9yaWdpbmFsIiwiYVNvdXJjZSIsInN0cmluZ2lmeSIsIl9zZXJpYWxpemVNYXBwaW5ncyIsIm5leHQiLCJuYW1lSWR4Iiwic291cmNlSWR4IiwicHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4iLCJwcmV2aW91c0dlbmVyYXRlZExpbmUiLCJwcmV2aW91c09yaWdpbmFsQ29sdW1uIiwicHJldmlvdXNPcmlnaW5hbExpbmUiLCJwcmV2aW91c05hbWUiLCJwcmV2aW91c1NvdXJjZSIsInJlc3VsdCIsIm1hcHBpbmdzIiwidG9BcnJheSIsImxlbiIsImVuY29kZSIsIl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50IiwiYVNvdXJjZXMiLCJhU291cmNlUm9vdCIsIm1hcCIsInRvSlNPTiIsInZlcnNpb24iLCJuYW1lcyIsInNvdXJjZXNDb250ZW50IiwidG9TdHJpbmciLCJiYXNlNjQiLCJhVmFsdWUiLCJkaWdpdCIsImVuY29kZWQiLCJ2bHEiLCJ0b1ZMUVNpZ25lZCIsIlZMUV9CQVNFIiwiZGVjb2RlIiwiYUluZGV4IiwiYU91dFBhcmFtIiwiY29udGludWF0aW9uIiwic3RyTGVuIiwic2hpZnQiLCJzaGlmdGVkIiwiZnJvbVZMUVNpZ25lZCIsInJlc3QiLCJoYXNOYXRpdmVNYXAiLCJNYXAiLCJfYXJyYXkiLCJfc2V0IiwiZnJvbUFycmF5IiwiYUFycmF5IiwiYUFsbG93RHVwbGljYXRlcyIsInNldCIsInNpemUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic1N0ciIsImlzRHVwbGljYXRlIiwiaWR4IiwicHVzaCIsImF0IiwiYUlkeCIsImluc3RhbGwiLCJjb2xvcnBpY2tlclZpZXdfMSIsImNvbG9yc2Jvb2tWaWV3XzEiLCJwaWNrZXJWaWV3XzEiLCJzZXR0aW5nc1ZpZXdfMSIsIkNvbG9ycGlja2VyQXBwIiwibWVudVRlbXBsYXRlIiwibGFiZWwiLCJzdWJtZW51IiwiYWNjZWxlcmF0b3IiLCJjbGljayIsInNldHRpbmdzVmlldyIsImFwcCIsImdldFZlcnNpb24iLCJlbmFibGVkIiwidHlwZSIsInJvbGUiLCJxdWl0IiwiY29sb3JwaWNrZXJWaWV3IiwiY29sb3JzYm9va1ZpZXciLCJzZW5kRXZlbnQiLCJwaWNrZXJWaWV3IiwicHJvY2VzcyIsInBsYXRmb3JtIiwiY29tbWFuZExpbmUiLCJhcHBlbmRTd2l0Y2giLCJkaXNhYmxlSGFyZHdhcmVBY2NlbGVyYXRpb24iLCJpbml0QXBwbGljYXRpb24iLCJjcmVhdGVUcmF5IiwiY3JlYXRlTWVudSIsIk1lbnUiLCJzZXRBcHBsaWNhdGlvbk1lbnUiLCJidWlsZEZyb21UZW1wbGF0ZSIsInRyYXkiLCJUcmF5IiwiZXZlbnQiLCJmcyIsIlNvdXJjZU1hcENvbnN1bWVyIiwiZXhpc3RzU3luYyIsInJlYWRGaWxlU3luYyIsImVyciIsImJ1ZmZlckZyb20iLCJlcnJvckZvcm1hdHRlckluc3RhbGxlZCIsInVuY2F1Z2h0U2hpbUluc3RhbGxlZCIsImVtcHR5Q2FjaGVCZXR3ZWVuT3BlcmF0aW9ucyIsImVudmlyb25tZW50IiwiZmlsZUNvbnRlbnRzQ2FjaGUiLCJzb3VyY2VNYXBDYWNoZSIsInJlU291cmNlTWFwIiwicmV0cmlldmVGaWxlSGFuZGxlcnMiLCJyZXRyaWV2ZU1hcEhhbmRsZXJzIiwiaXNJbkJyb3dzZXIiLCJYTUxIdHRwUmVxdWVzdCIsImhhbmRsZXJFeGVjIiwibGlzdCIsImFyZyIsInJldCIsInJldHJpZXZlRmlsZSIsInN1cHBvcnRSZWxhdGl2ZVVSTCIsImRpciIsImRpcm5hbWUiLCJleGVjIiwicHJvdG9jb2wiLCJzdGFydFBhdGgiLCJyZXNvbHZlIiwidHJpbSIsImRyaXZlIiwiY29udGVudHMiLCJ4aHIiLCJvcGVuIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsImVyIiwicmV0cmlldmVTb3VyY2VNYXAiLCJtYXBTb3VyY2VQb3NpdGlvbiIsInBvc2l0aW9uIiwic291cmNlTWFwIiwidXJsQW5kTWFwIiwib3JpZ2luYWxQb3NpdGlvbiIsIkNhbGxTaXRlVG9TdHJpbmciLCJmaWxlTmFtZSIsImZpbGVMb2NhdGlvbiIsImlzTmF0aXZlIiwiZ2V0U2NyaXB0TmFtZU9yU291cmNlVVJMIiwiaXNFdmFsIiwiZ2V0RXZhbE9yaWdpbiIsImxpbmVOdW1iZXIiLCJnZXRMaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiZ2V0Q29sdW1uTnVtYmVyIiwiZnVuY3Rpb25OYW1lIiwiZ2V0RnVuY3Rpb25OYW1lIiwiYWRkU3VmZml4IiwiaXNDb25zdHJ1Y3RvciIsImlzVG9wbGV2ZWwiLCJ0eXBlTmFtZSIsImdldFR5cGVOYW1lIiwibWV0aG9kTmFtZSIsImdldE1ldGhvZE5hbWUiLCJjbG9uZUNhbGxTaXRlIiwiZnJhbWUiLCJnZXRQcm90b3R5cGVPZiIsIndyYXBDYWxsU2l0ZSIsImdldEZpbGVOYW1lIiwib3JpZ2luYWxGdW5jdGlvbk5hbWUiLCJvcmlnaW4iLCJtYXBFdmFsT3JpZ2luIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJlcnJvciIsInN0YWNrIiwiZ2V0RXJyb3JTb3VyY2UiLCJjb2RlIiwic2hpbUVtaXRVbmNhdWdodEV4Y2VwdGlvbiIsIm9yaWdFbWl0IiwiZW1pdCIsImhhc1N0YWNrIiwiaGFzTGlzdGVuZXJzIiwibGlzdGVuZXJzIiwic3RkZXJyIiwiX2hhbmRsZSIsInNldEJsb2NraW5nIiwiY29uc29sZSIsImV4aXQiLCJwcmludEVycm9yQW5kRXhpdCIsImFwcGx5Iiwic291cmNlTWFwRGF0YSIsInNvdXJjZU1hcHBpbmdVUkwiLCJmaWxlRGF0YSIsInNvdXJjZU1hcEhlYWRlciIsImdldFJlc3BvbnNlSGVhZGVyIiwiZSIsImxhc3RNYXRjaCIsInJlIiwicmV0cmlldmVTb3VyY2VNYXBVUkwiLCJyYXdEYXRhIiwib3JpZ2luYWxSZXRyaWV2ZUZpbGVIYW5kbGVycyIsIm9yaWdpbmFsUmV0cmlldmVNYXBIYW5kbGVycyIsIm9wdGlvbnMiLCJvdmVycmlkZVJldHJpZXZlRmlsZSIsInVuc2hpZnQiLCJvdmVycmlkZVJldHJpZXZlU291cmNlTWFwIiwiaG9va1JlcXVpcmUiLCJNb2R1bGUiLCIkY29tcGlsZSIsIl9jb21waWxlIiwiX19zb3VyY2VNYXBTdXBwb3J0IiwiZmlsZW5hbWUiLCJoYW5kbGVVbmNhdWdodEV4Y2VwdGlvbnMiLCJyZXNldFJldHJpZXZlSGFuZGxlcnMiLCJTb3VyY2VOb2RlIiwiaW50VG9DaGFyTWFwIiwibnVtYmVyIiwiVHlwZUVycm9yIiwiY2hhckNvZGUiLCJfc29ydGVkIiwiX2xhc3QiLCJhQ2FsbGJhY2siLCJhVGhpc0FyZyIsImFNYXBwaW5nIiwibGluZUEiLCJsaW5lQiIsImNvbHVtbkEiLCJjb2x1bW5CIiwiZ2VuZXJhdGVkUG9zaXRpb25BZnRlciIsInNvcnQiLCJiaW5hcnlTZWFyY2giLCJxdWlja1NvcnQiLCJhU291cmNlTWFwIiwiYVNvdXJjZU1hcFVSTCIsInNlY3Rpb25zIiwiSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyIiwiQmFzaWNTb3VyY2VNYXBDb25zdW1lciIsIl9hYnNvbHV0ZVNvdXJjZXMiLCJfc291cmNlTWFwVVJMIiwiTWFwcGluZyIsImxhc3RPZmZzZXQiLCJfc2VjdGlvbnMiLCJvZmZzZXQiLCJvZmZzZXRMaW5lIiwib2Zmc2V0Q29sdW1uIiwiZ2VuZXJhdGVkT2Zmc2V0IiwiY29uc3VtZXIiLCJfX2dlbmVyYXRlZE1hcHBpbmdzIiwiY29uZmlndXJhYmxlIiwiX3BhcnNlTWFwcGluZ3MiLCJfX29yaWdpbmFsTWFwcGluZ3MiLCJfY2hhcklzTWFwcGluZ1NlcGFyYXRvciIsIkdFTkVSQVRFRF9PUkRFUiIsIk9SSUdJTkFMX09SREVSIiwiR1JFQVRFU1RfTE9XRVJfQk9VTkQiLCJMRUFTVF9VUFBFUl9CT1VORCIsImFDb250ZXh0IiwiYU9yZGVyIiwiY29udGV4dCIsIl9nZW5lcmF0ZWRNYXBwaW5ncyIsIl9vcmlnaW5hbE1hcHBpbmdzIiwiYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yIiwibmVlZGxlIiwiX2ZpbmRTb3VyY2VJbmRleCIsIl9maW5kTWFwcGluZyIsImxhc3RDb2x1bW4iLCJyZWxhdGl2ZVNvdXJjZSIsInNtYyIsImdlbmVyYXRlZE1hcHBpbmdzIiwiZGVzdEdlbmVyYXRlZE1hcHBpbmdzIiwiZGVzdE9yaWdpbmFsTWFwcGluZ3MiLCJzcmNNYXBwaW5nIiwiZGVzdE1hcHBpbmciLCJzZWdtZW50IiwiZW5kIiwiY2FjaGVkU2VnbWVudHMiLCJ0ZW1wIiwib3JpZ2luYWxNYXBwaW5ncyIsImFOZWVkbGUiLCJhTWFwcGluZ3MiLCJhTGluZU5hbWUiLCJhQ29sdW1uTmFtZSIsImFDb21wYXJhdG9yIiwiYUJpYXMiLCJzZWFyY2giLCJjb21wdXRlQ29sdW1uU3BhbnMiLCJuZXh0TWFwcGluZyIsImxhc3RHZW5lcmF0ZWRDb2x1bW4iLCJJbmZpbml0eSIsImhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzIiwic29tZSIsInNjIiwibnVsbE9uTWlzc2luZyIsImZpbGVVcmlBYnNQYXRoIiwiZ2VuZXJhdGVkUG9zaXRpb25Gb3IiLCJjb25zdHJ1Y3RvciIsImoiLCJzZWN0aW9uSW5kZXgiLCJzZWN0aW9uIiwiYmlhcyIsImV2ZXJ5IiwiZ2VuZXJhdGVkUG9zaXRpb24iLCJzZWN0aW9uTWFwcGluZ3MiLCJhZGp1c3RlZE1hcHBpbmciLCJhSGF5c3RhY2siLCJhQ29tcGFyZSIsInJlY3Vyc2l2ZVNlYXJjaCIsImFMb3ciLCJhSGlnaCIsIm1pZCIsIk1hdGgiLCJmbG9vciIsInN3YXAiLCJhcnkiLCJ4IiwieSIsImRvUXVpY2tTb3J0IiwiY29tcGFyYXRvciIsImxvdyIsImhpZ2giLCJyb3VuZCIsInJhbmRvbSIsInJhbmRvbUludEluUmFuZ2UiLCJwaXZvdCIsInEiLCJSRUdFWF9ORVdMSU5FIiwiaXNTb3VyY2VOb2RlIiwiYUxpbmUiLCJhQ29sdW1uIiwiYUNodW5rcyIsImNoaWxkcmVuIiwic291cmNlQ29udGVudHMiLCJmcm9tU3RyaW5nV2l0aFNvdXJjZU1hcCIsImFHZW5lcmF0ZWRDb2RlIiwiYVJlbGF0aXZlUGF0aCIsIm5vZGUiLCJyZW1haW5pbmdMaW5lcyIsInJlbWFpbmluZ0xpbmVzSW5kZXgiLCJzaGlmdE5leHRMaW5lIiwiZ2V0TmV4dExpbmUiLCJsYXN0R2VuZXJhdGVkTGluZSIsImxhc3RNYXBwaW5nIiwibmV4dExpbmUiLCJhZGRNYXBwaW5nV2l0aENvZGUiLCJhQ2h1bmsiLCJpc0FycmF5IiwiY2h1bmsiLCJwcmVwZW5kIiwid2FsayIsImFGbiIsImFTZXAiLCJuZXdDaGlsZHJlbiIsInJlcGxhY2VSaWdodCIsImFQYXR0ZXJuIiwiYVJlcGxhY2VtZW50IiwibGFzdENoaWxkIiwid2Fsa1NvdXJjZUNvbnRlbnRzIiwidG9TdHJpbmdXaXRoU291cmNlTWFwIiwic291cmNlTWFwcGluZ0FjdGl2ZSIsImxhc3RPcmlnaW5hbFNvdXJjZSIsImxhc3RPcmlnaW5hbExpbmUiLCJsYXN0T3JpZ2luYWxDb2x1bW4iLCJsYXN0T3JpZ2luYWxOYW1lIiwic291cmNlQ29udGVudCIsImlzTW9kZXJuIiwiQnVmZmVyIiwiYWxsb2MiLCJhbGxvY1Vuc2FmZSIsImZyb20iLCJlbmNvZGluZ09yT2Zmc2V0IiwiaW5wdXQiLCJpc0FycmF5QnVmZmVyIiwib2JqIiwiYnl0ZU9mZnNldCIsIm1heExlbmd0aCIsImJ5dGVMZW5ndGgiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsImZyb21BcnJheUJ1ZmZlciIsInN0cmluZyIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImZyb21TdHJpbmciLCJ3aW5kb3dfMSIsImNvbG9ycGlja2VyVG91Y2hiYXJfMSIsInN1cGVyIiwiYXV0b0hpZGVNZW51QmFyIiwid2lkdGgiLCJoZWlnaHQiLCJ0cmFuc3BhcmVudCIsInRvdWNoYmFyIiwic2V0VG91Y2hCYXIiLCJnZXRUb3VjaEJhciIsIm9wZW5EZXZUb29scyIsInRvdGFsV2luZG93cyIsImdldEFsbFdpbmRvd3MiLCJldmVudHNfMSIsIlRvdWNoQmFyQ29sb3JQaWNrZXIiLCJUb3VjaEJhckJ1dHRvbiIsIlRvdWNoQmFyIiwiZXZlbnRFbWl0dGVyIiwiRXZlbnRFbWl0dGVyIiwidG91Y2hCYXIiLCJpdGVtcyIsImluaXQiLCJjb2xvcnBpY2tlciIsImNoYW5nZSIsImNvbG9yIiwiZXllZHJvcHBlciIsIm5hdGl2ZUltYWdlIiwiY3JlYXRlRnJvbVBhdGgiLCJjb2xvcnNib29rIiwic2V0dGluZ3MiLCJhbHdheXNPblRvcCIsInJlc2l6YWJsZSIsImZvY3VzYWJsZSIsImhhc1NoYWRvdyIsImZ1bGxzY3JlZW5hYmxlIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElB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eENDLGNBQ0U4YixNQUFNLFlBVkU1YixLQUFBQyxjQUNSNmIsTUFBTyxJQUNQQyxPQUFRLElBQ1I3YixTQUFVLElBQ1ZDLFVBQVcsSUFDWHlkLGdCQUFnQixFQUNoQnhkLFFBQVNDIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNik7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbi8qKlxuICogVGhpcyBpcyBhIGhlbHBlciBmdW5jdGlvbiBmb3IgZ2V0dGluZyB2YWx1ZXMgZnJvbSBwYXJhbWV0ZXIvb3B0aW9uc1xuICogb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0gYXJncyBUaGUgb2JqZWN0IHdlIGFyZSBleHRyYWN0aW5nIHZhbHVlcyBmcm9tXG4gKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgd2UgYXJlIGdldHRpbmcuXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIEFuIG9wdGlvbmFsIHZhbHVlIHRvIHJldHVybiBpZiB0aGUgcHJvcGVydHkgaXMgbWlzc2luZ1xuICogZnJvbSB0aGUgb2JqZWN0LiBJZiB0aGlzIGlzIG5vdCBzcGVjaWZpZWQgYW5kIHRoZSBwcm9wZXJ0eSBpcyBtaXNzaW5nLCBhblxuICogZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gKi9cbmZ1bmN0aW9uIGdldEFyZyhhQXJncywgYU5hbWUsIGFEZWZhdWx0VmFsdWUpIHtcbiAgaWYgKGFOYW1lIGluIGFBcmdzKSB7XG4gICAgcmV0dXJuIGFBcmdzW2FOYW1lXTtcbiAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgcmV0dXJuIGFEZWZhdWx0VmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhTmFtZSArICdcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LicpO1xuICB9XG59XG5leHBvcnRzLmdldEFyZyA9IGdldEFyZztcblxudmFyIHVybFJlZ2V4cCA9IC9eKD86KFtcXHcrXFwtLl0rKTopP1xcL1xcLyg/OihcXHcrOlxcdyspQCk/KFtcXHcuLV0qKSg/OjooXFxkKykpPyguKikkLztcbnZhciBkYXRhVXJsUmVnZXhwID0gL15kYXRhOi4rXFwsLiskLztcblxuZnVuY3Rpb24gdXJsUGFyc2UoYVVybCkge1xuICB2YXIgbWF0Y2ggPSBhVXJsLm1hdGNoKHVybFJlZ2V4cCk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHNjaGVtZTogbWF0Y2hbMV0sXG4gICAgYXV0aDogbWF0Y2hbMl0sXG4gICAgaG9zdDogbWF0Y2hbM10sXG4gICAgcG9ydDogbWF0Y2hbNF0sXG4gICAgcGF0aDogbWF0Y2hbNV1cbiAgfTtcbn1cbmV4cG9ydHMudXJsUGFyc2UgPSB1cmxQYXJzZTtcblxuZnVuY3Rpb24gdXJsR2VuZXJhdGUoYVBhcnNlZFVybCkge1xuICB2YXIgdXJsID0gJyc7XG4gIGlmIChhUGFyc2VkVXJsLnNjaGVtZSkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLnNjaGVtZSArICc6JztcbiAgfVxuICB1cmwgKz0gJy8vJztcbiAgaWYgKGFQYXJzZWRVcmwuYXV0aCkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLmF1dGggKyAnQCc7XG4gIH1cbiAgaWYgKGFQYXJzZWRVcmwuaG9zdCkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLmhvc3Q7XG4gIH1cbiAgaWYgKGFQYXJzZWRVcmwucG9ydCkge1xuICAgIHVybCArPSBcIjpcIiArIGFQYXJzZWRVcmwucG9ydFxuICB9XG4gIGlmIChhUGFyc2VkVXJsLnBhdGgpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5wYXRoO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5leHBvcnRzLnVybEdlbmVyYXRlID0gdXJsR2VuZXJhdGU7XG5cbi8qKlxuICogTm9ybWFsaXplcyBhIHBhdGgsIG9yIHRoZSBwYXRoIHBvcnRpb24gb2YgYSBVUkw6XG4gKlxuICogLSBSZXBsYWNlcyBjb25zZWN1dGl2ZSBzbGFzaGVzIHdpdGggb25lIHNsYXNoLlxuICogLSBSZW1vdmVzIHVubmVjZXNzYXJ5ICcuJyBwYXJ0cy5cbiAqIC0gUmVtb3ZlcyB1bm5lY2Vzc2FyeSAnPGRpcj4vLi4nIHBhcnRzLlxuICpcbiAqIEJhc2VkIG9uIGNvZGUgaW4gdGhlIE5vZGUuanMgJ3BhdGgnIGNvcmUgbW9kdWxlLlxuICpcbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciB1cmwgdG8gbm9ybWFsaXplLlxuICovXG5mdW5jdGlvbiBub3JtYWxpemUoYVBhdGgpIHtcbiAgdmFyIHBhdGggPSBhUGF0aDtcbiAgdmFyIHVybCA9IHVybFBhcnNlKGFQYXRoKTtcbiAgaWYgKHVybCkge1xuICAgIGlmICghdXJsLnBhdGgpIHtcbiAgICAgIHJldHVybiBhUGF0aDtcbiAgICB9XG4gICAgcGF0aCA9IHVybC5wYXRoO1xuICB9XG4gIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpO1xuXG4gIHZhciBwYXJ0cyA9IHBhdGguc3BsaXQoL1xcLysvKTtcbiAgZm9yICh2YXIgcGFydCwgdXAgPSAwLCBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBwYXJ0ID0gcGFydHNbaV07XG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwID4gMCkge1xuICAgICAgaWYgKHBhcnQgPT09ICcnKSB7XG4gICAgICAgIC8vIFRoZSBmaXJzdCBwYXJ0IGlzIGJsYW5rIGlmIHRoZSBwYXRoIGlzIGFic29sdXRlLiBUcnlpbmcgdG8gZ29cbiAgICAgICAgLy8gYWJvdmUgdGhlIHJvb3QgaXMgYSBuby1vcC4gVGhlcmVmb3JlIHdlIGNhbiByZW1vdmUgYWxsICcuLicgcGFydHNcbiAgICAgICAgLy8gZGlyZWN0bHkgYWZ0ZXIgdGhlIHJvb3QuXG4gICAgICAgIHBhcnRzLnNwbGljZShpICsgMSwgdXApO1xuICAgICAgICB1cCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMik7XG4gICAgICAgIHVwLS07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHBhdGggPSBwYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKHBhdGggPT09ICcnKSB7XG4gICAgcGF0aCA9IGlzQWJzb2x1dGUgPyAnLycgOiAnLic7XG4gIH1cblxuICBpZiAodXJsKSB7XG4gICAgdXJsLnBhdGggPSBwYXRoO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZSh1cmwpO1xuICB9XG4gIHJldHVybiBwYXRoO1xufVxuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG5cbi8qKlxuICogSm9pbnMgdHdvIHBhdGhzL1VSTHMuXG4gKlxuICogQHBhcmFtIGFSb290IFRoZSByb290IHBhdGggb3IgVVJMLlxuICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIFVSTCB0byBiZSBqb2luZWQgd2l0aCB0aGUgcm9vdC5cbiAqXG4gKiAtIElmIGFQYXRoIGlzIGEgVVJMIG9yIGEgZGF0YSBVUkksIGFQYXRoIGlzIHJldHVybmVkLCB1bmxlc3MgYVBhdGggaXMgYVxuICogICBzY2hlbWUtcmVsYXRpdmUgVVJMOiBUaGVuIHRoZSBzY2hlbWUgb2YgYVJvb3QsIGlmIGFueSwgaXMgcHJlcGVuZGVkXG4gKiAgIGZpcnN0LlxuICogLSBPdGhlcndpc2UgYVBhdGggaXMgYSBwYXRoLiBJZiBhUm9vdCBpcyBhIFVSTCwgdGhlbiBpdHMgcGF0aCBwb3J0aW9uXG4gKiAgIGlzIHVwZGF0ZWQgd2l0aCB0aGUgcmVzdWx0IGFuZCBhUm9vdCBpcyByZXR1cm5lZC4gT3RoZXJ3aXNlIHRoZSByZXN1bHRcbiAqICAgaXMgcmV0dXJuZWQuXG4gKiAgIC0gSWYgYVBhdGggaXMgYWJzb2x1dGUsIHRoZSByZXN1bHQgaXMgYVBhdGguXG4gKiAgIC0gT3RoZXJ3aXNlIHRoZSB0d28gcGF0aHMgYXJlIGpvaW5lZCB3aXRoIGEgc2xhc2guXG4gKiAtIEpvaW5pbmcgZm9yIGV4YW1wbGUgJ2h0dHA6Ly8nIGFuZCAnd3d3LmV4YW1wbGUuY29tJyBpcyBhbHNvIHN1cHBvcnRlZC5cbiAqL1xuZnVuY3Rpb24gam9pbihhUm9vdCwgYVBhdGgpIHtcbiAgaWYgKGFSb290ID09PSBcIlwiKSB7XG4gICAgYVJvb3QgPSBcIi5cIjtcbiAgfVxuICBpZiAoYVBhdGggPT09IFwiXCIpIHtcbiAgICBhUGF0aCA9IFwiLlwiO1xuICB9XG4gIHZhciBhUGF0aFVybCA9IHVybFBhcnNlKGFQYXRoKTtcbiAgdmFyIGFSb290VXJsID0gdXJsUGFyc2UoYVJvb3QpO1xuICBpZiAoYVJvb3RVcmwpIHtcbiAgICBhUm9vdCA9IGFSb290VXJsLnBhdGggfHwgJy8nO1xuICB9XG5cbiAgLy8gYGpvaW4oZm9vLCAnLy93d3cuZXhhbXBsZS5vcmcnKWBcbiAgaWYgKGFQYXRoVXJsICYmICFhUGF0aFVybC5zY2hlbWUpIHtcbiAgICBpZiAoYVJvb3RVcmwpIHtcbiAgICAgIGFQYXRoVXJsLnNjaGVtZSA9IGFSb290VXJsLnNjaGVtZTtcbiAgICB9XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKGFQYXRoVXJsKTtcbiAgfVxuXG4gIGlmIChhUGF0aFVybCB8fCBhUGF0aC5tYXRjaChkYXRhVXJsUmVnZXhwKSkge1xuICAgIHJldHVybiBhUGF0aDtcbiAgfVxuXG4gIC8vIGBqb2luKCdodHRwOi8vJywgJ3d3dy5leGFtcGxlLmNvbScpYFxuICBpZiAoYVJvb3RVcmwgJiYgIWFSb290VXJsLmhvc3QgJiYgIWFSb290VXJsLnBhdGgpIHtcbiAgICBhUm9vdFVybC5ob3N0ID0gYVBhdGg7XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKGFSb290VXJsKTtcbiAgfVxuXG4gIHZhciBqb2luZWQgPSBhUGF0aC5jaGFyQXQoMCkgPT09ICcvJ1xuICAgID8gYVBhdGhcbiAgICA6IG5vcm1hbGl6ZShhUm9vdC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIGFQYXRoKTtcblxuICBpZiAoYVJvb3RVcmwpIHtcbiAgICBhUm9vdFVybC5wYXRoID0gam9pbmVkO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gIH1cbiAgcmV0dXJuIGpvaW5lZDtcbn1cbmV4cG9ydHMuam9pbiA9IGpvaW47XG5cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uIChhUGF0aCkge1xuICByZXR1cm4gYVBhdGguY2hhckF0KDApID09PSAnLycgfHwgdXJsUmVnZXhwLnRlc3QoYVBhdGgpO1xufTtcblxuLyoqXG4gKiBNYWtlIGEgcGF0aCByZWxhdGl2ZSB0byBhIFVSTCBvciBhbm90aGVyIHBhdGguXG4gKlxuICogQHBhcmFtIGFSb290IFRoZSByb290IHBhdGggb3IgVVJMLlxuICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIFVSTCB0byBiZSBtYWRlIHJlbGF0aXZlIHRvIGFSb290LlxuICovXG5mdW5jdGlvbiByZWxhdGl2ZShhUm9vdCwgYVBhdGgpIHtcbiAgaWYgKGFSb290ID09PSBcIlwiKSB7XG4gICAgYVJvb3QgPSBcIi5cIjtcbiAgfVxuXG4gIGFSb290ID0gYVJvb3QucmVwbGFjZSgvXFwvJC8sICcnKTtcblxuICAvLyBJdCBpcyBwb3NzaWJsZSBmb3IgdGhlIHBhdGggdG8gYmUgYWJvdmUgdGhlIHJvb3QuIEluIHRoaXMgY2FzZSwgc2ltcGx5XG4gIC8vIGNoZWNraW5nIHdoZXRoZXIgdGhlIHJvb3QgaXMgYSBwcmVmaXggb2YgdGhlIHBhdGggd29uJ3Qgd29yay4gSW5zdGVhZCwgd2VcbiAgLy8gbmVlZCB0byByZW1vdmUgY29tcG9uZW50cyBmcm9tIHRoZSByb290IG9uZSBieSBvbmUsIHVudGlsIGVpdGhlciB3ZSBmaW5kXG4gIC8vIGEgcHJlZml4IHRoYXQgZml0cywgb3Igd2UgcnVuIG91dCBvZiBjb21wb25lbnRzIHRvIHJlbW92ZS5cbiAgdmFyIGxldmVsID0gMDtcbiAgd2hpbGUgKGFQYXRoLmluZGV4T2YoYVJvb3QgKyAnLycpICE9PSAwKSB7XG4gICAgdmFyIGluZGV4ID0gYVJvb3QubGFzdEluZGV4T2YoXCIvXCIpO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHJldHVybiBhUGF0aDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgb25seSBwYXJ0IG9mIHRoZSByb290IHRoYXQgaXMgbGVmdCBpcyB0aGUgc2NoZW1lIChpLmUuIGh0dHA6Ly8sXG4gICAgLy8gZmlsZTovLy8sIGV0Yy4pLCBvbmUgb3IgbW9yZSBzbGFzaGVzICgvKSwgb3Igc2ltcGx5IG5vdGhpbmcgYXQgYWxsLCB3ZVxuICAgIC8vIGhhdmUgZXhoYXVzdGVkIGFsbCBjb21wb25lbnRzLCBzbyB0aGUgcGF0aCBpcyBub3QgcmVsYXRpdmUgdG8gdGhlIHJvb3QuXG4gICAgYVJvb3QgPSBhUm9vdC5zbGljZSgwLCBpbmRleCk7XG4gICAgaWYgKGFSb290Lm1hdGNoKC9eKFteXFwvXSs6XFwvKT9cXC8qJC8pKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuXG4gICAgKytsZXZlbDtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSB3ZSBhZGQgYSBcIi4uL1wiIGZvciBlYWNoIGNvbXBvbmVudCB3ZSByZW1vdmVkIGZyb20gdGhlIHJvb3QuXG4gIHJldHVybiBBcnJheShsZXZlbCArIDEpLmpvaW4oXCIuLi9cIikgKyBhUGF0aC5zdWJzdHIoYVJvb3QubGVuZ3RoICsgMSk7XG59XG5leHBvcnRzLnJlbGF0aXZlID0gcmVsYXRpdmU7XG5cbnZhciBzdXBwb3J0c051bGxQcm90byA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gISgnX19wcm90b19fJyBpbiBvYmopO1xufSgpKTtcblxuZnVuY3Rpb24gaWRlbnRpdHkgKHMpIHtcbiAgcmV0dXJuIHM7XG59XG5cbi8qKlxuICogQmVjYXVzZSBiZWhhdmlvciBnb2VzIHdhY2t5IHdoZW4geW91IHNldCBgX19wcm90b19fYCBvbiBvYmplY3RzLCB3ZVxuICogaGF2ZSB0byBwcmVmaXggYWxsIHRoZSBzdHJpbmdzIGluIG91ciBzZXQgd2l0aCBhbiBhcmJpdHJhcnkgY2hhcmFjdGVyLlxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL3B1bGwvMzEgYW5kXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL2lzc3Vlcy8zMFxuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5mdW5jdGlvbiB0b1NldFN0cmluZyhhU3RyKSB7XG4gIGlmIChpc1Byb3RvU3RyaW5nKGFTdHIpKSB7XG4gICAgcmV0dXJuICckJyArIGFTdHI7XG4gIH1cblxuICByZXR1cm4gYVN0cjtcbn1cbmV4cG9ydHMudG9TZXRTdHJpbmcgPSBzdXBwb3J0c051bGxQcm90byA/IGlkZW50aXR5IDogdG9TZXRTdHJpbmc7XG5cbmZ1bmN0aW9uIGZyb21TZXRTdHJpbmcoYVN0cikge1xuICBpZiAoaXNQcm90b1N0cmluZyhhU3RyKSkge1xuICAgIHJldHVybiBhU3RyLnNsaWNlKDEpO1xuICB9XG5cbiAgcmV0dXJuIGFTdHI7XG59XG5leHBvcnRzLmZyb21TZXRTdHJpbmcgPSBzdXBwb3J0c051bGxQcm90byA/IGlkZW50aXR5IDogZnJvbVNldFN0cmluZztcblxuZnVuY3Rpb24gaXNQcm90b1N0cmluZyhzKSB7XG4gIGlmICghcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBzLmxlbmd0aDtcblxuICBpZiAobGVuZ3RoIDwgOSAvKiBcIl9fcHJvdG9fX1wiLmxlbmd0aCAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMSkgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSAyKSAhPT0gOTUgIC8qICdfJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDMpICE9PSAxMTEgLyogJ28nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNCkgIT09IDExNiAvKiAndCcgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA1KSAhPT0gMTExIC8qICdvJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDYpICE9PSAxMTQgLyogJ3InICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNykgIT09IDExMiAvKiAncCcgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA4KSAhPT0gOTUgIC8qICdfJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDkpICE9PSA5NSAgLyogJ18nICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IGxlbmd0aCAtIDEwOyBpID49IDA7IGktLSkge1xuICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgIT09IDM2IC8qICckJyAqLykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2hlcmUgdGhlIG9yaWdpbmFsIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gKlxuICogT3B0aW9uYWxseSBwYXNzIGluIGB0cnVlYCBhcyBgb25seUNvbXBhcmVHZW5lcmF0ZWRgIHRvIGNvbnNpZGVyIHR3b1xuICogbWFwcGluZ3Mgd2l0aCB0aGUgc2FtZSBvcmlnaW5hbCBzb3VyY2UvbGluZS9jb2x1bW4sIGJ1dCBkaWZmZXJlbnQgZ2VuZXJhdGVkXG4gKiBsaW5lIGFuZCBjb2x1bW4gdGhlIHNhbWUuIFVzZWZ1bCB3aGVuIHNlYXJjaGluZyBmb3IgYSBtYXBwaW5nIHdpdGggYVxuICogc3R1YmJlZCBvdXQgbWFwcGluZy5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMobWFwcGluZ0EsIG1hcHBpbmdCLCBvbmx5Q29tcGFyZU9yaWdpbmFsKSB7XG4gIHZhciBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwIHx8IG9ubHlDb21wYXJlT3JpZ2luYWwpIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zID0gY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnM7XG5cbi8qKlxuICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aXRoIGRlZmxhdGVkIHNvdXJjZSBhbmQgbmFtZSBpbmRpY2VzIHdoZXJlXG4gKiB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gKlxuICogT3B0aW9uYWxseSBwYXNzIGluIGB0cnVlYCBhcyBgb25seUNvbXBhcmVHZW5lcmF0ZWRgIHRvIGNvbnNpZGVyIHR3b1xuICogbWFwcGluZ3Mgd2l0aCB0aGUgc2FtZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uLCBidXQgZGlmZmVyZW50XG4gKiBzb3VyY2UvbmFtZS9vcmlnaW5hbCBsaW5lIGFuZCBjb2x1bW4gdGhlIHNhbWUuIFVzZWZ1bCB3aGVuIHNlYXJjaGluZyBmb3IgYVxuICogbWFwcGluZyB3aXRoIGEgc3R1YmJlZCBvdXQgbWFwcGluZy5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCLCBvbmx5Q29tcGFyZUdlbmVyYXRlZCkge1xuICB2YXIgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwIHx8IG9ubHlDb21wYXJlR2VuZXJhdGVkKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IHN0cmNtcChtYXBwaW5nQS5zb3VyY2UsIG1hcHBpbmdCLnNvdXJjZSk7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgcmV0dXJuIHN0cmNtcChtYXBwaW5nQS5uYW1lLCBtYXBwaW5nQi5uYW1lKTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQgPSBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZDtcblxuZnVuY3Rpb24gc3RyY21wKGFTdHIxLCBhU3RyMikge1xuICBpZiAoYVN0cjEgPT09IGFTdHIyKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoYVN0cjEgPT09IG51bGwpIHtcbiAgICByZXR1cm4gMTsgLy8gYVN0cjIgIT09IG51bGxcbiAgfVxuXG4gIGlmIChhU3RyMiA9PT0gbnVsbCkge1xuICAgIHJldHVybiAtMTsgLy8gYVN0cjEgIT09IG51bGxcbiAgfVxuXG4gIGlmIChhU3RyMSA+IGFTdHIyKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aXRoIGluZmxhdGVkIHNvdXJjZSBhbmQgbmFtZSBzdHJpbmdzIHdoZXJlXG4gKiB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKG1hcHBpbmdBLCBtYXBwaW5nQikge1xuICB2YXIgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IHN0cmNtcChtYXBwaW5nQS5zb3VyY2UsIG1hcHBpbmdCLnNvdXJjZSk7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgcmV0dXJuIHN0cmNtcChtYXBwaW5nQS5uYW1lLCBtYXBwaW5nQi5uYW1lKTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQgPSBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZDtcblxuLyoqXG4gKiBTdHJpcCBhbnkgSlNPTiBYU1NJIGF2b2lkYW5jZSBwcmVmaXggZnJvbSB0aGUgc3RyaW5nIChhcyBkb2N1bWVudGVkXG4gKiBpbiB0aGUgc291cmNlIG1hcHMgc3BlY2lmaWNhdGlvbiksIGFuZCB0aGVuIHBhcnNlIHRoZSBzdHJpbmcgYXNcbiAqIEpTT04uXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU291cmNlTWFwSW5wdXQoc3RyKSB7XG4gIHJldHVybiBKU09OLnBhcnNlKHN0ci5yZXBsYWNlKC9eXFwpXX0nW15cXG5dKlxcbi8sICcnKSk7XG59XG5leHBvcnRzLnBhcnNlU291cmNlTWFwSW5wdXQgPSBwYXJzZVNvdXJjZU1hcElucHV0O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIFVSTCBvZiBhIHNvdXJjZSBnaXZlbiB0aGUgdGhlIHNvdXJjZSByb290LCB0aGUgc291cmNlJ3NcbiAqIFVSTCwgYW5kIHRoZSBzb3VyY2UgbWFwJ3MgVVJMLlxuICovXG5mdW5jdGlvbiBjb21wdXRlU291cmNlVVJMKHNvdXJjZVJvb3QsIHNvdXJjZVVSTCwgc291cmNlTWFwVVJMKSB7XG4gIHNvdXJjZVVSTCA9IHNvdXJjZVVSTCB8fCAnJztcblxuICBpZiAoc291cmNlUm9vdCkge1xuICAgIC8vIFRoaXMgZm9sbG93cyB3aGF0IENocm9tZSBkb2VzLlxuICAgIGlmIChzb3VyY2VSb290W3NvdXJjZVJvb3QubGVuZ3RoIC0gMV0gIT09ICcvJyAmJiBzb3VyY2VVUkxbMF0gIT09ICcvJykge1xuICAgICAgc291cmNlUm9vdCArPSAnLyc7XG4gICAgfVxuICAgIC8vIFRoZSBzcGVjIHNheXM6XG4gICAgLy8gICBMaW5lIDQ6IEFuIG9wdGlvbmFsIHNvdXJjZSByb290LCB1c2VmdWwgZm9yIHJlbG9jYXRpbmcgc291cmNlXG4gICAgLy8gICBmaWxlcyBvbiBhIHNlcnZlciBvciByZW1vdmluZyByZXBlYXRlZCB2YWx1ZXMgaW4gdGhlXG4gICAgLy8gICDigJxzb3VyY2Vz4oCdIGVudHJ5LiAgVGhpcyB2YWx1ZSBpcyBwcmVwZW5kZWQgdG8gdGhlIGluZGl2aWR1YWxcbiAgICAvLyAgIGVudHJpZXMgaW4gdGhlIOKAnHNvdXJjZeKAnSBmaWVsZC5cbiAgICBzb3VyY2VVUkwgPSBzb3VyY2VSb290ICsgc291cmNlVVJMO1xuICB9XG5cbiAgLy8gSGlzdG9yaWNhbGx5LCBTb3VyY2VNYXBDb25zdW1lciBkaWQgbm90IHRha2UgdGhlIHNvdXJjZU1hcFVSTCBhc1xuICAvLyBhIHBhcmFtZXRlci4gIFRoaXMgbW9kZSBpcyBzdGlsbCBzb21ld2hhdCBzdXBwb3J0ZWQsIHdoaWNoIGlzIHdoeVxuICAvLyB0aGlzIGNvZGUgYmxvY2sgaXMgY29uZGl0aW9uYWwuICBIb3dldmVyLCBpdCdzIHByZWZlcmFibGUgdG8gcGFzc1xuICAvLyB0aGUgc291cmNlIG1hcCBVUkwgdG8gU291cmNlTWFwQ29uc3VtZXIsIHNvIHRoYXQgdGhpcyBmdW5jdGlvblxuICAvLyBjYW4gaW1wbGVtZW50IHRoZSBzb3VyY2UgVVJMIHJlc29sdXRpb24gYWxnb3JpdGhtIGFzIG91dGxpbmVkIGluXG4gIC8vIHRoZSBzcGVjLiAgVGhpcyBibG9jayBpcyBiYXNpY2FsbHkgdGhlIGVxdWl2YWxlbnQgb2Y6XG4gIC8vICAgIG5ldyBVUkwoc291cmNlVVJMLCBzb3VyY2VNYXBVUkwpLnRvU3RyaW5nKClcbiAgLy8gLi4uIGV4Y2VwdCBpdCBhdm9pZHMgdXNpbmcgVVJMLCB3aGljaCB3YXNuJ3QgYXZhaWxhYmxlIGluIHRoZVxuICAvLyBvbGRlciByZWxlYXNlcyBvZiBub2RlIHN0aWxsIHN1cHBvcnRlZCBieSB0aGlzIGxpYnJhcnkuXG4gIC8vXG4gIC8vIFRoZSBzcGVjIHNheXM6XG4gIC8vICAgSWYgdGhlIHNvdXJjZXMgYXJlIG5vdCBhYnNvbHV0ZSBVUkxzIGFmdGVyIHByZXBlbmRpbmcgb2YgdGhlXG4gIC8vICAg4oCcc291cmNlUm9vdOKAnSwgdGhlIHNvdXJjZXMgYXJlIHJlc29sdmVkIHJlbGF0aXZlIHRvIHRoZVxuICAvLyAgIFNvdXJjZU1hcCAobGlrZSByZXNvbHZpbmcgc2NyaXB0IHNyYyBpbiBhIGh0bWwgZG9jdW1lbnQpLlxuICBpZiAoc291cmNlTWFwVVJMKSB7XG4gICAgdmFyIHBhcnNlZCA9IHVybFBhcnNlKHNvdXJjZU1hcFVSTCk7XG4gICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInNvdXJjZU1hcFVSTCBjb3VsZCBub3QgYmUgcGFyc2VkXCIpO1xuICAgIH1cbiAgICBpZiAocGFyc2VkLnBhdGgpIHtcbiAgICAgIC8vIFN0cmlwIHRoZSBsYXN0IHBhdGggY29tcG9uZW50LCBidXQga2VlcCB0aGUgXCIvXCIuXG4gICAgICB2YXIgaW5kZXggPSBwYXJzZWQucGF0aC5sYXN0SW5kZXhPZignLycpO1xuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgcGFyc2VkLnBhdGggPSBwYXJzZWQucGF0aC5zdWJzdHJpbmcoMCwgaW5kZXggKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlVVJMID0gam9pbih1cmxHZW5lcmF0ZShwYXJzZWQpLCBzb3VyY2VVUkwpO1xuICB9XG5cbiAgcmV0dXJuIG5vcm1hbGl6ZShzb3VyY2VVUkwpO1xufVxuZXhwb3J0cy5jb21wdXRlU291cmNlVVJMID0gY29tcHV0ZVNvdXJjZVVSTDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImVsZWN0cm9uXCIpOyIsImltcG9ydCB7IEJyb3dzZXJXaW5kb3cgfSBmcm9tICdlbGVjdHJvbidcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdpbmRvdyB7XHJcbiAgcHJvdGVjdGVkIHdpbmRvdz86IEJyb3dzZXJXaW5kb3dcclxuXHJcbiAgcHJvdGVjdGVkIHZpZXc6IHN0cmluZ1xyXG5cclxuICBwcm90ZWN0ZWQgd2luZG93UGFyYW1zOiBPYmplY3QgPSB7XHJcbiAgICBtaW5XaWR0aDogNDQwLFxyXG4gICAgbWluSGVpZ2h0OiAxNTAsXHJcbiAgICBpY29uOiBgJHtfX2Rpcm5hbWV9L2xvZ28ucG5nYFxyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IgKHZpZXc6IHN0cmluZykge1xyXG4gICAgdGhpcy52aWV3ID0gdmlld1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNyZWF0ZVdpbmRvdyAoKTogQnJvd3NlcldpbmRvdyB7XHJcbiAgICBpZiAodGhpcy53aW5kb3cpIHJldHVybiB0aGlzLndpbmRvd1xyXG5cclxuICAgIHRoaXMud2luZG93ID0gbmV3IEJyb3dzZXJXaW5kb3codGhpcy53aW5kb3dQYXJhbXMpXHJcbiAgICB0aGlzLndpbmRvdy5sb2FkVVJMKGBmaWxlOi8vJHtfX2Rpcm5hbWV9LyR7dGhpcy52aWV3fS5odG1sYClcclxuICAgIHRoaXMud2luZG93Lm9uKCdjbG9zZWQnLCB0aGlzLmNsb3NlV2luZG93KVxyXG5cclxuICAgIC8vIHRoaXMuaW5pdFdpbmRvd0V2ZW50cygpXHJcbiAgICAvLyB0aGlzLmluaXRFdmVudHMoKVxyXG4gICAgcmV0dXJuIHRoaXMud2luZG93XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgY2xvc2VXaW5kb3cgKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMud2luZG93KSB0aGlzLndpbmRvdy5jbG9zZSgpXHJcbiAgICB0aGlzLndpbmRvdyA9IHVuZGVmaW5lZFxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFdpbmRvdyAoKTogQnJvd3NlcldpbmRvdyB7XHJcbiAgICBpZiAodGhpcy53aW5kb3cgaW5zdGFuY2VvZiBCcm93c2VyV2luZG93KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLndpbmRvd1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlV2luZG93KClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZW5kRXZlbnQgKGNoYW5uZWw6IHN0cmluZywgLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy53aW5kb3cpIHJldHVyblxyXG5cclxuICAgIHJldHVybiB0aGlzLndpbmRvdy53ZWJDb250ZW50cy5zZW5kKGNoYW5uZWwsIGFyZ3MpXHJcbiAgfVxyXG59XHJcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIGJhc2U2NFZMUSA9IHJlcXVpcmUoJy4vYmFzZTY0LXZscScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBBcnJheVNldCA9IHJlcXVpcmUoJy4vYXJyYXktc2V0JykuQXJyYXlTZXQ7XG52YXIgTWFwcGluZ0xpc3QgPSByZXF1aXJlKCcuL21hcHBpbmctbGlzdCcpLk1hcHBpbmdMaXN0O1xuXG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3IgcmVwcmVzZW50cyBhIHNvdXJjZSBtYXAgd2hpY2ggaXNcbiAqIGJlaW5nIGJ1aWx0IGluY3JlbWVudGFsbHkuIFlvdSBtYXkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nXG4gKiBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBmaWxlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gKiAgIC0gc291cmNlUm9vdDogQSByb290IGZvciBhbGwgcmVsYXRpdmUgVVJMcyBpbiB0aGlzIHNvdXJjZSBtYXAuXG4gKi9cbmZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcihhQXJncykge1xuICBpZiAoIWFBcmdzKSB7XG4gICAgYUFyZ3MgPSB7fTtcbiAgfVxuICB0aGlzLl9maWxlID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdmaWxlJywgbnVsbCk7XG4gIHRoaXMuX3NvdXJjZVJvb3QgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZVJvb3QnLCBudWxsKTtcbiAgdGhpcy5fc2tpcFZhbGlkYXRpb24gPSB1dGlsLmdldEFyZyhhQXJncywgJ3NraXBWYWxpZGF0aW9uJywgZmFsc2UpO1xuICB0aGlzLl9zb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gIHRoaXMuX25hbWVzID0gbmV3IEFycmF5U2V0KCk7XG4gIHRoaXMuX21hcHBpbmdzID0gbmV3IE1hcHBpbmdMaXN0KCk7XG4gIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IG51bGw7XG59XG5cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgU291cmNlTWFwR2VuZXJhdG9yIGJhc2VkIG9uIGEgU291cmNlTWFwQ29uc3VtZXJcbiAqXG4gKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBTb3VyY2VNYXAuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5mcm9tU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2Zyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcENvbnN1bWVyKSB7XG4gICAgdmFyIHNvdXJjZVJvb3QgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlUm9vdDtcbiAgICB2YXIgZ2VuZXJhdG9yID0gbmV3IFNvdXJjZU1hcEdlbmVyYXRvcih7XG4gICAgICBmaWxlOiBhU291cmNlTWFwQ29uc3VtZXIuZmlsZSxcbiAgICAgIHNvdXJjZVJvb3Q6IHNvdXJjZVJvb3RcbiAgICB9KTtcbiAgICBhU291cmNlTWFwQ29uc3VtZXIuZWFjaE1hcHBpbmcoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIHZhciBuZXdNYXBwaW5nID0ge1xuICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICBuZXdNYXBwaW5nLnNvdXJjZSA9IG1hcHBpbmcuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3TWFwcGluZy5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIG5ld01hcHBpbmcuc291cmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld01hcHBpbmcub3JpZ2luYWwgPSB7XG4gICAgICAgICAgbGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3TWFwcGluZy5uYW1lID0gbWFwcGluZy5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGdlbmVyYXRvci5hZGRNYXBwaW5nKG5ld01hcHBpbmcpO1xuICAgIH0pO1xuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgIHZhciBzb3VyY2VSZWxhdGl2ZSA9IHNvdXJjZUZpbGU7XG4gICAgICBpZiAoc291cmNlUm9vdCAhPT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VSZWxhdGl2ZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZ2VuZXJhdG9yLl9zb3VyY2VzLmhhcyhzb3VyY2VSZWxhdGl2ZSkpIHtcbiAgICAgICAgZ2VuZXJhdG9yLl9zb3VyY2VzLmFkZChzb3VyY2VSZWxhdGl2ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGdlbmVyYXRvci5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH07XG5cbi8qKlxuICogQWRkIGEgc2luZ2xlIG1hcHBpbmcgZnJvbSBvcmlnaW5hbCBzb3VyY2UgbGluZSBhbmQgY29sdW1uIHRvIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBmb3IgdGhpcyBzb3VyY2UgbWFwIGJlaW5nIGNyZWF0ZWQuIFRoZSBtYXBwaW5nXG4gKiBvYmplY3Qgc2hvdWxkIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBnZW5lcmF0ZWQ6IEFuIG9iamVjdCB3aXRoIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucy5cbiAqICAgLSBvcmlnaW5hbDogQW4gb2JqZWN0IHdpdGggdGhlIG9yaWdpbmFsIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMuXG4gKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUgKHJlbGF0aXZlIHRvIHRoZSBzb3VyY2VSb290KS5cbiAqICAgLSBuYW1lOiBBbiBvcHRpb25hbCBvcmlnaW5hbCB0b2tlbiBuYW1lIGZvciB0aGlzIG1hcHBpbmcuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYWRkTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9hZGRNYXBwaW5nKGFBcmdzKSB7XG4gICAgdmFyIGdlbmVyYXRlZCA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnZ2VuZXJhdGVkJyk7XG4gICAgdmFyIG9yaWdpbmFsID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdvcmlnaW5hbCcsIG51bGwpO1xuICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScsIG51bGwpO1xuICAgIHZhciBuYW1lID0gdXRpbC5nZXRBcmcoYUFyZ3MsICduYW1lJywgbnVsbCk7XG5cbiAgICBpZiAoIXRoaXMuX3NraXBWYWxpZGF0aW9uKSB7XG4gICAgICB0aGlzLl92YWxpZGF0ZU1hcHBpbmcoZ2VuZXJhdGVkLCBvcmlnaW5hbCwgc291cmNlLCBuYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZSA9IFN0cmluZyhzb3VyY2UpO1xuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKTtcbiAgICAgIGlmICghdGhpcy5fbmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIHRoaXMuX25hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9tYXBwaW5ncy5hZGQoe1xuICAgICAgZ2VuZXJhdGVkTGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IGdlbmVyYXRlZC5jb2x1bW4sXG4gICAgICBvcmlnaW5hbExpbmU6IG9yaWdpbmFsICE9IG51bGwgJiYgb3JpZ2luYWwubGluZSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiBvcmlnaW5hbCAhPSBudWxsICYmIG9yaWdpbmFsLmNvbHVtbixcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgbmFtZTogbmFtZVxuICAgIH0pO1xuICB9O1xuXG4vKipcbiAqIFNldCB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGEgc291cmNlIGZpbGUuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuc2V0U291cmNlQ29udGVudCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9zZXRTb3VyY2VDb250ZW50KGFTb3VyY2VGaWxlLCBhU291cmNlQ29udGVudCkge1xuICAgIHZhciBzb3VyY2UgPSBhU291cmNlRmlsZTtcbiAgICBpZiAodGhpcy5fc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuX3NvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgfVxuXG4gICAgaWYgKGFTb3VyY2VDb250ZW50ICE9IG51bGwpIHtcbiAgICAgIC8vIEFkZCB0aGUgc291cmNlIGNvbnRlbnQgdG8gdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwLlxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IF9zb3VyY2VzQ29udGVudHMgbWFwIGlmIHRoZSBwcm9wZXJ0eSBpcyBudWxsLlxuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSldID0gYVNvdXJjZUNvbnRlbnQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgc291cmNlIGZpbGUgZnJvbSB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAuXG4gICAgICAvLyBJZiB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAgaXMgZW1wdHksIHNldCB0aGUgcHJvcGVydHkgdG8gbnVsbC5cbiAgICAgIGRlbGV0ZSB0aGlzLl9zb3VyY2VzQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhzb3VyY2UpXTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9zb3VyY2VzQ29udGVudHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBBcHBsaWVzIHRoZSBtYXBwaW5ncyBvZiBhIHN1Yi1zb3VyY2UtbWFwIGZvciBhIHNwZWNpZmljIHNvdXJjZSBmaWxlIHRvIHRoZVxuICogc291cmNlIG1hcCBiZWluZyBnZW5lcmF0ZWQuIEVhY2ggbWFwcGluZyB0byB0aGUgc3VwcGxpZWQgc291cmNlIGZpbGUgaXNcbiAqIHJld3JpdHRlbiB1c2luZyB0aGUgc3VwcGxpZWQgc291cmNlIG1hcC4gTm90ZTogVGhlIHJlc29sdXRpb24gZm9yIHRoZVxuICogcmVzdWx0aW5nIG1hcHBpbmdzIGlzIHRoZSBtaW5pbWl1bSBvZiB0aGlzIG1hcCBhbmQgdGhlIHN1cHBsaWVkIG1hcC5cbiAqXG4gKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBzb3VyY2UgbWFwIHRvIGJlIGFwcGxpZWQuXG4gKiBAcGFyYW0gYVNvdXJjZUZpbGUgT3B0aW9uYWwuIFRoZSBmaWxlbmFtZSBvZiB0aGUgc291cmNlIGZpbGUuXG4gKiAgICAgICAgSWYgb21pdHRlZCwgU291cmNlTWFwQ29uc3VtZXIncyBmaWxlIHByb3BlcnR5IHdpbGwgYmUgdXNlZC5cbiAqIEBwYXJhbSBhU291cmNlTWFwUGF0aCBPcHRpb25hbC4gVGhlIGRpcm5hbWUgb2YgdGhlIHBhdGggdG8gdGhlIHNvdXJjZSBtYXBcbiAqICAgICAgICB0byBiZSBhcHBsaWVkLiBJZiByZWxhdGl2ZSwgaXQgaXMgcmVsYXRpdmUgdG8gdGhlIFNvdXJjZU1hcENvbnN1bWVyLlxuICogICAgICAgIFRoaXMgcGFyYW1ldGVyIGlzIG5lZWRlZCB3aGVuIHRoZSB0d28gc291cmNlIG1hcHMgYXJlbid0IGluIHRoZSBzYW1lXG4gKiAgICAgICAgZGlyZWN0b3J5LCBhbmQgdGhlIHNvdXJjZSBtYXAgdG8gYmUgYXBwbGllZCBjb250YWlucyByZWxhdGl2ZSBzb3VyY2VcbiAqICAgICAgICBwYXRocy4gSWYgc28sIHRob3NlIHJlbGF0aXZlIHNvdXJjZSBwYXRocyBuZWVkIHRvIGJlIHJld3JpdHRlblxuICogICAgICAgIHJlbGF0aXZlIHRvIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3IuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYXBwbHlTb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfYXBwbHlTb3VyY2VNYXAoYVNvdXJjZU1hcENvbnN1bWVyLCBhU291cmNlRmlsZSwgYVNvdXJjZU1hcFBhdGgpIHtcbiAgICB2YXIgc291cmNlRmlsZSA9IGFTb3VyY2VGaWxlO1xuICAgIC8vIElmIGFTb3VyY2VGaWxlIGlzIG9taXR0ZWQsIHdlIHdpbGwgdXNlIHRoZSBmaWxlIHByb3BlcnR5IG9mIHRoZSBTb3VyY2VNYXBcbiAgICBpZiAoYVNvdXJjZUZpbGUgPT0gbnVsbCkge1xuICAgICAgaWYgKGFTb3VyY2VNYXBDb25zdW1lci5maWxlID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFwcGx5U291cmNlTWFwIHJlcXVpcmVzIGVpdGhlciBhbiBleHBsaWNpdCBzb3VyY2UgZmlsZSwgJyArXG4gICAgICAgICAgJ29yIHRoZSBzb3VyY2UgbWFwXFwncyBcImZpbGVcIiBwcm9wZXJ0eS4gQm90aCB3ZXJlIG9taXR0ZWQuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc291cmNlRmlsZSA9IGFTb3VyY2VNYXBDb25zdW1lci5maWxlO1xuICAgIH1cbiAgICB2YXIgc291cmNlUm9vdCA9IHRoaXMuX3NvdXJjZVJvb3Q7XG4gICAgLy8gTWFrZSBcInNvdXJjZUZpbGVcIiByZWxhdGl2ZSBpZiBhbiBhYnNvbHV0ZSBVcmwgaXMgcGFzc2VkLlxuICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgIH1cbiAgICAvLyBBcHBseWluZyB0aGUgU291cmNlTWFwIGNhbiBhZGQgYW5kIHJlbW92ZSBpdGVtcyBmcm9tIHRoZSBzb3VyY2VzIGFuZFxuICAgIC8vIHRoZSBuYW1lcyBhcnJheS5cbiAgICB2YXIgbmV3U291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICAgIHZhciBuZXdOYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuXG4gICAgLy8gRmluZCBtYXBwaW5ncyBmb3IgdGhlIFwic291cmNlRmlsZVwiXG4gICAgdGhpcy5fbWFwcGluZ3MudW5zb3J0ZWRGb3JFYWNoKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgPT09IHNvdXJjZUZpbGUgJiYgbWFwcGluZy5vcmlnaW5hbExpbmUgIT0gbnVsbCkge1xuICAgICAgICAvLyBDaGVjayBpZiBpdCBjYW4gYmUgbWFwcGVkIGJ5IHRoZSBzb3VyY2UgbWFwLCB0aGVuIHVwZGF0ZSB0aGUgbWFwcGluZy5cbiAgICAgICAgdmFyIG9yaWdpbmFsID0gYVNvdXJjZU1hcENvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe1xuICAgICAgICAgIGxpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgIGNvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9yaWdpbmFsLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gQ29weSBtYXBwaW5nXG4gICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSBvcmlnaW5hbC5zb3VyY2U7XG4gICAgICAgICAgaWYgKGFTb3VyY2VNYXBQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gdXRpbC5qb2luKGFTb3VyY2VNYXBQYXRoLCBtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5saW5lO1xuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBvcmlnaW5hbC5jb2x1bW47XG4gICAgICAgICAgaWYgKG9yaWdpbmFsLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwcGluZy5uYW1lID0gb3JpZ2luYWwubmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHNvdXJjZSA9IG1hcHBpbmcuc291cmNlO1xuICAgICAgaWYgKHNvdXJjZSAhPSBudWxsICYmICFuZXdTb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIG5ld1NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuYW1lID0gbWFwcGluZy5uYW1lO1xuICAgICAgaWYgKG5hbWUgIT0gbnVsbCAmJiAhbmV3TmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIG5ld05hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cblxuICAgIH0sIHRoaXMpO1xuICAgIHRoaXMuX3NvdXJjZXMgPSBuZXdTb3VyY2VzO1xuICAgIHRoaXMuX25hbWVzID0gbmV3TmFtZXM7XG5cbiAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50cyBvZiBhcHBsaWVkIG1hcC5cbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYVNvdXJjZU1hcFBhdGggIT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLmpvaW4oYVNvdXJjZU1hcFBhdGgsIHNvdXJjZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gIH07XG5cbi8qKlxuICogQSBtYXBwaW5nIGNhbiBoYXZlIG9uZSBvZiB0aGUgdGhyZWUgbGV2ZWxzIG9mIGRhdGE6XG4gKlxuICogICAxLiBKdXN0IHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24uXG4gKiAgIDIuIFRoZSBHZW5lcmF0ZWQgcG9zaXRpb24sIG9yaWdpbmFsIHBvc2l0aW9uLCBhbmQgb3JpZ2luYWwgc291cmNlLlxuICogICAzLiBHZW5lcmF0ZWQgYW5kIG9yaWdpbmFsIHBvc2l0aW9uLCBvcmlnaW5hbCBzb3VyY2UsIGFzIHdlbGwgYXMgYSBuYW1lXG4gKiAgICAgIHRva2VuLlxuICpcbiAqIFRvIG1haW50YWluIGNvbnNpc3RlbmN5LCB3ZSB2YWxpZGF0ZSB0aGF0IGFueSBuZXcgbWFwcGluZyBiZWluZyBhZGRlZCBmYWxsc1xuICogaW4gdG8gb25lIG9mIHRoZXNlIGNhdGVnb3JpZXMuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3ZhbGlkYXRlTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl92YWxpZGF0ZU1hcHBpbmcoYUdlbmVyYXRlZCwgYU9yaWdpbmFsLCBhU291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFOYW1lKSB7XG4gICAgLy8gV2hlbiBhT3JpZ2luYWwgaXMgdHJ1dGh5IGJ1dCBoYXMgZW1wdHkgdmFsdWVzIGZvciAubGluZSBhbmQgLmNvbHVtbixcbiAgICAvLyBpdCBpcyBtb3N0IGxpa2VseSBhIHByb2dyYW1tZXIgZXJyb3IuIEluIHRoaXMgY2FzZSB3ZSB0aHJvdyBhIHZlcnlcbiAgICAvLyBzcGVjaWZpYyBlcnJvciBtZXNzYWdlIHRvIHRyeSB0byBndWlkZSB0aGVtIHRoZSByaWdodCB3YXkuXG4gICAgLy8gRm9yIGV4YW1wbGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyL3BvbHltZXItYnVuZGxlci9wdWxsLzUxOVxuICAgIGlmIChhT3JpZ2luYWwgJiYgdHlwZW9mIGFPcmlnaW5hbC5saW5lICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgYU9yaWdpbmFsLmNvbHVtbiAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ29yaWdpbmFsLmxpbmUgYW5kIG9yaWdpbmFsLmNvbHVtbiBhcmUgbm90IG51bWJlcnMgLS0geW91IHByb2JhYmx5IG1lYW50IHRvIG9taXQgJyArXG4gICAgICAgICAgICAndGhlIG9yaWdpbmFsIG1hcHBpbmcgZW50aXJlbHkgYW5kIG9ubHkgbWFwIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24uIElmIHNvLCBwYXNzICcgK1xuICAgICAgICAgICAgJ251bGwgZm9yIHRoZSBvcmlnaW5hbCBtYXBwaW5nIGluc3RlYWQgb2YgYW4gb2JqZWN0IHdpdGggZW1wdHkgb3IgbnVsbCB2YWx1ZXMuJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmIChhR2VuZXJhdGVkICYmICdsaW5lJyBpbiBhR2VuZXJhdGVkICYmICdjb2x1bW4nIGluIGFHZW5lcmF0ZWRcbiAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICYmICFhT3JpZ2luYWwgJiYgIWFTb3VyY2UgJiYgIWFOYW1lKSB7XG4gICAgICAvLyBDYXNlIDEuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2UgaWYgKGFHZW5lcmF0ZWQgJiYgJ2xpbmUnIGluIGFHZW5lcmF0ZWQgJiYgJ2NvbHVtbicgaW4gYUdlbmVyYXRlZFxuICAgICAgICAgICAgICYmIGFPcmlnaW5hbCAmJiAnbGluZScgaW4gYU9yaWdpbmFsICYmICdjb2x1bW4nIGluIGFPcmlnaW5hbFxuICAgICAgICAgICAgICYmIGFHZW5lcmF0ZWQubGluZSA+IDAgJiYgYUdlbmVyYXRlZC5jb2x1bW4gPj0gMFxuICAgICAgICAgICAgICYmIGFPcmlnaW5hbC5saW5lID4gMCAmJiBhT3JpZ2luYWwuY29sdW1uID49IDBcbiAgICAgICAgICAgICAmJiBhU291cmNlKSB7XG4gICAgICAvLyBDYXNlcyAyIGFuZCAzLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtYXBwaW5nOiAnICsgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBnZW5lcmF0ZWQ6IGFHZW5lcmF0ZWQsXG4gICAgICAgIHNvdXJjZTogYVNvdXJjZSxcbiAgICAgICAgb3JpZ2luYWw6IGFPcmlnaW5hbCxcbiAgICAgICAgbmFtZTogYU5hbWVcbiAgICAgIH0pKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogU2VyaWFsaXplIHRoZSBhY2N1bXVsYXRlZCBtYXBwaW5ncyBpbiB0byB0aGUgc3RyZWFtIG9mIGJhc2UgNjQgVkxRc1xuICogc3BlY2lmaWVkIGJ5IHRoZSBzb3VyY2UgbWFwIGZvcm1hdC5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fc2VyaWFsaXplTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3Jfc2VyaWFsaXplTWFwcGluZ3MoKSB7XG4gICAgdmFyIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRMaW5lID0gMTtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gMDtcbiAgICB2YXIgcHJldmlvdXNOYW1lID0gMDtcbiAgICB2YXIgcHJldmlvdXNTb3VyY2UgPSAwO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgbmV4dDtcbiAgICB2YXIgbWFwcGluZztcbiAgICB2YXIgbmFtZUlkeDtcbiAgICB2YXIgc291cmNlSWR4O1xuXG4gICAgdmFyIG1hcHBpbmdzID0gdGhpcy5fbWFwcGluZ3MudG9BcnJheSgpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBtYXBwaW5ncy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbWFwcGluZyA9IG1hcHBpbmdzW2ldO1xuICAgICAgbmV4dCA9ICcnXG5cbiAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgIT09IHByZXZpb3VzR2VuZXJhdGVkTGluZSkge1xuICAgICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICAgIHdoaWxlIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgIT09IHByZXZpb3VzR2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIG5leHQgKz0gJzsnO1xuICAgICAgICAgIHByZXZpb3VzR2VuZXJhdGVkTGluZSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgaWYgKCF1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKG1hcHBpbmcsIG1hcHBpbmdzW2kgLSAxXSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0ICs9ICcsJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgaWYgKG1hcHBpbmcuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlSWR4ID0gdGhpcy5fc291cmNlcy5pbmRleE9mKG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKHNvdXJjZUlkeCAtIHByZXZpb3VzU291cmNlKTtcbiAgICAgICAgcHJldmlvdXNTb3VyY2UgPSBzb3VyY2VJZHg7XG5cbiAgICAgICAgLy8gbGluZXMgYXJlIHN0b3JlZCAwLWJhc2VkIGluIFNvdXJjZU1hcCBzcGVjIHZlcnNpb24gM1xuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5vcmlnaW5hbExpbmUgLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNPcmlnaW5hbExpbmUpO1xuICAgICAgICBwcmV2aW91c09yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lIC0gMTtcblxuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4pO1xuICAgICAgICBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICBpZiAobWFwcGluZy5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICBuYW1lSWR4ID0gdGhpcy5fbmFtZXMuaW5kZXhPZihtYXBwaW5nLm5hbWUpO1xuICAgICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShuYW1lSWR4IC0gcHJldmlvdXNOYW1lKTtcbiAgICAgICAgICBwcmV2aW91c05hbWUgPSBuYW1lSWR4O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCArPSBuZXh0O1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfZ2VuZXJhdGVTb3VyY2VzQ29udGVudChhU291cmNlcywgYVNvdXJjZVJvb3QpIHtcbiAgICByZXR1cm4gYVNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIGlmICghdGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGFTb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlID0gdXRpbC5yZWxhdGl2ZShhU291cmNlUm9vdCwgc291cmNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBrZXkgPSB1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSk7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuX3NvdXJjZXNDb250ZW50cywga2V5KVxuICAgICAgICA/IHRoaXMuX3NvdXJjZXNDb250ZW50c1trZXldXG4gICAgICAgIDogbnVsbDtcbiAgICB9LCB0aGlzKTtcbiAgfTtcblxuLyoqXG4gKiBFeHRlcm5hbGl6ZSB0aGUgc291cmNlIG1hcC5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS50b0pTT04gPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdG9KU09OKCkge1xuICAgIHZhciBtYXAgPSB7XG4gICAgICB2ZXJzaW9uOiB0aGlzLl92ZXJzaW9uLFxuICAgICAgc291cmNlczogdGhpcy5fc291cmNlcy50b0FycmF5KCksXG4gICAgICBuYW1lczogdGhpcy5fbmFtZXMudG9BcnJheSgpLFxuICAgICAgbWFwcGluZ3M6IHRoaXMuX3NlcmlhbGl6ZU1hcHBpbmdzKClcbiAgICB9O1xuICAgIGlmICh0aGlzLl9maWxlICE9IG51bGwpIHtcbiAgICAgIG1hcC5maWxlID0gdGhpcy5fZmlsZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgbWFwLnNvdXJjZVJvb3QgPSB0aGlzLl9zb3VyY2VSb290O1xuICAgIH1cbiAgICBpZiAodGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICBtYXAuc291cmNlc0NvbnRlbnQgPSB0aGlzLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KG1hcC5zb3VyY2VzLCBtYXAuc291cmNlUm9vdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcDtcbiAgfTtcblxuLyoqXG4gKiBSZW5kZXIgdGhlIHNvdXJjZSBtYXAgYmVpbmcgZ2VuZXJhdGVkIHRvIGEgc3RyaW5nLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnRvU3RyaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3RvU3RyaW5nKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpKTtcbiAgfTtcblxuZXhwb3J0cy5Tb3VyY2VNYXBHZW5lcmF0b3IgPSBTb3VyY2VNYXBHZW5lcmF0b3I7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICpcbiAqIEJhc2VkIG9uIHRoZSBCYXNlIDY0IFZMUSBpbXBsZW1lbnRhdGlvbiBpbiBDbG9zdXJlIENvbXBpbGVyOlxuICogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jbG9zdXJlLWNvbXBpbGVyL3NvdXJjZS9icm93c2UvdHJ1bmsvc3JjL2NvbS9nb29nbGUvZGVidWdnaW5nL3NvdXJjZW1hcC9CYXNlNjRWTFEuamF2YVxuICpcbiAqIENvcHlyaWdodCAyMDExIFRoZSBDbG9zdXJlIENvbXBpbGVyIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZVxuICogICAgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiAqICAgIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZFxuICogICAgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogICogTmVpdGhlciB0aGUgbmFtZSBvZiBHb29nbGUgSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkXG4gKiAgICBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuICogXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4gKiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSxcbiAqIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWVxuICogVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFXG4gKiBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCcuL2Jhc2U2NCcpO1xuXG4vLyBBIHNpbmdsZSBiYXNlIDY0IGRpZ2l0IGNhbiBjb250YWluIDYgYml0cyBvZiBkYXRhLiBGb3IgdGhlIGJhc2UgNjQgdmFyaWFibGVcbi8vIGxlbmd0aCBxdWFudGl0aWVzIHdlIHVzZSBpbiB0aGUgc291cmNlIG1hcCBzcGVjLCB0aGUgZmlyc3QgYml0IGlzIHRoZSBzaWduLFxuLy8gdGhlIG5leHQgZm91ciBiaXRzIGFyZSB0aGUgYWN0dWFsIHZhbHVlLCBhbmQgdGhlIDZ0aCBiaXQgaXMgdGhlXG4vLyBjb250aW51YXRpb24gYml0LiBUaGUgY29udGludWF0aW9uIGJpdCB0ZWxscyB1cyB3aGV0aGVyIHRoZXJlIGFyZSBtb3JlXG4vLyBkaWdpdHMgaW4gdGhpcyB2YWx1ZSBmb2xsb3dpbmcgdGhpcyBkaWdpdC5cbi8vXG4vLyAgIENvbnRpbnVhdGlvblxuLy8gICB8ICAgIFNpZ25cbi8vICAgfCAgICB8XG4vLyAgIFYgICAgVlxuLy8gICAxMDEwMTFcblxudmFyIFZMUV9CQVNFX1NISUZUID0gNTtcblxuLy8gYmluYXJ5OiAxMDAwMDBcbnZhciBWTFFfQkFTRSA9IDEgPDwgVkxRX0JBU0VfU0hJRlQ7XG5cbi8vIGJpbmFyeTogMDExMTExXG52YXIgVkxRX0JBU0VfTUFTSyA9IFZMUV9CQVNFIC0gMTtcblxuLy8gYmluYXJ5OiAxMDAwMDBcbnZhciBWTFFfQ09OVElOVUFUSU9OX0JJVCA9IFZMUV9CQVNFO1xuXG4vKipcbiAqIENvbnZlcnRzIGZyb20gYSB0d28tY29tcGxlbWVudCB2YWx1ZSB0byBhIHZhbHVlIHdoZXJlIHRoZSBzaWduIGJpdCBpc1xuICogcGxhY2VkIGluIHRoZSBsZWFzdCBzaWduaWZpY2FudCBiaXQuICBGb3IgZXhhbXBsZSwgYXMgZGVjaW1hbHM6XG4gKiAgIDEgYmVjb21lcyAyICgxMCBiaW5hcnkpLCAtMSBiZWNvbWVzIDMgKDExIGJpbmFyeSlcbiAqICAgMiBiZWNvbWVzIDQgKDEwMCBiaW5hcnkpLCAtMiBiZWNvbWVzIDUgKDEwMSBiaW5hcnkpXG4gKi9cbmZ1bmN0aW9uIHRvVkxRU2lnbmVkKGFWYWx1ZSkge1xuICByZXR1cm4gYVZhbHVlIDwgMFxuICAgID8gKCgtYVZhbHVlKSA8PCAxKSArIDFcbiAgICA6IChhVmFsdWUgPDwgMSkgKyAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRvIGEgdHdvLWNvbXBsZW1lbnQgdmFsdWUgZnJvbSBhIHZhbHVlIHdoZXJlIHRoZSBzaWduIGJpdCBpc1xuICogcGxhY2VkIGluIHRoZSBsZWFzdCBzaWduaWZpY2FudCBiaXQuICBGb3IgZXhhbXBsZSwgYXMgZGVjaW1hbHM6XG4gKiAgIDIgKDEwIGJpbmFyeSkgYmVjb21lcyAxLCAzICgxMSBiaW5hcnkpIGJlY29tZXMgLTFcbiAqICAgNCAoMTAwIGJpbmFyeSkgYmVjb21lcyAyLCA1ICgxMDEgYmluYXJ5KSBiZWNvbWVzIC0yXG4gKi9cbmZ1bmN0aW9uIGZyb21WTFFTaWduZWQoYVZhbHVlKSB7XG4gIHZhciBpc05lZ2F0aXZlID0gKGFWYWx1ZSAmIDEpID09PSAxO1xuICB2YXIgc2hpZnRlZCA9IGFWYWx1ZSA+PiAxO1xuICByZXR1cm4gaXNOZWdhdGl2ZVxuICAgID8gLXNoaWZ0ZWRcbiAgICA6IHNoaWZ0ZWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYmFzZSA2NCBWTFEgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiBiYXNlNjRWTFFfZW5jb2RlKGFWYWx1ZSkge1xuICB2YXIgZW5jb2RlZCA9IFwiXCI7XG4gIHZhciBkaWdpdDtcblxuICB2YXIgdmxxID0gdG9WTFFTaWduZWQoYVZhbHVlKTtcblxuICBkbyB7XG4gICAgZGlnaXQgPSB2bHEgJiBWTFFfQkFTRV9NQVNLO1xuICAgIHZscSA+Pj49IFZMUV9CQVNFX1NISUZUO1xuICAgIGlmICh2bHEgPiAwKSB7XG4gICAgICAvLyBUaGVyZSBhcmUgc3RpbGwgbW9yZSBkaWdpdHMgaW4gdGhpcyB2YWx1ZSwgc28gd2UgbXVzdCBtYWtlIHN1cmUgdGhlXG4gICAgICAvLyBjb250aW51YXRpb24gYml0IGlzIG1hcmtlZC5cbiAgICAgIGRpZ2l0IHw9IFZMUV9DT05USU5VQVRJT05fQklUO1xuICAgIH1cbiAgICBlbmNvZGVkICs9IGJhc2U2NC5lbmNvZGUoZGlnaXQpO1xuICB9IHdoaWxlICh2bHEgPiAwKTtcblxuICByZXR1cm4gZW5jb2RlZDtcbn07XG5cbi8qKlxuICogRGVjb2RlcyB0aGUgbmV4dCBiYXNlIDY0IFZMUSB2YWx1ZSBmcm9tIHRoZSBnaXZlbiBzdHJpbmcgYW5kIHJldHVybnMgdGhlXG4gKiB2YWx1ZSBhbmQgdGhlIHJlc3Qgb2YgdGhlIHN0cmluZyB2aWEgdGhlIG91dCBwYXJhbWV0ZXIuXG4gKi9cbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24gYmFzZTY0VkxRX2RlY29kZShhU3RyLCBhSW5kZXgsIGFPdXRQYXJhbSkge1xuICB2YXIgc3RyTGVuID0gYVN0ci5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSAwO1xuICB2YXIgc2hpZnQgPSAwO1xuICB2YXIgY29udGludWF0aW9uLCBkaWdpdDtcblxuICBkbyB7XG4gICAgaWYgKGFJbmRleCA+PSBzdHJMZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIG1vcmUgZGlnaXRzIGluIGJhc2UgNjQgVkxRIHZhbHVlLlwiKTtcbiAgICB9XG5cbiAgICBkaWdpdCA9IGJhc2U2NC5kZWNvZGUoYVN0ci5jaGFyQ29kZUF0KGFJbmRleCsrKSk7XG4gICAgaWYgKGRpZ2l0ID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgZGlnaXQ6IFwiICsgYVN0ci5jaGFyQXQoYUluZGV4IC0gMSkpO1xuICAgIH1cblxuICAgIGNvbnRpbnVhdGlvbiA9ICEhKGRpZ2l0ICYgVkxRX0NPTlRJTlVBVElPTl9CSVQpO1xuICAgIGRpZ2l0ICY9IFZMUV9CQVNFX01BU0s7XG4gICAgcmVzdWx0ID0gcmVzdWx0ICsgKGRpZ2l0IDw8IHNoaWZ0KTtcbiAgICBzaGlmdCArPSBWTFFfQkFTRV9TSElGVDtcbiAgfSB3aGlsZSAoY29udGludWF0aW9uKTtcblxuICBhT3V0UGFyYW0udmFsdWUgPSBmcm9tVkxRU2lnbmVkKHJlc3VsdCk7XG4gIGFPdXRQYXJhbS5yZXN0ID0gYUluZGV4O1xufTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGhhc05hdGl2ZU1hcCA9IHR5cGVvZiBNYXAgIT09IFwidW5kZWZpbmVkXCI7XG5cbi8qKlxuICogQSBkYXRhIHN0cnVjdHVyZSB3aGljaCBpcyBhIGNvbWJpbmF0aW9uIG9mIGFuIGFycmF5IGFuZCBhIHNldC4gQWRkaW5nIGEgbmV3XG4gKiBtZW1iZXIgaXMgTygxKSwgdGVzdGluZyBmb3IgbWVtYmVyc2hpcCBpcyBPKDEpLCBhbmQgZmluZGluZyB0aGUgaW5kZXggb2YgYW5cbiAqIGVsZW1lbnQgaXMgTygxKS4gUmVtb3ZpbmcgZWxlbWVudHMgZnJvbSB0aGUgc2V0IGlzIG5vdCBzdXBwb3J0ZWQuIE9ubHlcbiAqIHN0cmluZ3MgYXJlIHN1cHBvcnRlZCBmb3IgbWVtYmVyc2hpcC5cbiAqL1xuZnVuY3Rpb24gQXJyYXlTZXQoKSB7XG4gIHRoaXMuX2FycmF5ID0gW107XG4gIHRoaXMuX3NldCA9IGhhc05hdGl2ZU1hcCA/IG5ldyBNYXAoKSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbi8qKlxuICogU3RhdGljIG1ldGhvZCBmb3IgY3JlYXRpbmcgQXJyYXlTZXQgaW5zdGFuY2VzIGZyb20gYW4gZXhpc3RpbmcgYXJyYXkuXG4gKi9cbkFycmF5U2V0LmZyb21BcnJheSA9IGZ1bmN0aW9uIEFycmF5U2V0X2Zyb21BcnJheShhQXJyYXksIGFBbGxvd0R1cGxpY2F0ZXMpIHtcbiAgdmFyIHNldCA9IG5ldyBBcnJheVNldCgpO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYUFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgc2V0LmFkZChhQXJyYXlbaV0sIGFBbGxvd0R1cGxpY2F0ZXMpO1xuICB9XG4gIHJldHVybiBzZXQ7XG59O1xuXG4vKipcbiAqIFJldHVybiBob3cgbWFueSB1bmlxdWUgaXRlbXMgYXJlIGluIHRoaXMgQXJyYXlTZXQuIElmIGR1cGxpY2F0ZXMgaGF2ZSBiZWVuXG4gKiBhZGRlZCwgdGhhbiB0aG9zZSBkbyBub3QgY291bnQgdG93YXJkcyB0aGUgc2l6ZS5cbiAqXG4gKiBAcmV0dXJucyBOdW1iZXJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbiBBcnJheVNldF9zaXplKCkge1xuICByZXR1cm4gaGFzTmF0aXZlTWFwID8gdGhpcy5fc2V0LnNpemUgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLl9zZXQpLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQWRkIHRoZSBnaXZlbiBzdHJpbmcgdG8gdGhpcyBzZXQuXG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBBcnJheVNldF9hZGQoYVN0ciwgYUFsbG93RHVwbGljYXRlcykge1xuICB2YXIgc1N0ciA9IGhhc05hdGl2ZU1hcCA/IGFTdHIgOiB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpO1xuICB2YXIgaXNEdXBsaWNhdGUgPSBoYXNOYXRpdmVNYXAgPyB0aGlzLmhhcyhhU3RyKSA6IGhhcy5jYWxsKHRoaXMuX3NldCwgc1N0cik7XG4gIHZhciBpZHggPSB0aGlzLl9hcnJheS5sZW5ndGg7XG4gIGlmICghaXNEdXBsaWNhdGUgfHwgYUFsbG93RHVwbGljYXRlcykge1xuICAgIHRoaXMuX2FycmF5LnB1c2goYVN0cik7XG4gIH1cbiAgaWYgKCFpc0R1cGxpY2F0ZSkge1xuICAgIGlmIChoYXNOYXRpdmVNYXApIHtcbiAgICAgIHRoaXMuX3NldC5zZXQoYVN0ciwgaWR4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2V0W3NTdHJdID0gaWR4O1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBJcyB0aGUgZ2l2ZW4gc3RyaW5nIGEgbWVtYmVyIG9mIHRoaXMgc2V0P1xuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5BcnJheVNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gQXJyYXlTZXRfaGFzKGFTdHIpIHtcbiAgaWYgKGhhc05hdGl2ZU1hcCkge1xuICAgIHJldHVybiB0aGlzLl9zZXQuaGFzKGFTdHIpO1xuICB9IGVsc2Uge1xuICAgIHZhciBzU3RyID0gdXRpbC50b1NldFN0cmluZyhhU3RyKTtcbiAgICByZXR1cm4gaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXaGF0IGlzIHRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gc3RyaW5nIGluIHRoZSBhcnJheT9cbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBBcnJheVNldF9pbmRleE9mKGFTdHIpIHtcbiAgaWYgKGhhc05hdGl2ZU1hcCkge1xuICAgIHZhciBpZHggPSB0aGlzLl9zZXQuZ2V0KGFTdHIpO1xuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc1N0ciA9IHV0aWwudG9TZXRTdHJpbmcoYVN0cik7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMuX3NldCwgc1N0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZXRbc1N0cl07XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU3RyICsgJ1wiIGlzIG5vdCBpbiB0aGUgc2V0LicpO1xufTtcblxuLyoqXG4gKiBXaGF0IGlzIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBpbmRleD9cbiAqXG4gKiBAcGFyYW0gTnVtYmVyIGFJZHhcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24gQXJyYXlTZXRfYXQoYUlkeCkge1xuICBpZiAoYUlkeCA+PSAwICYmIGFJZHggPCB0aGlzLl9hcnJheS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXlbYUlkeF07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdObyBlbGVtZW50IGluZGV4ZWQgYnkgJyArIGFJZHgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNldCAod2hpY2ggaGFzIHRoZSBwcm9wZXIgaW5kaWNlc1xuICogaW5kaWNhdGVkIGJ5IGluZGV4T2YpLiBOb3RlIHRoYXQgdGhpcyBpcyBhIGNvcHkgb2YgdGhlIGludGVybmFsIGFycmF5IHVzZWRcbiAqIGZvciBzdG9yaW5nIHRoZSBtZW1iZXJzIHNvIHRoYXQgbm8gb25lIGNhbiBtZXNzIHdpdGggaW50ZXJuYWwgc3RhdGUuXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gQXJyYXlTZXRfdG9BcnJheSgpIHtcbiAgcmV0dXJuIHRoaXMuX2FycmF5LnNsaWNlKCk7XG59O1xuXG5leHBvcnRzLkFycmF5U2V0ID0gQXJyYXlTZXQ7XG4iLCJyZXF1aXJlKCdzb3VyY2UtbWFwLXN1cHBvcnQnKS5pbnN0YWxsKClcclxuXHJcbmltcG9ydCB7IGFwcCwgTWVudSwgVHJheSwgTmF0aXZlSW1hZ2UgfSBmcm9tICdlbGVjdHJvbidcclxuXHJcbmltcG9ydCBDb2xvcnBpY2tlclZpZXcgZnJvbSAnLi92aWV3cy9jb2xvcnBpY2tlclZpZXcnXHJcbmltcG9ydCBDb2xvcnNib29rVmlldyBmcm9tICcuL3ZpZXdzL2NvbG9yc2Jvb2tWaWV3J1xyXG5pbXBvcnQgUGlja2VyVmlldyBmcm9tICcuL3ZpZXdzL3BpY2tlclZpZXcnXHJcbmltcG9ydCBTZXR0aW5nc1ZpZXcgZnJvbSAnLi92aWV3cy9zZXR0aW5nc1ZpZXcnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2xvcnBpY2tlckFwcCB7XHJcbiAgcHJpdmF0ZSBjb2xvcnBpY2tlclZpZXc6IENvbG9ycGlja2VyVmlld1xyXG4gIHByaXZhdGUgY29sb3JzYm9va1ZpZXc6IENvbG9yc2Jvb2tWaWV3XHJcbiAgcHJpdmF0ZSBwaWNrZXJWaWV3OiBQaWNrZXJWaWV3XHJcbiAgcHJpdmF0ZSBzZXR0aW5nc1ZpZXc6IFNldHRpbmdzVmlld1xyXG5cclxuICBwcml2YXRlIHRyYXk/OiBUcmF5XHJcblxyXG4gIHByaXZhdGUgbWVudVRlbXBsYXRlOiBBcnJheTxvYmplY3Q+ID0gW1xyXG4gICAge1xyXG4gICAgICBsYWJlbDogJ0NvbG9ycGlja2VyJyxcclxuICAgICAgc3VibWVudTogW1xyXG4gICAgICAgIHsgbGFiZWw6ICdBYm91dCBDb2xvcnBpY2tlcicsICdhY2NlbGVyYXRvcic6ICdTaGlmdCtDbWRPckN0cmwrQScsIGNsaWNrOiAoKSA9PiB0aGlzLnNldHRpbmdzVmlldy5jcmVhdGVXaW5kb3coKSB9LFxyXG4gICAgICAgIHsgbGFiZWw6IGBWZXJzaW9uICR7YXBwLmdldFZlcnNpb24oKX1gLCBlbmFibGVkOiBmYWxzZSB9LFxyXG4gICAgICAgIHsgdHlwZTogJ3NlcGFyYXRvcicgfSxcclxuICAgICAgICB7IGxhYmVsOiAnUHJlZmVyZW5jZXMnLCBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCssJywgY2xpY2s6ICgpID0+IHRoaXMuc2V0dGluZ3NWaWV3LmNyZWF0ZVdpbmRvdygpIH0sXHJcbiAgICAgICAgeyB0eXBlOiAnc2VwYXJhdG9yJyB9LFxyXG4gICAgICAgIHsgbGFiZWw6ICdIaWRlIENvbG9ycGlja2VyJywgYWNjZWxlcmF0b3I6ICdDbWRPckN0cmwrSCcsIHJvbGU6ICdtaW5pbWl6ZScgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBsYWJlbDogJ0RldmVsb3BlcicsXHJcbiAgICAgICAgICBzdWJtZW51OiBbXHJcbiAgICAgICAgICAgIHsgbGFiZWw6ICdUb2dnbGUgRGV2dG9vbHMnLCBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCtBbHQrSScsIHJvbGU6ICd0b2dnbGVkZXZ0b29scycgfSxcclxuICAgICAgICAgICAgeyBsYWJlbDogJ1JlbG9hZCBXaW5kb3cnLCBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCtSJywgcm9sZTogJ3JlbG9hZCcgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyB0eXBlOiAnc2VwYXJhdG9yJyB9LFxyXG4gICAgICAgIHsgbGFiZWw6ICdRdWl0JywgYWNjZWxlcmF0b3I6ICdDbWRPckN0cmwrUScsIGNsaWNrOiAoKSA9PiBhcHAucXVpdCgpIH1cclxuICAgICAgXVxyXG4gICAgfSwge1xyXG4gICAgICBsYWJlbDogJ0VkaXQnLCByb2xlOiAnZWRpdE1lbnUnXHJcbiAgICB9LCB7XHJcbiAgICAgIGxhYmVsOiAnVmlldycsXHJcbiAgICAgIHN1Ym1lbnU6IFtcclxuICAgICAgICB7IGxhYmVsOiAnU2hvdyBDb2xvcnBpY2tlcicsIGFjY2VsZXJhdG9yOiAnU2hpZnQrQ21kT3JDdHJsK0MnLCBjbGljazogKCkgPT4gdGhpcy5jb2xvcnBpY2tlclZpZXcuY3JlYXRlV2luZG93KCkgfSxcclxuICAgICAgICB7IGxhYmVsOiAnU2hvdyBDb2xvcnNCb29rJywgYWNjZWxlcmF0b3I6ICdTaGlmdCtDbWRPckN0cmwrQicsIGNsaWNrOiAoKSA9PiB0aGlzLmNvbG9yc2Jvb2tWaWV3LmNyZWF0ZVdpbmRvdygpIH0sXHJcbiAgICAgICAgeyB0eXBlOiAnc2VwYXJhdG9yJyB9LFxyXG4gICAgICAgIHsgbGFiZWw6ICdTYXZlIENvbG9yJywgYWNjZWxlcmF0b3I6ICdDbWRPckN0cmwrUycsIGNsaWNrOiAoKSA9PiB0aGlzLmNvbG9ycGlja2VyVmlldy5zZW5kRXZlbnQoJ3Nob3J0U2F2ZScpIH0sXHJcbiAgICAgICAgeyB0eXBlOiAnc2VwYXJhdG9yJyB9LFxyXG4gICAgICAgIHsgbGFiZWw6ICdDb3B5IEhleCBDb2xvcicsIGFjY2VsZXJhdG9yOiAnQ21kT3JDdHJsK1cnLCBjbGljazogKCkgPT4gdGhpcy5jb2xvcnBpY2tlclZpZXcuc2VuZEV2ZW50KCdzaG9ydENvcHlIZXgnKSB9LFxyXG4gICAgICAgIHsgbGFiZWw6ICdDb3B5IFJHQihhKSBDb2xvcicsIGFjY2VsZXJhdG9yOiAnU2hpZnQrQ21kT3JDdHJsK1cnLCBjbGljazogKCkgPT4gdGhpcy5jb2xvcnBpY2tlclZpZXcuc2VuZEV2ZW50KCdzaG9ydENvcHlSR0InKSB9LFxyXG4gICAgICAgIHsgdHlwZTogJ3NlcGFyYXRvcicgfSxcclxuICAgICAgICB7IGxhYmVsOiAnc2V0IE5lZ2F0aXZlIENvbG9yJywgYWNjZWxlcmF0b3I6ICdDbWRPckN0cmwrTicsIGNsaWNrOiAoKSA9PiB0aGlzLmNvbG9ycGlja2VyVmlldy5zZW5kRXZlbnQoJ3Nob3J0TmVnYXRpdmUnKSB9XHJcbiAgICAgIF1cclxuICAgIH0sIHtcclxuICAgICAgbGFiZWw6ICdUb29scycsXHJcbiAgICAgIHN1Ym1lbnU6IFtcclxuICAgICAgICB7IGxhYmVsOiAnUGluIHRvIEZvcmVncm91bmQnLCBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCtGJywgY2xpY2s6ICgpID0+IHRoaXMuY29sb3JwaWNrZXJWaWV3LnNlbmRFdmVudCgnc2hvcnRQaW4nKSB9LFxyXG4gICAgICAgIHsgdHlwZTogJ3NlcGFyYXRvcicgfSxcclxuICAgICAgICB7IGxhYmVsOiAnUGljayBDb2xvcicsIGFjY2VsZXJhdG9yOiAnQ21kT3JDdHJsK1AnLCBjbGljazogKCkgPT4gdGhpcy5waWNrZXJWaWV3LmNyZWF0ZVdpbmRvdygpIH0sXHJcbiAgICAgICAgeyBsYWJlbDogJ0dldCBDbGlwYm9hcmRcXCdzIENvbG9ycycsIGFjY2VsZXJhdG9yOiAnU2hpZnQrQ21kT3JDdHJsK1YnLCBjbGljazogKCkgPT4gdGhpcy5jb2xvcnBpY2tlclZpZXcuc2VuZEV2ZW50KCdzaG9ydEFwcGx5JykgfSxcclxuICAgICAgICB7IGxhYmVsOiAnVG9nZ2xlIFNoYWRpbmcnLCBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCtUJywgY2xpY2s6ICgpID0+IHRoaXMuY29sb3JwaWNrZXJWaWV3LnNlbmRFdmVudCgnc2hvcnRTaGFkaW5nJykgfSxcclxuICAgICAgICB7IGxhYmVsOiAnVG9nZ2xlIE9wYWNpdHknLCBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCtPJywgY2xpY2s6ICgpID0+IHRoaXMuY29sb3JwaWNrZXJWaWV3LnNlbmRFdmVudCgnc2hvcnRPcGFjaXR5JykgfSxcclxuICAgICAgICB7IGxhYmVsOiAnU2V0IFJhbmRvbSBDb2xvcicsIGFjY2VsZXJhdG9yOiAnQ21kT3JDdHJsK00nLCBjbGljazogKCkgPT4gdGhpcy5jb2xvcnBpY2tlclZpZXcuc2VuZEV2ZW50KCdzaG9ydFJhbmRvbScpIH1cclxuICAgICAgXVxyXG4gICAgfVxyXG4gIF1cclxuXHJcbiAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgdGhpcy5jb2xvcnBpY2tlclZpZXcgPSBuZXcgQ29sb3JwaWNrZXJWaWV3KClcclxuICAgIHRoaXMuY29sb3JzYm9va1ZpZXcgPSBuZXcgQ29sb3JzYm9va1ZpZXcoKVxyXG4gICAgdGhpcy5waWNrZXJWaWV3ID0gbmV3IFBpY2tlclZpZXcoKVxyXG4gICAgdGhpcy5zZXR0aW5nc1ZpZXcgPSBuZXcgU2V0dGluZ3NWaWV3KClcclxuXHJcbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2xpbnV4Jykge1xyXG4gICAgICBhcHAuY29tbWFuZExpbmUuYXBwZW5kU3dpdGNoKCctLWVuYWJsZS10cmFuc3BhcmVudC12aXN1YWxzJylcclxuICAgICAgYXBwLmRpc2FibGVIYXJkd2FyZUFjY2VsZXJhdGlvbigpXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pbml0QXBwbGljYXRpb24oKVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0QXBwbGljYXRpb24gKCk6IHZvaWQge1xyXG4gICAgYXBwLm9uKCdyZWFkeScsICgpID0+IHtcclxuICAgICAgdGhpcy5jcmVhdGVUcmF5KClcclxuICAgICAgdGhpcy5jcmVhdGVNZW51KClcclxuICAgICAgdGhpcy5jb2xvcnBpY2tlclZpZXcuY3JlYXRlV2luZG93KClcclxuICAgIH0pXHJcblxyXG4gICAgYXBwLm9uKCdhY3RpdmF0ZScsICgpID0+IHRoaXMuY29sb3JwaWNrZXJWaWV3LmNyZWF0ZVdpbmRvdygpKVxyXG5cclxuICAgIGFwcC5vbignd2luZG93LWFsbC1jbG9zZWQnLCAoKSA9PiB7XHJcbiAgICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtICE9PSAnZGFyd2luJykgYXBwLnF1aXQoKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlTWVudSAoKTogdm9pZCB7XHJcbiAgICBNZW51LnNldEFwcGxpY2F0aW9uTWVudShNZW51LmJ1aWxkRnJvbVRlbXBsYXRlKHRoaXMubWVudVRlbXBsYXRlKSlcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlVHJheSAoKTogVHJheSB7XHJcbiAgICBpZiAodGhpcy50cmF5KSByZXR1cm4gdGhpcy50cmF5XHJcblxyXG4gICAgdGhpcy50cmF5ID0gbmV3IFRyYXkoYCR7X19kaXJuYW1lfS90cmF5LXdoaXRlLnBuZ2ApXHJcbiAgICB0aGlzLnRyYXkub24oJ2NsaWNrJywgZXZlbnQgPT4gdGhpcy5jb2xvcnBpY2tlclZpZXcuY3JlYXRlV2luZG93KCkpXHJcblxyXG4gICAgcmV0dXJuIHRoaXMudHJheVxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgYXBwbGljYXRpb24gPSBuZXcgQ29sb3JwaWNrZXJBcHAoKVxyXG4iLCJ2YXIgU291cmNlTWFwQ29uc3VtZXIgPSByZXF1aXJlKCdzb3VyY2UtbWFwJykuU291cmNlTWFwQ29uc3VtZXI7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxudmFyIGZzO1xudHJ5IHtcbiAgZnMgPSByZXF1aXJlKCdmcycpO1xuICBpZiAoIWZzLmV4aXN0c1N5bmMgfHwgIWZzLnJlYWRGaWxlU3luYykge1xuICAgIC8vIGZzIGRvZXNuJ3QgaGF2ZSBhbGwgbWV0aG9kcyB3ZSBuZWVkXG4gICAgZnMgPSBudWxsO1xuICB9XG59IGNhdGNoIChlcnIpIHtcbiAgLyogbm9wICovXG59XG5cbnZhciBidWZmZXJGcm9tID0gcmVxdWlyZSgnYnVmZmVyLWZyb20nKTtcblxuLy8gT25seSBpbnN0YWxsIG9uY2UgaWYgY2FsbGVkIG11bHRpcGxlIHRpbWVzXG52YXIgZXJyb3JGb3JtYXR0ZXJJbnN0YWxsZWQgPSBmYWxzZTtcbnZhciB1bmNhdWdodFNoaW1JbnN0YWxsZWQgPSBmYWxzZTtcblxuLy8gSWYgdHJ1ZSwgdGhlIGNhY2hlcyBhcmUgcmVzZXQgYmVmb3JlIGEgc3RhY2sgdHJhY2UgZm9ybWF0dGluZyBvcGVyYXRpb25cbnZhciBlbXB0eUNhY2hlQmV0d2Vlbk9wZXJhdGlvbnMgPSBmYWxzZTtcblxuLy8gU3VwcG9ydHMge2Jyb3dzZXIsIG5vZGUsIGF1dG99XG52YXIgZW52aXJvbm1lbnQgPSBcImF1dG9cIjtcblxuLy8gTWFwcyBhIGZpbGUgcGF0aCB0byBhIHN0cmluZyBjb250YWluaW5nIHRoZSBmaWxlIGNvbnRlbnRzXG52YXIgZmlsZUNvbnRlbnRzQ2FjaGUgPSB7fTtcblxuLy8gTWFwcyBhIGZpbGUgcGF0aCB0byBhIHNvdXJjZSBtYXAgZm9yIHRoYXQgZmlsZVxudmFyIHNvdXJjZU1hcENhY2hlID0ge307XG5cbi8vIFJlZ2V4IGZvciBkZXRlY3Rpbmcgc291cmNlIG1hcHNcbnZhciByZVNvdXJjZU1hcCA9IC9eZGF0YTphcHBsaWNhdGlvblxcL2pzb25bXixdK2Jhc2U2NCwvO1xuXG4vLyBQcmlvcml0eSBsaXN0IG9mIHJldHJpZXZlIGhhbmRsZXJzXG52YXIgcmV0cmlldmVGaWxlSGFuZGxlcnMgPSBbXTtcbnZhciByZXRyaWV2ZU1hcEhhbmRsZXJzID0gW107XG5cbmZ1bmN0aW9uIGlzSW5Ccm93c2VyKCkge1xuICBpZiAoZW52aXJvbm1lbnQgPT09IFwiYnJvd3NlclwiKVxuICAgIHJldHVybiB0cnVlO1xuICBpZiAoZW52aXJvbm1lbnQgPT09IFwibm9kZVwiKVxuICAgIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICgodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpICYmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09ICdmdW5jdGlvbicpICYmICEod2luZG93LnJlcXVpcmUgJiYgd2luZG93Lm1vZHVsZSAmJiB3aW5kb3cucHJvY2VzcyAmJiB3aW5kb3cucHJvY2Vzcy50eXBlID09PSBcInJlbmRlcmVyXCIpKTtcbn1cblxuZnVuY3Rpb24gaGFzR2xvYmFsUHJvY2Vzc0V2ZW50RW1pdHRlcigpIHtcbiAgcmV0dXJuICgodHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnKSAmJiAocHJvY2VzcyAhPT0gbnVsbCkgJiYgKHR5cGVvZiBwcm9jZXNzLm9uID09PSAnZnVuY3Rpb24nKSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZXJFeGVjKGxpc3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJldCA9IGxpc3RbaV0oYXJnKTtcbiAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbnZhciByZXRyaWV2ZUZpbGUgPSBoYW5kbGVyRXhlYyhyZXRyaWV2ZUZpbGVIYW5kbGVycyk7XG5cbnJldHJpZXZlRmlsZUhhbmRsZXJzLnB1c2goZnVuY3Rpb24ocGF0aCkge1xuICAvLyBUcmltIHRoZSBwYXRoIHRvIG1ha2Ugc3VyZSB0aGVyZSBpcyBubyBleHRyYSB3aGl0ZXNwYWNlLlxuICBwYXRoID0gcGF0aC50cmltKCk7XG4gIGlmICgvXmZpbGU6Ly50ZXN0KHBhdGgpKSB7XG4gICAgLy8gZXhpc3RzU3luYy9yZWFkRmlsZVN5bmMgY2FuJ3QgaGFuZGxlIGZpbGUgcHJvdG9jb2wsIGJ1dCBvbmNlIHN0cmlwcGVkLCBpdCB3b3Jrc1xuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL2ZpbGU6XFwvXFwvXFwvKFxcdzopPy8sIGZ1bmN0aW9uKHByb3RvY29sLCBkcml2ZSkge1xuICAgICAgcmV0dXJuIGRyaXZlID9cbiAgICAgICAgJycgOiAvLyBmaWxlOi8vL0M6L2Rpci9maWxlIC0+IEM6L2Rpci9maWxlXG4gICAgICAgICcvJzsgLy8gZmlsZTovLy9yb290LWRpci9maWxlIC0+IC9yb290LWRpci9maWxlXG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhdGggaW4gZmlsZUNvbnRlbnRzQ2FjaGUpIHtcbiAgICByZXR1cm4gZmlsZUNvbnRlbnRzQ2FjaGVbcGF0aF07XG4gIH1cblxuICB2YXIgY29udGVudHMgPSAnJztcbiAgdHJ5IHtcbiAgICBpZiAoIWZzKSB7XG4gICAgICAvLyBVc2UgU0pBWCBpZiB3ZSBhcmUgaW4gdGhlIGJyb3dzZXJcbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIHhoci5vcGVuKCdHRVQnLCBwYXRoLCAvKiogYXN5bmMgKi8gZmFsc2UpO1xuICAgICAgeGhyLnNlbmQobnVsbCk7XG4gICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQgJiYgeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgIGNvbnRlbnRzID0geGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZzLmV4aXN0c1N5bmMocGF0aCkpIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgdXNlIHRoZSBmaWxlc3lzdGVtXG4gICAgICBjb250ZW50cyA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLCAndXRmOCcpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXIpIHtcbiAgICAvKiBpZ25vcmUgYW55IGVycm9ycyAqL1xuICB9XG5cbiAgcmV0dXJuIGZpbGVDb250ZW50c0NhY2hlW3BhdGhdID0gY29udGVudHM7XG59KTtcblxuLy8gU3VwcG9ydCBVUkxzIHJlbGF0aXZlIHRvIGEgZGlyZWN0b3J5LCBidXQgYmUgY2FyZWZ1bCBhYm91dCBhIHByb3RvY29sIHByZWZpeFxuLy8gaW4gY2FzZSB3ZSBhcmUgaW4gdGhlIGJyb3dzZXIgKGkuZS4gZGlyZWN0b3JpZXMgbWF5IHN0YXJ0IHdpdGggXCJodHRwOi8vXCIgb3IgXCJmaWxlOi8vL1wiKVxuZnVuY3Rpb24gc3VwcG9ydFJlbGF0aXZlVVJMKGZpbGUsIHVybCkge1xuICBpZiAoIWZpbGUpIHJldHVybiB1cmw7XG4gIHZhciBkaXIgPSBwYXRoLmRpcm5hbWUoZmlsZSk7XG4gIHZhciBtYXRjaCA9IC9eXFx3KzpcXC9cXC9bXlxcL10qLy5leGVjKGRpcik7XG4gIHZhciBwcm90b2NvbCA9IG1hdGNoID8gbWF0Y2hbMF0gOiAnJztcbiAgdmFyIHN0YXJ0UGF0aCA9IGRpci5zbGljZShwcm90b2NvbC5sZW5ndGgpO1xuICBpZiAocHJvdG9jb2wgJiYgL15cXC9cXHdcXDovLnRlc3Qoc3RhcnRQYXRoKSkge1xuICAgIC8vIGhhbmRsZSBmaWxlOi8vL0M6LyBwYXRoc1xuICAgIHByb3RvY29sICs9ICcvJztcbiAgICByZXR1cm4gcHJvdG9jb2wgKyBwYXRoLnJlc29sdmUoZGlyLnNsaWNlKHByb3RvY29sLmxlbmd0aCksIHVybCkucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuICB9XG4gIHJldHVybiBwcm90b2NvbCArIHBhdGgucmVzb2x2ZShkaXIuc2xpY2UocHJvdG9jb2wubGVuZ3RoKSwgdXJsKTtcbn1cblxuZnVuY3Rpb24gcmV0cmlldmVTb3VyY2VNYXBVUkwoc291cmNlKSB7XG4gIHZhciBmaWxlRGF0YTtcblxuICBpZiAoaXNJbkJyb3dzZXIoKSkge1xuICAgICB0cnkge1xuICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICB4aHIub3BlbignR0VUJywgc291cmNlLCBmYWxzZSk7XG4gICAgICAgeGhyLnNlbmQobnVsbCk7XG4gICAgICAgZmlsZURhdGEgPSB4aHIucmVhZHlTdGF0ZSA9PT0gNCA/IHhoci5yZXNwb25zZVRleHQgOiBudWxsO1xuXG4gICAgICAgLy8gU3VwcG9ydCBwcm92aWRpbmcgYSBzb3VyY2VNYXBwaW5nVVJMIHZpYSB0aGUgU291cmNlTWFwIGhlYWRlclxuICAgICAgIHZhciBzb3VyY2VNYXBIZWFkZXIgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJTb3VyY2VNYXBcIikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiWC1Tb3VyY2VNYXBcIik7XG4gICAgICAgaWYgKHNvdXJjZU1hcEhlYWRlcikge1xuICAgICAgICAgcmV0dXJuIHNvdXJjZU1hcEhlYWRlcjtcbiAgICAgICB9XG4gICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgfVxuICB9XG5cbiAgLy8gR2V0IHRoZSBVUkwgb2YgdGhlIHNvdXJjZSBtYXBcbiAgZmlsZURhdGEgPSByZXRyaWV2ZUZpbGUoc291cmNlKTtcbiAgdmFyIHJlID0gLyg/OlxcL1xcL1tAI11bIFxcdF0rc291cmNlTWFwcGluZ1VSTD0oW15cXHMnXCJdKz8pWyBcXHRdKiQpfCg/OlxcL1xcKltAI11bIFxcdF0rc291cmNlTWFwcGluZ1VSTD0oW15cXCpdKz8pWyBcXHRdKig/OlxcKlxcLylbIFxcdF0qJCkvbWc7XG4gIC8vIEtlZXAgZXhlY3V0aW5nIHRoZSBzZWFyY2ggdG8gZmluZCB0aGUgKmxhc3QqIHNvdXJjZU1hcHBpbmdVUkwgdG8gYXZvaWRcbiAgLy8gcGlja2luZyB1cCBzb3VyY2VNYXBwaW5nVVJMcyBmcm9tIGNvbW1lbnRzLCBzdHJpbmdzLCBldGMuXG4gIHZhciBsYXN0TWF0Y2gsIG1hdGNoO1xuICB3aGlsZSAobWF0Y2ggPSByZS5leGVjKGZpbGVEYXRhKSkgbGFzdE1hdGNoID0gbWF0Y2g7XG4gIGlmICghbGFzdE1hdGNoKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIGxhc3RNYXRjaFsxXTtcbn07XG5cbi8vIENhbiBiZSBvdmVycmlkZGVuIGJ5IHRoZSByZXRyaWV2ZVNvdXJjZU1hcCBvcHRpb24gdG8gaW5zdGFsbC4gVGFrZXMgYVxuLy8gZ2VuZXJhdGVkIHNvdXJjZSBmaWxlbmFtZTsgcmV0dXJucyBhIHttYXAsIG9wdGlvbmFsIHVybH0gb2JqZWN0LCBvciBudWxsIGlmXG4vLyB0aGVyZSBpcyBubyBzb3VyY2UgbWFwLiAgVGhlIG1hcCBmaWVsZCBtYXkgYmUgZWl0aGVyIGEgc3RyaW5nIG9yIHRoZSBwYXJzZWRcbi8vIEpTT04gb2JqZWN0IChpZSwgaXQgbXVzdCBiZSBhIHZhbGlkIGFyZ3VtZW50IHRvIHRoZSBTb3VyY2VNYXBDb25zdW1lclxuLy8gY29uc3RydWN0b3IpLlxudmFyIHJldHJpZXZlU291cmNlTWFwID0gaGFuZGxlckV4ZWMocmV0cmlldmVNYXBIYW5kbGVycyk7XG5yZXRyaWV2ZU1hcEhhbmRsZXJzLnB1c2goZnVuY3Rpb24oc291cmNlKSB7XG4gIHZhciBzb3VyY2VNYXBwaW5nVVJMID0gcmV0cmlldmVTb3VyY2VNYXBVUkwoc291cmNlKTtcbiAgaWYgKCFzb3VyY2VNYXBwaW5nVVJMKSByZXR1cm4gbnVsbDtcblxuICAvLyBSZWFkIHRoZSBjb250ZW50cyBvZiB0aGUgc291cmNlIG1hcFxuICB2YXIgc291cmNlTWFwRGF0YTtcbiAgaWYgKHJlU291cmNlTWFwLnRlc3Qoc291cmNlTWFwcGluZ1VSTCkpIHtcbiAgICAvLyBTdXBwb3J0IHNvdXJjZSBtYXAgVVJMIGFzIGEgZGF0YSB1cmxcbiAgICB2YXIgcmF3RGF0YSA9IHNvdXJjZU1hcHBpbmdVUkwuc2xpY2Uoc291cmNlTWFwcGluZ1VSTC5pbmRleE9mKCcsJykgKyAxKTtcbiAgICBzb3VyY2VNYXBEYXRhID0gYnVmZmVyRnJvbShyYXdEYXRhLCBcImJhc2U2NFwiKS50b1N0cmluZygpO1xuICAgIHNvdXJjZU1hcHBpbmdVUkwgPSBzb3VyY2U7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3VwcG9ydCBzb3VyY2UgbWFwIFVSTHMgcmVsYXRpdmUgdG8gdGhlIHNvdXJjZSBVUkxcbiAgICBzb3VyY2VNYXBwaW5nVVJMID0gc3VwcG9ydFJlbGF0aXZlVVJMKHNvdXJjZSwgc291cmNlTWFwcGluZ1VSTCk7XG4gICAgc291cmNlTWFwRGF0YSA9IHJldHJpZXZlRmlsZShzb3VyY2VNYXBwaW5nVVJMKTtcbiAgfVxuXG4gIGlmICghc291cmNlTWFwRGF0YSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB1cmw6IHNvdXJjZU1hcHBpbmdVUkwsXG4gICAgbWFwOiBzb3VyY2VNYXBEYXRhXG4gIH07XG59KTtcblxuZnVuY3Rpb24gbWFwU291cmNlUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgdmFyIHNvdXJjZU1hcCA9IHNvdXJjZU1hcENhY2hlW3Bvc2l0aW9uLnNvdXJjZV07XG4gIGlmICghc291cmNlTWFwKSB7XG4gICAgLy8gQ2FsbCB0aGUgKG92ZXJyaWRlYWJsZSkgcmV0cmlldmVTb3VyY2VNYXAgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzb3VyY2UgbWFwLlxuICAgIHZhciB1cmxBbmRNYXAgPSByZXRyaWV2ZVNvdXJjZU1hcChwb3NpdGlvbi5zb3VyY2UpO1xuICAgIGlmICh1cmxBbmRNYXApIHtcbiAgICAgIHNvdXJjZU1hcCA9IHNvdXJjZU1hcENhY2hlW3Bvc2l0aW9uLnNvdXJjZV0gPSB7XG4gICAgICAgIHVybDogdXJsQW5kTWFwLnVybCxcbiAgICAgICAgbWFwOiBuZXcgU291cmNlTWFwQ29uc3VtZXIodXJsQW5kTWFwLm1hcClcbiAgICAgIH07XG5cbiAgICAgIC8vIExvYWQgYWxsIHNvdXJjZXMgc3RvcmVkIGlubGluZSB3aXRoIHRoZSBzb3VyY2UgbWFwIGludG8gdGhlIGZpbGUgY2FjaGVcbiAgICAgIC8vIHRvIHByZXRlbmQgbGlrZSB0aGV5IGFyZSBhbHJlYWR5IGxvYWRlZC4gVGhleSBtYXkgbm90IGV4aXN0IG9uIGRpc2suXG4gICAgICBpZiAoc291cmNlTWFwLm1hcC5zb3VyY2VzQ29udGVudCkge1xuICAgICAgICBzb3VyY2VNYXAubWFwLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbihzb3VyY2UsIGkpIHtcbiAgICAgICAgICB2YXIgY29udGVudHMgPSBzb3VyY2VNYXAubWFwLnNvdXJjZXNDb250ZW50W2ldO1xuICAgICAgICAgIGlmIChjb250ZW50cykge1xuICAgICAgICAgICAgdmFyIHVybCA9IHN1cHBvcnRSZWxhdGl2ZVVSTChzb3VyY2VNYXAudXJsLCBzb3VyY2UpO1xuICAgICAgICAgICAgZmlsZUNvbnRlbnRzQ2FjaGVbdXJsXSA9IGNvbnRlbnRzO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNvdXJjZU1hcCA9IHNvdXJjZU1hcENhY2hlW3Bvc2l0aW9uLnNvdXJjZV0gPSB7XG4gICAgICAgIHVybDogbnVsbCxcbiAgICAgICAgbWFwOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlc29sdmUgdGhlIHNvdXJjZSBVUkwgcmVsYXRpdmUgdG8gdGhlIFVSTCBvZiB0aGUgc291cmNlIG1hcFxuICBpZiAoc291cmNlTWFwICYmIHNvdXJjZU1hcC5tYXApIHtcbiAgICB2YXIgb3JpZ2luYWxQb3NpdGlvbiA9IHNvdXJjZU1hcC5tYXAub3JpZ2luYWxQb3NpdGlvbkZvcihwb3NpdGlvbik7XG5cbiAgICAvLyBPbmx5IHJldHVybiB0aGUgb3JpZ2luYWwgcG9zaXRpb24gaWYgYSBtYXRjaGluZyBsaW5lIHdhcyBmb3VuZC4gSWYgbm9cbiAgICAvLyBtYXRjaGluZyBsaW5lIGlzIGZvdW5kIHRoZW4gd2UgcmV0dXJuIHBvc2l0aW9uIGluc3RlYWQsIHdoaWNoIHdpbGwgY2F1c2VcbiAgICAvLyB0aGUgc3RhY2sgdHJhY2UgdG8gcHJpbnQgdGhlIHBhdGggYW5kIGxpbmUgZm9yIHRoZSBjb21waWxlZCBmaWxlLiBJdCBpc1xuICAgIC8vIGJldHRlciB0byBnaXZlIGEgcHJlY2lzZSBsb2NhdGlvbiBpbiB0aGUgY29tcGlsZWQgZmlsZSB0aGFuIGEgdmFndWVcbiAgICAvLyBsb2NhdGlvbiBpbiB0aGUgb3JpZ2luYWwgZmlsZS5cbiAgICBpZiAob3JpZ2luYWxQb3NpdGlvbi5zb3VyY2UgIT09IG51bGwpIHtcbiAgICAgIG9yaWdpbmFsUG9zaXRpb24uc291cmNlID0gc3VwcG9ydFJlbGF0aXZlVVJMKFxuICAgICAgICBzb3VyY2VNYXAudXJsLCBvcmlnaW5hbFBvc2l0aW9uLnNvdXJjZSk7XG4gICAgICByZXR1cm4gb3JpZ2luYWxQb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcG9zaXRpb247XG59XG5cbi8vIFBhcnNlcyBjb2RlIGdlbmVyYXRlZCBieSBGb3JtYXRFdmFsT3JpZ2luKCksIGEgZnVuY3Rpb24gaW5zaWRlIFY4OlxuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9zb3VyY2UvYnJvd3NlL3RydW5rL3NyYy9tZXNzYWdlcy5qc1xuZnVuY3Rpb24gbWFwRXZhbE9yaWdpbihvcmlnaW4pIHtcbiAgLy8gTW9zdCBldmFsKCkgY2FsbHMgYXJlIGluIHRoaXMgZm9ybWF0XG4gIHZhciBtYXRjaCA9IC9eZXZhbCBhdCAoW14oXSspIFxcKCguKyk6KFxcZCspOihcXGQrKVxcKSQvLmV4ZWMob3JpZ2luKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gbWFwU291cmNlUG9zaXRpb24oe1xuICAgICAgc291cmNlOiBtYXRjaFsyXSxcbiAgICAgIGxpbmU6ICttYXRjaFszXSxcbiAgICAgIGNvbHVtbjogbWF0Y2hbNF0gLSAxXG4gICAgfSk7XG4gICAgcmV0dXJuICdldmFsIGF0ICcgKyBtYXRjaFsxXSArICcgKCcgKyBwb3NpdGlvbi5zb3VyY2UgKyAnOicgK1xuICAgICAgcG9zaXRpb24ubGluZSArICc6JyArIChwb3NpdGlvbi5jb2x1bW4gKyAxKSArICcpJztcbiAgfVxuXG4gIC8vIFBhcnNlIG5lc3RlZCBldmFsKCkgY2FsbHMgdXNpbmcgcmVjdXJzaW9uXG4gIG1hdGNoID0gL15ldmFsIGF0IChbXihdKykgXFwoKC4rKVxcKSQvLmV4ZWMob3JpZ2luKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgcmV0dXJuICdldmFsIGF0ICcgKyBtYXRjaFsxXSArICcgKCcgKyBtYXBFdmFsT3JpZ2luKG1hdGNoWzJdKSArICcpJztcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSB3ZSBzdGlsbCByZXR1cm4gdXNlZnVsIGluZm9ybWF0aW9uIGlmIHdlIGRpZG4ndCBmaW5kIGFueXRoaW5nXG4gIHJldHVybiBvcmlnaW47XG59XG5cbi8vIFRoaXMgaXMgY29waWVkIGFsbW9zdCB2ZXJiYXRpbSBmcm9tIHRoZSBWOCBzb3VyY2UgY29kZSBhdFxuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9zb3VyY2UvYnJvd3NlL3RydW5rL3NyYy9tZXNzYWdlcy5qcy4gVGhlXG4vLyBpbXBsZW1lbnRhdGlvbiBvZiB3cmFwQ2FsbFNpdGUoKSB1c2VkIHRvIGp1c3QgZm9yd2FyZCB0byB0aGUgYWN0dWFsIHNvdXJjZVxuLy8gY29kZSBvZiBDYWxsU2l0ZS5wcm90b3R5cGUudG9TdHJpbmcgYnV0IHVuZm9ydHVuYXRlbHkgYSBuZXcgcmVsZWFzZSBvZiBWOFxuLy8gZGlkIHNvbWV0aGluZyB0byB0aGUgcHJvdG90eXBlIGNoYWluIGFuZCBicm9rZSB0aGUgc2hpbS4gVGhlIG9ubHkgZml4IElcbi8vIGNvdWxkIGZpbmQgd2FzIGNvcHkvcGFzdGUuXG5mdW5jdGlvbiBDYWxsU2l0ZVRvU3RyaW5nKCkge1xuICB2YXIgZmlsZU5hbWU7XG4gIHZhciBmaWxlTG9jYXRpb24gPSBcIlwiO1xuICBpZiAodGhpcy5pc05hdGl2ZSgpKSB7XG4gICAgZmlsZUxvY2F0aW9uID0gXCJuYXRpdmVcIjtcbiAgfSBlbHNlIHtcbiAgICBmaWxlTmFtZSA9IHRoaXMuZ2V0U2NyaXB0TmFtZU9yU291cmNlVVJMKCk7XG4gICAgaWYgKCFmaWxlTmFtZSAmJiB0aGlzLmlzRXZhbCgpKSB7XG4gICAgICBmaWxlTG9jYXRpb24gPSB0aGlzLmdldEV2YWxPcmlnaW4oKTtcbiAgICAgIGZpbGVMb2NhdGlvbiArPSBcIiwgXCI7ICAvLyBFeHBlY3Rpbmcgc291cmNlIHBvc2l0aW9uIHRvIGZvbGxvdy5cbiAgICB9XG5cbiAgICBpZiAoZmlsZU5hbWUpIHtcbiAgICAgIGZpbGVMb2NhdGlvbiArPSBmaWxlTmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU291cmNlIGNvZGUgZG9lcyBub3Qgb3JpZ2luYXRlIGZyb20gYSBmaWxlIGFuZCBpcyBub3QgbmF0aXZlLCBidXQgd2VcbiAgICAgIC8vIGNhbiBzdGlsbCBnZXQgdGhlIHNvdXJjZSBwb3NpdGlvbiBpbnNpZGUgdGhlIHNvdXJjZSBzdHJpbmcsIGUuZy4gaW5cbiAgICAgIC8vIGFuIGV2YWwgc3RyaW5nLlxuICAgICAgZmlsZUxvY2F0aW9uICs9IFwiPGFub255bW91cz5cIjtcbiAgICB9XG4gICAgdmFyIGxpbmVOdW1iZXIgPSB0aGlzLmdldExpbmVOdW1iZXIoKTtcbiAgICBpZiAobGluZU51bWJlciAhPSBudWxsKSB7XG4gICAgICBmaWxlTG9jYXRpb24gKz0gXCI6XCIgKyBsaW5lTnVtYmVyO1xuICAgICAgdmFyIGNvbHVtbk51bWJlciA9IHRoaXMuZ2V0Q29sdW1uTnVtYmVyKCk7XG4gICAgICBpZiAoY29sdW1uTnVtYmVyKSB7XG4gICAgICAgIGZpbGVMb2NhdGlvbiArPSBcIjpcIiArIGNvbHVtbk51bWJlcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgbGluZSA9IFwiXCI7XG4gIHZhciBmdW5jdGlvbk5hbWUgPSB0aGlzLmdldEZ1bmN0aW9uTmFtZSgpO1xuICB2YXIgYWRkU3VmZml4ID0gdHJ1ZTtcbiAgdmFyIGlzQ29uc3RydWN0b3IgPSB0aGlzLmlzQ29uc3RydWN0b3IoKTtcbiAgdmFyIGlzTWV0aG9kQ2FsbCA9ICEodGhpcy5pc1RvcGxldmVsKCkgfHwgaXNDb25zdHJ1Y3Rvcik7XG4gIGlmIChpc01ldGhvZENhbGwpIHtcbiAgICB2YXIgdHlwZU5hbWUgPSB0aGlzLmdldFR5cGVOYW1lKCk7XG4gICAgLy8gRml4ZXMgc2hpbSB0byBiZSBiYWNrd2FyZCBjb21wYXRhYmxlIHdpdGggTm9kZSB2MCB0byB2NFxuICAgIGlmICh0eXBlTmFtZSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIikge1xuICAgICAgdHlwZU5hbWUgPSBcIm51bGxcIjtcbiAgICB9XG4gICAgdmFyIG1ldGhvZE5hbWUgPSB0aGlzLmdldE1ldGhvZE5hbWUoKTtcbiAgICBpZiAoZnVuY3Rpb25OYW1lKSB7XG4gICAgICBpZiAodHlwZU5hbWUgJiYgZnVuY3Rpb25OYW1lLmluZGV4T2YodHlwZU5hbWUpICE9IDApIHtcbiAgICAgICAgbGluZSArPSB0eXBlTmFtZSArIFwiLlwiO1xuICAgICAgfVxuICAgICAgbGluZSArPSBmdW5jdGlvbk5hbWU7XG4gICAgICBpZiAobWV0aG9kTmFtZSAmJiBmdW5jdGlvbk5hbWUuaW5kZXhPZihcIi5cIiArIG1ldGhvZE5hbWUpICE9IGZ1bmN0aW9uTmFtZS5sZW5ndGggLSBtZXRob2ROYW1lLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgbGluZSArPSBcIiBbYXMgXCIgKyBtZXRob2ROYW1lICsgXCJdXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmUgKz0gdHlwZU5hbWUgKyBcIi5cIiArIChtZXRob2ROYW1lIHx8IFwiPGFub255bW91cz5cIik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQ29uc3RydWN0b3IpIHtcbiAgICBsaW5lICs9IFwibmV3IFwiICsgKGZ1bmN0aW9uTmFtZSB8fCBcIjxhbm9ueW1vdXM+XCIpO1xuICB9IGVsc2UgaWYgKGZ1bmN0aW9uTmFtZSkge1xuICAgIGxpbmUgKz0gZnVuY3Rpb25OYW1lO1xuICB9IGVsc2Uge1xuICAgIGxpbmUgKz0gZmlsZUxvY2F0aW9uO1xuICAgIGFkZFN1ZmZpeCA9IGZhbHNlO1xuICB9XG4gIGlmIChhZGRTdWZmaXgpIHtcbiAgICBsaW5lICs9IFwiIChcIiArIGZpbGVMb2NhdGlvbiArIFwiKVwiO1xuICB9XG4gIHJldHVybiBsaW5lO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNhbGxTaXRlKGZyYW1lKSB7XG4gIHZhciBvYmplY3QgPSB7fTtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKGZyYW1lKSkuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgb2JqZWN0W25hbWVdID0gL14oPzppc3xnZXQpLy50ZXN0KG5hbWUpID8gZnVuY3Rpb24oKSB7IHJldHVybiBmcmFtZVtuYW1lXS5jYWxsKGZyYW1lKTsgfSA6IGZyYW1lW25hbWVdO1xuICB9KTtcbiAgb2JqZWN0LnRvU3RyaW5nID0gQ2FsbFNpdGVUb1N0cmluZztcbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gd3JhcENhbGxTaXRlKGZyYW1lKSB7XG4gIGlmKGZyYW1lLmlzTmF0aXZlKCkpIHtcbiAgICByZXR1cm4gZnJhbWU7XG4gIH1cblxuICAvLyBNb3N0IGNhbGwgc2l0ZXMgd2lsbCByZXR1cm4gdGhlIHNvdXJjZSBmaWxlIGZyb20gZ2V0RmlsZU5hbWUoKSwgYnV0IGNvZGVcbiAgLy8gcGFzc2VkIHRvIGV2YWwoKSBlbmRpbmcgaW4gXCIvLyMgc291cmNlVVJMPS4uLlwiIHdpbGwgcmV0dXJuIHRoZSBzb3VyY2UgZmlsZVxuICAvLyBmcm9tIGdldFNjcmlwdE5hbWVPclNvdXJjZVVSTCgpIGluc3RlYWRcbiAgdmFyIHNvdXJjZSA9IGZyYW1lLmdldEZpbGVOYW1lKCkgfHwgZnJhbWUuZ2V0U2NyaXB0TmFtZU9yU291cmNlVVJMKCk7XG4gIGlmIChzb3VyY2UpIHtcbiAgICB2YXIgbGluZSA9IGZyYW1lLmdldExpbmVOdW1iZXIoKTtcbiAgICB2YXIgY29sdW1uID0gZnJhbWUuZ2V0Q29sdW1uTnVtYmVyKCkgLSAxO1xuXG4gICAgLy8gRml4IHBvc2l0aW9uIGluIE5vZGUgd2hlcmUgc29tZSAoaW50ZXJuYWwpIGNvZGUgaXMgcHJlcGVuZGVkLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXZhbncvbm9kZS1zb3VyY2UtbWFwLXN1cHBvcnQvaXNzdWVzLzM2XG4gICAgdmFyIGhlYWRlckxlbmd0aCA9IDYyO1xuICAgIGlmIChsaW5lID09PSAxICYmIGNvbHVtbiA+IGhlYWRlckxlbmd0aCAmJiAhaXNJbkJyb3dzZXIoKSAmJiAhZnJhbWUuaXNFdmFsKCkpIHtcbiAgICAgIGNvbHVtbiAtPSBoZWFkZXJMZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIHBvc2l0aW9uID0gbWFwU291cmNlUG9zaXRpb24oe1xuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICBsaW5lOiBsaW5lLFxuICAgICAgY29sdW1uOiBjb2x1bW5cbiAgICB9KTtcbiAgICBmcmFtZSA9IGNsb25lQ2FsbFNpdGUoZnJhbWUpO1xuICAgIHZhciBvcmlnaW5hbEZ1bmN0aW9uTmFtZSA9IGZyYW1lLmdldEZ1bmN0aW9uTmFtZTtcbiAgICBmcmFtZS5nZXRGdW5jdGlvbk5hbWUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHBvc2l0aW9uLm5hbWUgfHwgb3JpZ2luYWxGdW5jdGlvbk5hbWUoKTsgfTtcbiAgICBmcmFtZS5nZXRGaWxlTmFtZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcG9zaXRpb24uc291cmNlOyB9O1xuICAgIGZyYW1lLmdldExpbmVOdW1iZXIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHBvc2l0aW9uLmxpbmU7IH07XG4gICAgZnJhbWUuZ2V0Q29sdW1uTnVtYmVyID0gZnVuY3Rpb24oKSB7IHJldHVybiBwb3NpdGlvbi5jb2x1bW4gKyAxOyB9O1xuICAgIGZyYW1lLmdldFNjcmlwdE5hbWVPclNvdXJjZVVSTCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcG9zaXRpb24uc291cmNlOyB9O1xuICAgIHJldHVybiBmcmFtZTtcbiAgfVxuXG4gIC8vIENvZGUgY2FsbGVkIHVzaW5nIGV2YWwoKSBuZWVkcyBzcGVjaWFsIGhhbmRsaW5nXG4gIHZhciBvcmlnaW4gPSBmcmFtZS5pc0V2YWwoKSAmJiBmcmFtZS5nZXRFdmFsT3JpZ2luKCk7XG4gIGlmIChvcmlnaW4pIHtcbiAgICBvcmlnaW4gPSBtYXBFdmFsT3JpZ2luKG9yaWdpbik7XG4gICAgZnJhbWUgPSBjbG9uZUNhbGxTaXRlKGZyYW1lKTtcbiAgICBmcmFtZS5nZXRFdmFsT3JpZ2luID0gZnVuY3Rpb24oKSB7IHJldHVybiBvcmlnaW47IH07XG4gICAgcmV0dXJuIGZyYW1lO1xuICB9XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiB3ZSB3ZXJlIHVuYWJsZSB0byBjaGFuZ2UgdGhlIHNvdXJjZSBwb3NpdGlvblxuICByZXR1cm4gZnJhbWU7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgcGFydCBvZiB0aGUgVjggc3RhY2sgdHJhY2UgQVBJLCBmb3IgbW9yZSBpbmZvIHNlZTpcbi8vIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC93aWtpL0phdmFTY3JpcHRTdGFja1RyYWNlQXBpXG5mdW5jdGlvbiBwcmVwYXJlU3RhY2tUcmFjZShlcnJvciwgc3RhY2spIHtcbiAgaWYgKGVtcHR5Q2FjaGVCZXR3ZWVuT3BlcmF0aW9ucykge1xuICAgIGZpbGVDb250ZW50c0NhY2hlID0ge307XG4gICAgc291cmNlTWFwQ2FjaGUgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBlcnJvciArIHN0YWNrLm1hcChmdW5jdGlvbihmcmFtZSkge1xuICAgIHJldHVybiAnXFxuICAgIGF0ICcgKyB3cmFwQ2FsbFNpdGUoZnJhbWUpO1xuICB9KS5qb2luKCcnKTtcbn1cblxuLy8gR2VuZXJhdGUgcG9zaXRpb24gYW5kIHNuaXBwZXQgb2Ygb3JpZ2luYWwgc291cmNlIHdpdGggcG9pbnRlclxuZnVuY3Rpb24gZ2V0RXJyb3JTb3VyY2UoZXJyb3IpIHtcbiAgdmFyIG1hdGNoID0gL1xcbiAgICBhdCBbXihdKyBcXCgoLiopOihcXGQrKTooXFxkKylcXCkvLmV4ZWMoZXJyb3Iuc3RhY2spO1xuICBpZiAobWF0Y2gpIHtcbiAgICB2YXIgc291cmNlID0gbWF0Y2hbMV07XG4gICAgdmFyIGxpbmUgPSArbWF0Y2hbMl07XG4gICAgdmFyIGNvbHVtbiA9ICttYXRjaFszXTtcblxuICAgIC8vIFN1cHBvcnQgdGhlIGlubGluZSBzb3VyY2VDb250ZW50cyBpbnNpZGUgdGhlIHNvdXJjZSBtYXBcbiAgICB2YXIgY29udGVudHMgPSBmaWxlQ29udGVudHNDYWNoZVtzb3VyY2VdO1xuXG4gICAgLy8gU3VwcG9ydCBmaWxlcyBvbiBkaXNrXG4gICAgaWYgKCFjb250ZW50cyAmJiBmcyAmJiBmcy5leGlzdHNTeW5jKHNvdXJjZSkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnRlbnRzID0gZnMucmVhZEZpbGVTeW5jKHNvdXJjZSwgJ3V0ZjgnKTtcbiAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgIGNvbnRlbnRzID0gJyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRm9ybWF0IHRoZSBsaW5lIGZyb20gdGhlIG9yaWdpbmFsIHNvdXJjZSBjb2RlIGxpa2Ugbm9kZSBkb2VzXG4gICAgaWYgKGNvbnRlbnRzKSB7XG4gICAgICB2YXIgY29kZSA9IGNvbnRlbnRzLnNwbGl0KC8oPzpcXHJcXG58XFxyfFxcbikvKVtsaW5lIC0gMV07XG4gICAgICBpZiAoY29kZSkge1xuICAgICAgICByZXR1cm4gc291cmNlICsgJzonICsgbGluZSArICdcXG4nICsgY29kZSArICdcXG4nICtcbiAgICAgICAgICBuZXcgQXJyYXkoY29sdW1uKS5qb2luKCcgJykgKyAnXic7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBwcmludEVycm9yQW5kRXhpdCAoZXJyb3IpIHtcbiAgdmFyIHNvdXJjZSA9IGdldEVycm9yU291cmNlKGVycm9yKTtcblxuICAvLyBFbnN1cmUgZXJyb3IgaXMgcHJpbnRlZCBzeW5jaHJvbm91c2x5IGFuZCBub3QgdHJ1bmNhdGVkXG4gIGlmIChwcm9jZXNzLnN0ZGVyci5faGFuZGxlICYmIHByb2Nlc3Muc3RkZXJyLl9oYW5kbGUuc2V0QmxvY2tpbmcpIHtcbiAgICBwcm9jZXNzLnN0ZGVyci5faGFuZGxlLnNldEJsb2NraW5nKHRydWUpO1xuICB9XG5cbiAgaWYgKHNvdXJjZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoKTtcbiAgICBjb25zb2xlLmVycm9yKHNvdXJjZSk7XG4gIH1cblxuICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrKTtcbiAgcHJvY2Vzcy5leGl0KDEpO1xufVxuXG5mdW5jdGlvbiBzaGltRW1pdFVuY2F1Z2h0RXhjZXB0aW9uICgpIHtcbiAgdmFyIG9yaWdFbWl0ID0gcHJvY2Vzcy5lbWl0O1xuXG4gIHByb2Nlc3MuZW1pdCA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT09ICd1bmNhdWdodEV4Y2VwdGlvbicpIHtcbiAgICAgIHZhciBoYXNTdGFjayA9IChhcmd1bWVudHNbMV0gJiYgYXJndW1lbnRzWzFdLnN0YWNrKTtcbiAgICAgIHZhciBoYXNMaXN0ZW5lcnMgPSAodGhpcy5saXN0ZW5lcnModHlwZSkubGVuZ3RoID4gMCk7XG5cbiAgICAgIGlmIChoYXNTdGFjayAmJiAhaGFzTGlzdGVuZXJzKSB7XG4gICAgICAgIHJldHVybiBwcmludEVycm9yQW5kRXhpdChhcmd1bWVudHNbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcmlnRW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG52YXIgb3JpZ2luYWxSZXRyaWV2ZUZpbGVIYW5kbGVycyA9IHJldHJpZXZlRmlsZUhhbmRsZXJzLnNsaWNlKDApO1xudmFyIG9yaWdpbmFsUmV0cmlldmVNYXBIYW5kbGVycyA9IHJldHJpZXZlTWFwSGFuZGxlcnMuc2xpY2UoMCk7XG5cbmV4cG9ydHMud3JhcENhbGxTaXRlID0gd3JhcENhbGxTaXRlO1xuZXhwb3J0cy5nZXRFcnJvclNvdXJjZSA9IGdldEVycm9yU291cmNlO1xuZXhwb3J0cy5tYXBTb3VyY2VQb3NpdGlvbiA9IG1hcFNvdXJjZVBvc2l0aW9uO1xuZXhwb3J0cy5yZXRyaWV2ZVNvdXJjZU1hcCA9IHJldHJpZXZlU291cmNlTWFwO1xuXG5leHBvcnRzLmluc3RhbGwgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmIChvcHRpb25zLmVudmlyb25tZW50KSB7XG4gICAgZW52aXJvbm1lbnQgPSBvcHRpb25zLmVudmlyb25tZW50O1xuICAgIGlmIChbXCJub2RlXCIsIFwiYnJvd3NlclwiLCBcImF1dG9cIl0uaW5kZXhPZihlbnZpcm9ubWVudCkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlbnZpcm9ubWVudCBcIiArIGVudmlyb25tZW50ICsgXCIgd2FzIHVua25vd24uIEF2YWlsYWJsZSBvcHRpb25zIGFyZSB7YXV0bywgYnJvd3Nlciwgbm9kZX1cIilcbiAgICB9XG4gIH1cblxuICAvLyBBbGxvdyBzb3VyY2VzIHRvIGJlIGZvdW5kIGJ5IG1ldGhvZHMgb3RoZXIgdGhhbiByZWFkaW5nIHRoZSBmaWxlc1xuICAvLyBkaXJlY3RseSBmcm9tIGRpc2suXG4gIGlmIChvcHRpb25zLnJldHJpZXZlRmlsZSkge1xuICAgIGlmIChvcHRpb25zLm92ZXJyaWRlUmV0cmlldmVGaWxlKSB7XG4gICAgICByZXRyaWV2ZUZpbGVIYW5kbGVycy5sZW5ndGggPSAwO1xuICAgIH1cblxuICAgIHJldHJpZXZlRmlsZUhhbmRsZXJzLnVuc2hpZnQob3B0aW9ucy5yZXRyaWV2ZUZpbGUpO1xuICB9XG5cbiAgLy8gQWxsb3cgc291cmNlIG1hcHMgdG8gYmUgZm91bmQgYnkgbWV0aG9kcyBvdGhlciB0aGFuIHJlYWRpbmcgdGhlIGZpbGVzXG4gIC8vIGRpcmVjdGx5IGZyb20gZGlzay5cbiAgaWYgKG9wdGlvbnMucmV0cmlldmVTb3VyY2VNYXApIHtcbiAgICBpZiAob3B0aW9ucy5vdmVycmlkZVJldHJpZXZlU291cmNlTWFwKSB7XG4gICAgICByZXRyaWV2ZU1hcEhhbmRsZXJzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgcmV0cmlldmVNYXBIYW5kbGVycy51bnNoaWZ0KG9wdGlvbnMucmV0cmlldmVTb3VyY2VNYXApO1xuICB9XG5cbiAgLy8gU3VwcG9ydCBydW50aW1lIHRyYW5zcGlsZXJzIHRoYXQgaW5jbHVkZSBpbmxpbmUgc291cmNlIG1hcHNcbiAgaWYgKG9wdGlvbnMuaG9va1JlcXVpcmUgJiYgIWlzSW5Ccm93c2VyKCkpIHtcbiAgICB2YXIgTW9kdWxlO1xuICAgIHRyeSB7XG4gICAgICBNb2R1bGUgPSByZXF1aXJlKCdtb2R1bGUnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIE5PUDogTG9hZGluZyBpbiBjYXRjaCBibG9jayB0byBjb252ZXJ0IHdlYnBhY2sgZXJyb3IgdG8gd2FybmluZy5cbiAgICB9XG4gICAgdmFyICRjb21waWxlID0gTW9kdWxlLnByb3RvdHlwZS5fY29tcGlsZTtcblxuICAgIGlmICghJGNvbXBpbGUuX19zb3VyY2VNYXBTdXBwb3J0KSB7XG4gICAgICBNb2R1bGUucHJvdG90eXBlLl9jb21waWxlID0gZnVuY3Rpb24oY29udGVudCwgZmlsZW5hbWUpIHtcbiAgICAgICAgZmlsZUNvbnRlbnRzQ2FjaGVbZmlsZW5hbWVdID0gY29udGVudDtcbiAgICAgICAgc291cmNlTWFwQ2FjaGVbZmlsZW5hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gJGNvbXBpbGUuY2FsbCh0aGlzLCBjb250ZW50LCBmaWxlbmFtZSk7XG4gICAgICB9O1xuXG4gICAgICBNb2R1bGUucHJvdG90eXBlLl9jb21waWxlLl9fc291cmNlTWFwU3VwcG9ydCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29uZmlndXJlIG9wdGlvbnNcbiAgaWYgKCFlbXB0eUNhY2hlQmV0d2Vlbk9wZXJhdGlvbnMpIHtcbiAgICBlbXB0eUNhY2hlQmV0d2Vlbk9wZXJhdGlvbnMgPSAnZW1wdHlDYWNoZUJldHdlZW5PcGVyYXRpb25zJyBpbiBvcHRpb25zID9cbiAgICAgIG9wdGlvbnMuZW1wdHlDYWNoZUJldHdlZW5PcGVyYXRpb25zIDogZmFsc2U7XG4gIH1cblxuICAvLyBJbnN0YWxsIHRoZSBlcnJvciByZWZvcm1hdHRlclxuICBpZiAoIWVycm9yRm9ybWF0dGVySW5zdGFsbGVkKSB7XG4gICAgZXJyb3JGb3JtYXR0ZXJJbnN0YWxsZWQgPSB0cnVlO1xuICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJlcGFyZVN0YWNrVHJhY2U7XG4gIH1cblxuICBpZiAoIXVuY2F1Z2h0U2hpbUluc3RhbGxlZCkge1xuICAgIHZhciBpbnN0YWxsSGFuZGxlciA9ICdoYW5kbGVVbmNhdWdodEV4Y2VwdGlvbnMnIGluIG9wdGlvbnMgP1xuICAgICAgb3B0aW9ucy5oYW5kbGVVbmNhdWdodEV4Y2VwdGlvbnMgOiB0cnVlO1xuXG4gICAgLy8gUHJvdmlkZSB0aGUgb3B0aW9uIHRvIG5vdCBpbnN0YWxsIHRoZSB1bmNhdWdodCBleGNlcHRpb24gaGFuZGxlci4gVGhpcyBpc1xuICAgIC8vIHRvIHN1cHBvcnQgb3RoZXIgdW5jYXVnaHQgZXhjZXB0aW9uIGhhbmRsZXJzIChpbiB0ZXN0IGZyYW1ld29ya3MsIGZvclxuICAgIC8vIGV4YW1wbGUpLiBJZiB0aGlzIGhhbmRsZXIgaXMgbm90IGluc3RhbGxlZCBhbmQgdGhlcmUgYXJlIG5vIG90aGVyIHVuY2F1Z2h0XG4gICAgLy8gZXhjZXB0aW9uIGhhbmRsZXJzLCB1bmNhdWdodCBleGNlcHRpb25zIHdpbGwgYmUgY2F1Z2h0IGJ5IG5vZGUncyBidWlsdC1pblxuICAgIC8vIGV4Y2VwdGlvbiBoYW5kbGVyIGFuZCB0aGUgcHJvY2VzcyB3aWxsIHN0aWxsIGJlIHRlcm1pbmF0ZWQuIEhvd2V2ZXIsIHRoZVxuICAgIC8vIGdlbmVyYXRlZCBKYXZhU2NyaXB0IGNvZGUgd2lsbCBiZSBzaG93biBhYm92ZSB0aGUgc3RhY2sgdHJhY2UgaW5zdGVhZCBvZlxuICAgIC8vIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29kZS5cbiAgICBpZiAoaW5zdGFsbEhhbmRsZXIgJiYgaGFzR2xvYmFsUHJvY2Vzc0V2ZW50RW1pdHRlcigpKSB7XG4gICAgICB1bmNhdWdodFNoaW1JbnN0YWxsZWQgPSB0cnVlO1xuICAgICAgc2hpbUVtaXRVbmNhdWdodEV4Y2VwdGlvbigpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0cy5yZXNldFJldHJpZXZlSGFuZGxlcnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0cmlldmVGaWxlSGFuZGxlcnMubGVuZ3RoID0gMDtcbiAgcmV0cmlldmVNYXBIYW5kbGVycy5sZW5ndGggPSAwO1xuXG4gIHJldHJpZXZlRmlsZUhhbmRsZXJzID0gb3JpZ2luYWxSZXRyaWV2ZUZpbGVIYW5kbGVycy5zbGljZSgwKTtcbiAgcmV0cmlldmVNYXBIYW5kbGVycyA9IG9yaWdpbmFsUmV0cmlldmVNYXBIYW5kbGVycy5zbGljZSgwKTtcbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAwOS0yMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRS50eHQgb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG5leHBvcnRzLlNvdXJjZU1hcENvbnN1bWVyID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1jb25zdW1lcicpLlNvdXJjZU1hcENvbnN1bWVyO1xuZXhwb3J0cy5Tb3VyY2VOb2RlID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW5vZGUnKS5Tb3VyY2VOb2RlO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgaW50VG9DaGFyTWFwID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLnNwbGl0KCcnKTtcblxuLyoqXG4gKiBFbmNvZGUgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2Ugb2YgMCB0byA2MyB0byBhIHNpbmdsZSBiYXNlIDY0IGRpZ2l0LlxuICovXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgaWYgKDAgPD0gbnVtYmVyICYmIG51bWJlciA8IGludFRvQ2hhck1hcC5sZW5ndGgpIHtcbiAgICByZXR1cm4gaW50VG9DaGFyTWFwW251bWJlcl07XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk11c3QgYmUgYmV0d2VlbiAwIGFuZCA2MzogXCIgKyBudW1iZXIpO1xufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBzaW5nbGUgYmFzZSA2NCBjaGFyYWN0ZXIgY29kZSBkaWdpdCB0byBhbiBpbnRlZ2VyLiBSZXR1cm5zIC0xIG9uXG4gKiBmYWlsdXJlLlxuICovXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIChjaGFyQ29kZSkge1xuICB2YXIgYmlnQSA9IDY1OyAgICAgLy8gJ0EnXG4gIHZhciBiaWdaID0gOTA7ICAgICAvLyAnWidcblxuICB2YXIgbGl0dGxlQSA9IDk3OyAgLy8gJ2EnXG4gIHZhciBsaXR0bGVaID0gMTIyOyAvLyAneidcblxuICB2YXIgemVybyA9IDQ4OyAgICAgLy8gJzAnXG4gIHZhciBuaW5lID0gNTc7ICAgICAvLyAnOSdcblxuICB2YXIgcGx1cyA9IDQzOyAgICAgLy8gJysnXG4gIHZhciBzbGFzaCA9IDQ3OyAgICAvLyAnLydcblxuICB2YXIgbGl0dGxlT2Zmc2V0ID0gMjY7XG4gIHZhciBudW1iZXJPZmZzZXQgPSA1MjtcblxuICAvLyAwIC0gMjU6IEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXG4gIGlmIChiaWdBIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IGJpZ1opIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gYmlnQSk7XG4gIH1cblxuICAvLyAyNiAtIDUxOiBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elxuICBpZiAobGl0dGxlQSA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBsaXR0bGVaKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIGxpdHRsZUEgKyBsaXR0bGVPZmZzZXQpO1xuICB9XG5cbiAgLy8gNTIgLSA2MTogMDEyMzQ1Njc4OVxuICBpZiAoemVybyA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBuaW5lKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIHplcm8gKyBudW1iZXJPZmZzZXQpO1xuICB9XG5cbiAgLy8gNjI6ICtcbiAgaWYgKGNoYXJDb2RlID09IHBsdXMpIHtcbiAgICByZXR1cm4gNjI7XG4gIH1cblxuICAvLyA2MzogL1xuICBpZiAoY2hhckNvZGUgPT0gc2xhc2gpIHtcbiAgICByZXR1cm4gNjM7XG4gIH1cblxuICAvLyBJbnZhbGlkIGJhc2U2NCBkaWdpdC5cbiAgcmV0dXJuIC0xO1xufTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxNCBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciBtYXBwaW5nQiBpcyBhZnRlciBtYXBwaW5nQSB3aXRoIHJlc3BlY3QgdG8gZ2VuZXJhdGVkXG4gKiBwb3NpdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVkUG9zaXRpb25BZnRlcihtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgLy8gT3B0aW1pemVkIGZvciBtb3N0IGNvbW1vbiBjYXNlXG4gIHZhciBsaW5lQSA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmU7XG4gIHZhciBsaW5lQiA9IG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIHZhciBjb2x1bW5BID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uO1xuICB2YXIgY29sdW1uQiA9IG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgcmV0dXJuIGxpbmVCID4gbGluZUEgfHwgbGluZUIgPT0gbGluZUEgJiYgY29sdW1uQiA+PSBjb2x1bW5BIHx8XG4gICAgICAgICB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKG1hcHBpbmdBLCBtYXBwaW5nQikgPD0gMDtcbn1cblxuLyoqXG4gKiBBIGRhdGEgc3RydWN0dXJlIHRvIHByb3ZpZGUgYSBzb3J0ZWQgdmlldyBvZiBhY2N1bXVsYXRlZCBtYXBwaW5ncyBpbiBhXG4gKiBwZXJmb3JtYW5jZSBjb25zY2lvdXMgbWFubmVyLiBJdCB0cmFkZXMgYSBuZWdsaWJhYmxlIG92ZXJoZWFkIGluIGdlbmVyYWxcbiAqIGNhc2UgZm9yIGEgbGFyZ2Ugc3BlZWR1cCBpbiBjYXNlIG9mIG1hcHBpbmdzIGJlaW5nIGFkZGVkIGluIG9yZGVyLlxuICovXG5mdW5jdGlvbiBNYXBwaW5nTGlzdCgpIHtcbiAgdGhpcy5fYXJyYXkgPSBbXTtcbiAgdGhpcy5fc29ydGVkID0gdHJ1ZTtcbiAgLy8gU2VydmVzIGFzIGluZmltdW1cbiAgdGhpcy5fbGFzdCA9IHtnZW5lcmF0ZWRMaW5lOiAtMSwgZ2VuZXJhdGVkQ29sdW1uOiAwfTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIHRocm91Z2ggaW50ZXJuYWwgaXRlbXMuIFRoaXMgbWV0aG9kIHRha2VzIHRoZSBzYW1lIGFyZ3VtZW50cyB0aGF0XG4gKiBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIHRha2VzLlxuICpcbiAqIE5PVEU6IFRoZSBvcmRlciBvZiB0aGUgbWFwcGluZ3MgaXMgTk9UIGd1YXJhbnRlZWQuXG4gKi9cbk1hcHBpbmdMaXN0LnByb3RvdHlwZS51bnNvcnRlZEZvckVhY2ggPVxuICBmdW5jdGlvbiBNYXBwaW5nTGlzdF9mb3JFYWNoKGFDYWxsYmFjaywgYVRoaXNBcmcpIHtcbiAgICB0aGlzLl9hcnJheS5mb3JFYWNoKGFDYWxsYmFjaywgYVRoaXNBcmcpO1xuICB9O1xuXG4vKipcbiAqIEFkZCB0aGUgZ2l2ZW4gc291cmNlIG1hcHBpbmcuXG4gKlxuICogQHBhcmFtIE9iamVjdCBhTWFwcGluZ1xuICovXG5NYXBwaW5nTGlzdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gTWFwcGluZ0xpc3RfYWRkKGFNYXBwaW5nKSB7XG4gIGlmIChnZW5lcmF0ZWRQb3NpdGlvbkFmdGVyKHRoaXMuX2xhc3QsIGFNYXBwaW5nKSkge1xuICAgIHRoaXMuX2xhc3QgPSBhTWFwcGluZztcbiAgICB0aGlzLl9hcnJheS5wdXNoKGFNYXBwaW5nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9zb3J0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9hcnJheS5wdXNoKGFNYXBwaW5nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmbGF0LCBzb3J0ZWQgYXJyYXkgb2YgbWFwcGluZ3MuIFRoZSBtYXBwaW5ncyBhcmUgc29ydGVkIGJ5XG4gKiBnZW5lcmF0ZWQgcG9zaXRpb24uXG4gKlxuICogV0FSTklORzogVGhpcyBtZXRob2QgcmV0dXJucyBpbnRlcm5hbCBkYXRhIHdpdGhvdXQgY29weWluZywgZm9yXG4gKiBwZXJmb3JtYW5jZS4gVGhlIHJldHVybiB2YWx1ZSBtdXN0IE5PVCBiZSBtdXRhdGVkLCBhbmQgc2hvdWxkIGJlIHRyZWF0ZWQgYXNcbiAqIGFuIGltbXV0YWJsZSBib3Jyb3cuIElmIHlvdSB3YW50IHRvIHRha2Ugb3duZXJzaGlwLCB5b3UgbXVzdCBtYWtlIHlvdXIgb3duXG4gKiBjb3B5LlxuICovXG5NYXBwaW5nTGlzdC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIE1hcHBpbmdMaXN0X3RvQXJyYXkoKSB7XG4gIGlmICghdGhpcy5fc29ydGVkKSB7XG4gICAgdGhpcy5fYXJyYXkuc29ydCh1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKTtcbiAgICB0aGlzLl9zb3J0ZWQgPSB0cnVlO1xuICB9XG4gIHJldHVybiB0aGlzLl9hcnJheTtcbn07XG5cbmV4cG9ydHMuTWFwcGluZ0xpc3QgPSBNYXBwaW5nTGlzdDtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBiaW5hcnlTZWFyY2ggPSByZXF1aXJlKCcuL2JpbmFyeS1zZWFyY2gnKTtcbnZhciBBcnJheVNldCA9IHJlcXVpcmUoJy4vYXJyYXktc2V0JykuQXJyYXlTZXQ7XG52YXIgYmFzZTY0VkxRID0gcmVxdWlyZSgnLi9iYXNlNjQtdmxxJyk7XG52YXIgcXVpY2tTb3J0ID0gcmVxdWlyZSgnLi9xdWljay1zb3J0JykucXVpY2tTb3J0O1xuXG5mdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgc291cmNlTWFwID0gdXRpbC5wYXJzZVNvdXJjZU1hcElucHV0KGFTb3VyY2VNYXApO1xuICB9XG5cbiAgcmV0dXJuIHNvdXJjZU1hcC5zZWN0aW9ucyAhPSBudWxsXG4gICAgPyBuZXcgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTClcbiAgICA6IG5ldyBCYXNpY1NvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCk7XG59XG5cblNvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAgPSBmdW5jdGlvbihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHJldHVybiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCk7XG59XG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vLyBgX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kIGBfX29yaWdpbmFsTWFwcGluZ3NgIGFyZSBhcnJheXMgdGhhdCBob2xkIHRoZVxuLy8gcGFyc2VkIG1hcHBpbmcgY29vcmRpbmF0ZXMgZnJvbSB0aGUgc291cmNlIG1hcCdzIFwibWFwcGluZ3NcIiBhdHRyaWJ1dGUuIFRoZXlcbi8vIGFyZSBsYXppbHkgaW5zdGFudGlhdGVkLCBhY2Nlc3NlZCB2aWEgdGhlIGBfZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuLy8gYF9vcmlnaW5hbE1hcHBpbmdzYCBnZXR0ZXJzIHJlc3BlY3RpdmVseSwgYW5kIHdlIG9ubHkgcGFyc2UgdGhlIG1hcHBpbmdzXG4vLyBhbmQgY3JlYXRlIHRoZXNlIGFycmF5cyBvbmNlIHF1ZXJpZWQgZm9yIGEgc291cmNlIGxvY2F0aW9uLiBXZSBqdW1wIHRocm91Z2hcbi8vIHRoZXNlIGhvb3BzIGJlY2F1c2UgdGhlcmUgY2FuIGJlIG1hbnkgdGhvdXNhbmRzIG9mIG1hcHBpbmdzLCBhbmQgcGFyc2luZ1xuLy8gdGhlbSBpcyBleHBlbnNpdmUsIHNvIHdlIG9ubHkgd2FudCB0byBkbyBpdCBpZiB3ZSBtdXN0LlxuLy9cbi8vIEVhY2ggb2JqZWN0IGluIHRoZSBhcnJheXMgaXMgb2YgdGhlIGZvcm06XG4vL1xuLy8gICAgIHtcbi8vICAgICAgIGdlbmVyYXRlZExpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBnZW5lcmF0ZWRDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIHNvdXJjZTogVGhlIHBhdGggdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlIHRoYXQgZ2VuZXJhdGVkIHRoaXNcbi8vICAgICAgICAgICAgICAgY2h1bmsgb2YgY29kZSxcbi8vICAgICAgIG9yaWdpbmFsTGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuLy8gICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kcyB0byB0aGlzIGNodW5rIG9mIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgb3JpZ2luYWxDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuLy8gICAgICAgICAgICAgICAgICAgICAgIGNvcnJlc3BvbmRzIHRvIHRoaXMgY2h1bmsgb2YgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBuYW1lOiBUaGUgbmFtZSBvZiB0aGUgb3JpZ2luYWwgc3ltYm9sIHdoaWNoIGdlbmVyYXRlZCB0aGlzIGNodW5rIG9mXG4vLyAgICAgICAgICAgICBjb2RlLlxuLy8gICAgIH1cbi8vXG4vLyBBbGwgcHJvcGVydGllcyBleGNlcHQgZm9yIGBnZW5lcmF0ZWRMaW5lYCBhbmQgYGdlbmVyYXRlZENvbHVtbmAgY2FuIGJlXG4vLyBgbnVsbGAuXG4vL1xuLy8gYF9nZW5lcmF0ZWRNYXBwaW5nc2AgaXMgb3JkZXJlZCBieSB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucy5cbi8vXG4vLyBgX29yaWdpbmFsTWFwcGluZ3NgIGlzIG9yZGVyZWQgYnkgdGhlIG9yaWdpbmFsIHBvc2l0aW9ucy5cblxuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBudWxsO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ19nZW5lcmF0ZWRNYXBwaW5ncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncykge1xuICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzO1xuICB9XG59KTtcblxuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9fb3JpZ2luYWxNYXBwaW5ncyA9IG51bGw7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnX29yaWdpbmFsTWFwcGluZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncykge1xuICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fX29yaWdpbmFsTWFwcGluZ3M7XG4gIH1cbn0pO1xuXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yKGFTdHIsIGluZGV4KSB7XG4gICAgdmFyIGMgPSBhU3RyLmNoYXJBdChpbmRleCk7XG4gICAgcmV0dXJuIGMgPT09IFwiO1wiIHx8IGMgPT09IFwiLFwiO1xuICB9O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlN1YmNsYXNzZXMgbXVzdCBpbXBsZW1lbnQgX3BhcnNlTWFwcGluZ3NcIik7XG4gIH07XG5cblNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUiA9IDE7XG5Tb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUiA9IDI7XG5cblNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EID0gMTtcblNvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EID0gMjtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgZWFjaCBtYXBwaW5nIGJldHdlZW4gYW4gb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uIGFuZCBhXG4gKiBnZW5lcmF0ZWQgbGluZS9jb2x1bW4gaW4gdGhpcyBzb3VyY2UgbWFwLlxuICpcbiAqIEBwYXJhbSBGdW5jdGlvbiBhQ2FsbGJhY2tcbiAqICAgICAgICBUaGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2l0aCBlYWNoIG1hcHBpbmcuXG4gKiBAcGFyYW0gT2JqZWN0IGFDb250ZXh0XG4gKiAgICAgICAgT3B0aW9uYWwuIElmIHNwZWNpZmllZCwgdGhpcyBvYmplY3Qgd2lsbCBiZSB0aGUgdmFsdWUgb2YgYHRoaXNgIGV2ZXJ5XG4gKiAgICAgICAgdGltZSB0aGF0IGBhQ2FsbGJhY2tgIGlzIGNhbGxlZC5cbiAqIEBwYXJhbSBhT3JkZXJcbiAqICAgICAgICBFaXRoZXIgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAgb3JcbiAqICAgICAgICBgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVJgLiBTcGVjaWZpZXMgd2hldGhlciB5b3Ugd2FudCB0b1xuICogICAgICAgIGl0ZXJhdGUgb3ZlciB0aGUgbWFwcGluZ3Mgc29ydGVkIGJ5IHRoZSBnZW5lcmF0ZWQgZmlsZSdzIGxpbmUvY29sdW1uXG4gKiAgICAgICAgb3JkZXIgb3IgdGhlIG9yaWdpbmFsJ3Mgc291cmNlL2xpbmUvY29sdW1uIG9yZGVyLCByZXNwZWN0aXZlbHkuIERlZmF1bHRzIHRvXG4gKiAgICAgICAgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5lYWNoTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2VhY2hNYXBwaW5nKGFDYWxsYmFjaywgYUNvbnRleHQsIGFPcmRlcikge1xuICAgIHZhciBjb250ZXh0ID0gYUNvbnRleHQgfHwgbnVsbDtcbiAgICB2YXIgb3JkZXIgPSBhT3JkZXIgfHwgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSO1xuXG4gICAgdmFyIG1hcHBpbmdzO1xuICAgIHN3aXRjaCAob3JkZXIpIHtcbiAgICBjYXNlIFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUjpcbiAgICAgIG1hcHBpbmdzID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSOlxuICAgICAgbWFwcGluZ3MgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gb3JkZXIgb2YgaXRlcmF0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlUm9vdCA9IHRoaXMuc291cmNlUm9vdDtcbiAgICBtYXBwaW5ncy5tYXAoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBtYXBwaW5nLnNvdXJjZSA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl9zb3VyY2VzLmF0KG1hcHBpbmcuc291cmNlKTtcbiAgICAgIHNvdXJjZSA9IHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzb3VyY2VSb290LCBzb3VyY2UsIHRoaXMuX3NvdXJjZU1hcFVSTCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgZ2VuZXJhdGVkTGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lLFxuICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uLFxuICAgICAgICBvcmlnaW5hbExpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICBvcmlnaW5hbENvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgbmFtZTogbWFwcGluZy5uYW1lID09PSBudWxsID8gbnVsbCA6IHRoaXMuX25hbWVzLmF0KG1hcHBpbmcubmFtZSlcbiAgICAgIH07XG4gICAgfSwgdGhpcykuZm9yRWFjaChhQ2FsbGJhY2ssIGNvbnRleHQpO1xuICB9O1xuXG4vKipcbiAqIFJldHVybnMgYWxsIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gKiBsaW5lLCBhbmQgY29sdW1uIHByb3ZpZGVkLiBJZiBubyBjb2x1bW4gaXMgcHJvdmlkZWQsIHJldHVybnMgYWxsIG1hcHBpbmdzXG4gKiBjb3JyZXNwb25kaW5nIHRvIGEgZWl0aGVyIHRoZSBsaW5lIHdlIGFyZSBzZWFyY2hpbmcgZm9yIG9yIHRoZSBuZXh0XG4gKiBjbG9zZXN0IGxpbmUgdGhhdCBoYXMgYW55IG1hcHBpbmdzLiBPdGhlcndpc2UsIHJldHVybnMgYWxsIG1hcHBpbmdzXG4gKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBsaW5lIGFuZCBlaXRoZXIgdGhlIGNvbHVtbiB3ZSBhcmUgc2VhcmNoaW5nIGZvclxuICogb3IgdGhlIG5leHQgY2xvc2VzdCBjb2x1bW4gdGhhdCBoYXMgYW55IG9mZnNldHMuXG4gKlxuICogVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBPcHRpb25hbC4gdGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgIFRoZSBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKlxuICogYW5kIGFuIGFycmF5IG9mIG9iamVjdHMgaXMgcmV0dXJuZWQsIGVhY2ggd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICogICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmFsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2FsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvcihhQXJncykge1xuICAgIHZhciBsaW5lID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyk7XG5cbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIGV4YWN0IG1hdGNoLCBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZE1hcHBpbmdcbiAgICAvLyByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgY2xvc2VzdCBtYXBwaW5nIGxlc3MgdGhhbiB0aGUgbmVlZGxlLiBCeVxuICAgIC8vIHNldHRpbmcgbmVlZGxlLm9yaWdpbmFsQ29sdW1uIHRvIDAsIHdlIHRodXMgZmluZCB0aGUgbGFzdCBtYXBwaW5nIGZvclxuICAgIC8vIHRoZSBnaXZlbiBsaW5lLCBwcm92aWRlZCBzdWNoIGEgbWFwcGluZyBleGlzdHMuXG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIHNvdXJjZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnKSxcbiAgICAgIG9yaWdpbmFsTGluZTogbGluZSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicsIDApXG4gICAgfTtcblxuICAgIG5lZWRsZS5zb3VyY2UgPSB0aGlzLl9maW5kU291cmNlSW5kZXgobmVlZGxlLnNvdXJjZSk7XG4gICAgaWYgKG5lZWRsZS5zb3VyY2UgPCAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIG1hcHBpbmdzID0gW107XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhuZWVkbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxNYXBwaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yaWdpbmFsTGluZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JpZ2luYWxDb2x1bW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIGlmIChhQXJncy5jb2x1bW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgb3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmU7XG5cbiAgICAgICAgLy8gSXRlcmF0ZSB1bnRpbCBlaXRoZXIgd2UgcnVuIG91dCBvZiBtYXBwaW5ncywgb3Igd2UgcnVuIGludG9cbiAgICAgICAgLy8gYSBtYXBwaW5nIGZvciBhIGRpZmZlcmVudCBsaW5lIHRoYW4gdGhlIG9uZSB3ZSBmb3VuZC4gU2luY2VcbiAgICAgICAgLy8gbWFwcGluZ3MgYXJlIHNvcnRlZCwgdGhpcyBpcyBndWFyYW50ZWVkIHRvIGZpbmQgYWxsIG1hcHBpbmdzIGZvclxuICAgICAgICAvLyB0aGUgbGluZSB3ZSBmb3VuZC5cbiAgICAgICAgd2hpbGUgKG1hcHBpbmcgJiYgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09IG9yaWdpbmFsTGluZSkge1xuICAgICAgICAgIG1hcHBpbmdzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbKytpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgLy8gSXRlcmF0ZSB1bnRpbCBlaXRoZXIgd2UgcnVuIG91dCBvZiBtYXBwaW5ncywgb3Igd2UgcnVuIGludG9cbiAgICAgICAgLy8gYSBtYXBwaW5nIGZvciBhIGRpZmZlcmVudCBsaW5lIHRoYW4gdGhlIG9uZSB3ZSB3ZXJlIHNlYXJjaGluZyBmb3IuXG4gICAgICAgIC8vIFNpbmNlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHRoaXMgaXMgZ3VhcmFudGVlZCB0byBmaW5kIGFsbCBtYXBwaW5ncyBmb3JcbiAgICAgICAgLy8gdGhlIGxpbmUgd2UgYXJlIHNlYXJjaGluZyBmb3IuXG4gICAgICAgIHdoaWxlIChtYXBwaW5nICYmXG4gICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gbGluZSAmJlxuICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9PSBvcmlnaW5hbENvbHVtbikge1xuICAgICAgICAgIG1hcHBpbmdzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbKytpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWFwcGluZ3M7XG4gIH07XG5cbmV4cG9ydHMuU291cmNlTWFwQ29uc3VtZXIgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBBIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgaW5zdGFuY2UgcmVwcmVzZW50cyBhIHBhcnNlZCBzb3VyY2UgbWFwIHdoaWNoIHdlIGNhblxuICogcXVlcnkgZm9yIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvcmlnaW5hbCBmaWxlIHBvc2l0aW9ucyBieSBnaXZpbmcgaXQgYSBmaWxlXG4gKiBwb3NpdGlvbiBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAqXG4gKiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIHRoZSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yXG4gKiBhbHJlYWR5IHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNvdXJjZSBtYXBzIGhhdmUgdGhlXG4gKiBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAqXG4gKiAgIC0gdmVyc2lvbjogV2hpY2ggdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcCBzcGVjIHRoaXMgbWFwIGlzIGZvbGxvd2luZy5cbiAqICAgLSBzb3VyY2VzOiBBbiBhcnJheSBvZiBVUkxzIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gKiAgIC0gbmFtZXM6IEFuIGFycmF5IG9mIGlkZW50aWZpZXJzIHdoaWNoIGNhbiBiZSByZWZlcnJlbmNlZCBieSBpbmRpdmlkdWFsIG1hcHBpbmdzLlxuICogICAtIHNvdXJjZVJvb3Q6IE9wdGlvbmFsLiBUaGUgVVJMIHJvb3QgZnJvbSB3aGljaCBhbGwgc291cmNlcyBhcmUgcmVsYXRpdmUuXG4gKiAgIC0gc291cmNlc0NvbnRlbnQ6IE9wdGlvbmFsLiBBbiBhcnJheSBvZiBjb250ZW50cyBvZiB0aGUgb3JpZ2luYWwgc291cmNlIGZpbGVzLlxuICogICAtIG1hcHBpbmdzOiBBIHN0cmluZyBvZiBiYXNlNjQgVkxRcyB3aGljaCBjb250YWluIHRoZSBhY3R1YWwgbWFwcGluZ3MuXG4gKiAgIC0gZmlsZTogT3B0aW9uYWwuIFRoZSBnZW5lcmF0ZWQgZmlsZSB0aGlzIHNvdXJjZSBtYXAgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICpcbiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBzb3VyY2UgbWFwLCB0YWtlbiBmcm9tIHRoZSBzb3VyY2UgbWFwIHNwZWNbMF06XG4gKlxuICogICAgIHtcbiAqICAgICAgIHZlcnNpb24gOiAzLFxuICogICAgICAgZmlsZTogXCJvdXQuanNcIixcbiAqICAgICAgIHNvdXJjZVJvb3QgOiBcIlwiLFxuICogICAgICAgc291cmNlczogW1wiZm9vLmpzXCIsIFwiYmFyLmpzXCJdLFxuICogICAgICAgbmFtZXM6IFtcInNyY1wiLCBcIm1hcHNcIiwgXCJhcmVcIiwgXCJmdW5cIl0sXG4gKiAgICAgICBtYXBwaW5nczogXCJBQSxBQjs7QUJDREU7XCJcbiAqICAgICB9XG4gKlxuICogVGhlIHNlY29uZCBwYXJhbWV0ZXIsIGlmIGdpdmVuLCBpcyBhIHN0cmluZyB3aG9zZSB2YWx1ZSBpcyB0aGUgVVJMXG4gKiBhdCB3aGljaCB0aGUgc291cmNlIG1hcCB3YXMgZm91bmQuICBUaGlzIFVSTCBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlXG4gKiBzb3VyY2VzIGFycmF5LlxuICpcbiAqIFswXTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVTFSR0FlaFF3UnlwVVRvdkYxS1JscGlPRnplMGItXzJnYzZmQUgwS1kway9lZGl0P3BsaT0xI1xuICovXG5mdW5jdGlvbiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSB1dGlsLnBhcnNlU291cmNlTWFwSW5wdXQoYVNvdXJjZU1hcCk7XG4gIH1cblxuICB2YXIgdmVyc2lvbiA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3ZlcnNpb24nKTtcbiAgdmFyIHNvdXJjZXMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VzJyk7XG4gIC8vIFNhc3MgMy4zIGxlYXZlcyBvdXQgdGhlICduYW1lcycgYXJyYXksIHNvIHdlIGRldmlhdGUgZnJvbSB0aGUgc3BlYyAod2hpY2hcbiAgLy8gcmVxdWlyZXMgdGhlIGFycmF5KSB0byBwbGF5IG5pY2UgaGVyZS5cbiAgdmFyIG5hbWVzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnbmFtZXMnLCBbXSk7XG4gIHZhciBzb3VyY2VSb290ID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlUm9vdCcsIG51bGwpO1xuICB2YXIgc291cmNlc0NvbnRlbnQgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VzQ29udGVudCcsIG51bGwpO1xuICB2YXIgbWFwcGluZ3MgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdtYXBwaW5ncycpO1xuICB2YXIgZmlsZSA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ2ZpbGUnLCBudWxsKTtcblxuICAvLyBPbmNlIGFnYWluLCBTYXNzIGRldmlhdGVzIGZyb20gdGhlIHNwZWMgYW5kIHN1cHBsaWVzIHRoZSB2ZXJzaW9uIGFzIGFcbiAgLy8gc3RyaW5nIHJhdGhlciB0aGFuIGEgbnVtYmVyLCBzbyB3ZSB1c2UgbG9vc2UgZXF1YWxpdHkgY2hlY2tpbmcgaGVyZS5cbiAgaWYgKHZlcnNpb24gIT0gdGhpcy5fdmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICB9XG5cbiAgaWYgKHNvdXJjZVJvb3QpIHtcbiAgICBzb3VyY2VSb290ID0gdXRpbC5ub3JtYWxpemUoc291cmNlUm9vdCk7XG4gIH1cblxuICBzb3VyY2VzID0gc291cmNlc1xuICAgIC5tYXAoU3RyaW5nKVxuICAgIC8vIFNvbWUgc291cmNlIG1hcHMgcHJvZHVjZSByZWxhdGl2ZSBzb3VyY2UgcGF0aHMgbGlrZSBcIi4vZm9vLmpzXCIgaW5zdGVhZCBvZlxuICAgIC8vIFwiZm9vLmpzXCIuICBOb3JtYWxpemUgdGhlc2UgZmlyc3Qgc28gdGhhdCBmdXR1cmUgY29tcGFyaXNvbnMgd2lsbCBzdWNjZWVkLlxuICAgIC8vIFNlZSBidWd6aWwubGEvMTA5MDc2OC5cbiAgICAubWFwKHV0aWwubm9ybWFsaXplKVxuICAgIC8vIEFsd2F5cyBlbnN1cmUgdGhhdCBhYnNvbHV0ZSBzb3VyY2VzIGFyZSBpbnRlcm5hbGx5IHN0b3JlZCByZWxhdGl2ZSB0b1xuICAgIC8vIHRoZSBzb3VyY2Ugcm9vdCwgaWYgdGhlIHNvdXJjZSByb290IGlzIGFic29sdXRlLiBOb3QgZG9pbmcgdGhpcyB3b3VsZFxuICAgIC8vIGJlIHBhcnRpY3VsYXJseSBwcm9ibGVtYXRpYyB3aGVuIHRoZSBzb3VyY2Ugcm9vdCBpcyBhIHByZWZpeCBvZiB0aGVcbiAgICAvLyBzb3VyY2UgKHZhbGlkLCBidXQgd2h5Pz8pLiBTZWUgZ2l0aHViIGlzc3VlICMxOTkgYW5kIGJ1Z3ppbC5sYS8xMTg4OTgyLlxuICAgIC5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZVJvb3QgJiYgdXRpbC5pc0Fic29sdXRlKHNvdXJjZVJvb3QpICYmIHV0aWwuaXNBYnNvbHV0ZShzb3VyY2UpXG4gICAgICAgID8gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2UpXG4gICAgICAgIDogc291cmNlO1xuICAgIH0pO1xuXG4gIC8vIFBhc3MgYHRydWVgIGJlbG93IHRvIGFsbG93IGR1cGxpY2F0ZSBuYW1lcyBhbmQgc291cmNlcy4gV2hpbGUgc291cmNlIG1hcHNcbiAgLy8gYXJlIGludGVuZGVkIHRvIGJlIGNvbXByZXNzZWQgYW5kIGRlZHVwbGljYXRlZCwgdGhlIFR5cGVTY3JpcHQgY29tcGlsZXJcbiAgLy8gc29tZXRpbWVzIGdlbmVyYXRlcyBzb3VyY2UgbWFwcyB3aXRoIGR1cGxpY2F0ZXMgaW4gdGhlbS4gU2VlIEdpdGh1YiBpc3N1ZVxuICAvLyAjNzIgYW5kIGJ1Z3ppbC5sYS84ODk0OTIuXG4gIHRoaXMuX25hbWVzID0gQXJyYXlTZXQuZnJvbUFycmF5KG5hbWVzLm1hcChTdHJpbmcpLCB0cnVlKTtcbiAgdGhpcy5fc291cmNlcyA9IEFycmF5U2V0LmZyb21BcnJheShzb3VyY2VzLCB0cnVlKTtcblxuICB0aGlzLl9hYnNvbHV0ZVNvdXJjZXMgPSB0aGlzLl9zb3VyY2VzLnRvQXJyYXkoKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gdXRpbC5jb21wdXRlU291cmNlVVJMKHNvdXJjZVJvb3QsIHMsIGFTb3VyY2VNYXBVUkwpO1xuICB9KTtcblxuICB0aGlzLnNvdXJjZVJvb3QgPSBzb3VyY2VSb290O1xuICB0aGlzLnNvdXJjZXNDb250ZW50ID0gc291cmNlc0NvbnRlbnQ7XG4gIHRoaXMuX21hcHBpbmdzID0gbWFwcGluZ3M7XG4gIHRoaXMuX3NvdXJjZU1hcFVSTCA9IGFTb3VyY2VNYXBVUkw7XG4gIHRoaXMuZmlsZSA9IGZpbGU7XG59XG5cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3VtZXIgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGluZGV4IG9mIGEgc291cmNlLiAgUmV0dXJucyAtMSBpZiBub3RcbiAqIGZvdW5kLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZFNvdXJjZUluZGV4ID0gZnVuY3Rpb24oYVNvdXJjZSkge1xuICB2YXIgcmVsYXRpdmVTb3VyY2UgPSBhU291cmNlO1xuICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICByZWxhdGl2ZVNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5zb3VyY2VSb290LCByZWxhdGl2ZVNvdXJjZSk7XG4gIH1cblxuICBpZiAodGhpcy5fc291cmNlcy5oYXMocmVsYXRpdmVTb3VyY2UpKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvdXJjZXMuaW5kZXhPZihyZWxhdGl2ZVNvdXJjZSk7XG4gIH1cblxuICAvLyBNYXliZSBhU291cmNlIGlzIGFuIGFic29sdXRlIFVSTCBhcyByZXR1cm5lZCBieSB8c291cmNlc3wuICBJblxuICAvLyB0aGlzIGNhc2Ugd2UgY2FuJ3Qgc2ltcGx5IHVuZG8gdGhlIHRyYW5zZm9ybS5cbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLl9hYnNvbHV0ZVNvdXJjZXMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAodGhpcy5fYWJzb2x1dGVTb3VyY2VzW2ldID09IGFTb3VyY2UpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgQmFzaWNTb3VyY2VNYXBDb25zdW1lciBmcm9tIGEgU291cmNlTWFwR2VuZXJhdG9yLlxuICpcbiAqIEBwYXJhbSBTb3VyY2VNYXBHZW5lcmF0b3IgYVNvdXJjZU1hcFxuICogICAgICAgIFRoZSBzb3VyY2UgbWFwIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbiAqIEBwYXJhbSBTdHJpbmcgYVNvdXJjZU1hcFVSTFxuICogICAgICAgIFRoZSBVUkwgYXQgd2hpY2ggdGhlIHNvdXJjZSBtYXAgY2FuIGJlIGZvdW5kIChvcHRpb25hbClcbiAqIEByZXR1cm5zIEJhc2ljU291cmNlTWFwQ29uc3VtZXJcbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZnJvbVNvdXJjZU1hcChhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gICAgdmFyIHNtYyA9IE9iamVjdC5jcmVhdGUoQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuXG4gICAgdmFyIG5hbWVzID0gc21jLl9uYW1lcyA9IEFycmF5U2V0LmZyb21BcnJheShhU291cmNlTWFwLl9uYW1lcy50b0FycmF5KCksIHRydWUpO1xuICAgIHZhciBzb3VyY2VzID0gc21jLl9zb3VyY2VzID0gQXJyYXlTZXQuZnJvbUFycmF5KGFTb3VyY2VNYXAuX3NvdXJjZXMudG9BcnJheSgpLCB0cnVlKTtcbiAgICBzbWMuc291cmNlUm9vdCA9IGFTb3VyY2VNYXAuX3NvdXJjZVJvb3Q7XG4gICAgc21jLnNvdXJjZXNDb250ZW50ID0gYVNvdXJjZU1hcC5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudChzbWMuX3NvdXJjZXMudG9BcnJheSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21jLnNvdXJjZVJvb3QpO1xuICAgIHNtYy5maWxlID0gYVNvdXJjZU1hcC5fZmlsZTtcbiAgICBzbWMuX3NvdXJjZU1hcFVSTCA9IGFTb3VyY2VNYXBVUkw7XG4gICAgc21jLl9hYnNvbHV0ZVNvdXJjZXMgPSBzbWMuX3NvdXJjZXMudG9BcnJheSgpLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzbWMuc291cmNlUm9vdCwgcywgYVNvdXJjZU1hcFVSTCk7XG4gICAgfSk7XG5cbiAgICAvLyBCZWNhdXNlIHdlIGFyZSBtb2RpZnlpbmcgdGhlIGVudHJpZXMgKGJ5IGNvbnZlcnRpbmcgc3RyaW5nIHNvdXJjZXMgYW5kXG4gICAgLy8gbmFtZXMgdG8gaW5kaWNlcyBpbnRvIHRoZSBzb3VyY2VzIGFuZCBuYW1lcyBBcnJheVNldHMpLCB3ZSBoYXZlIHRvIG1ha2VcbiAgICAvLyBhIGNvcHkgb2YgdGhlIGVudHJ5IG9yIGVsc2UgYmFkIHRoaW5ncyBoYXBwZW4uIFNoYXJlZCBtdXRhYmxlIHN0YXRlXG4gICAgLy8gc3RyaWtlcyBhZ2FpbiEgU2VlIGdpdGh1YiBpc3N1ZSAjMTkxLlxuXG4gICAgdmFyIGdlbmVyYXRlZE1hcHBpbmdzID0gYVNvdXJjZU1hcC5fbWFwcGluZ3MudG9BcnJheSgpLnNsaWNlKCk7XG4gICAgdmFyIGRlc3RHZW5lcmF0ZWRNYXBwaW5ncyA9IHNtYy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgdmFyIGRlc3RPcmlnaW5hbE1hcHBpbmdzID0gc21jLl9fb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc3JjTWFwcGluZyA9IGdlbmVyYXRlZE1hcHBpbmdzW2ldO1xuICAgICAgdmFyIGRlc3RNYXBwaW5nID0gbmV3IE1hcHBpbmc7XG4gICAgICBkZXN0TWFwcGluZy5nZW5lcmF0ZWRMaW5lID0gc3JjTWFwcGluZy5nZW5lcmF0ZWRMaW5lO1xuICAgICAgZGVzdE1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uID0gc3JjTWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgIGlmIChzcmNNYXBwaW5nLnNvdXJjZSkge1xuICAgICAgICBkZXN0TWFwcGluZy5zb3VyY2UgPSBzb3VyY2VzLmluZGV4T2Yoc3JjTWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBkZXN0TWFwcGluZy5vcmlnaW5hbExpbmUgPSBzcmNNYXBwaW5nLm9yaWdpbmFsTGluZTtcbiAgICAgICAgZGVzdE1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBzcmNNYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIGlmIChzcmNNYXBwaW5nLm5hbWUpIHtcbiAgICAgICAgICBkZXN0TWFwcGluZy5uYW1lID0gbmFtZXMuaW5kZXhPZihzcmNNYXBwaW5nLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVzdE9yaWdpbmFsTWFwcGluZ3MucHVzaChkZXN0TWFwcGluZyk7XG4gICAgICB9XG5cbiAgICAgIGRlc3RHZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKGRlc3RNYXBwaW5nKTtcbiAgICB9XG5cbiAgICBxdWlja1NvcnQoc21jLl9fb3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG5cbiAgICByZXR1cm4gc21jO1xuICB9O1xuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIFRoZSBsaXN0IG9mIG9yaWdpbmFsIHNvdXJjZXMuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ3NvdXJjZXMnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9hYnNvbHV0ZVNvdXJjZXMuc2xpY2UoKTtcbiAgfVxufSk7XG5cbi8qKlxuICogUHJvdmlkZSB0aGUgSklUIHdpdGggYSBuaWNlIHNoYXBlIC8gaGlkZGVuIGNsYXNzLlxuICovXG5mdW5jdGlvbiBNYXBwaW5nKCkge1xuICB0aGlzLmdlbmVyYXRlZExpbmUgPSAwO1xuICB0aGlzLmdlbmVyYXRlZENvbHVtbiA9IDA7XG4gIHRoaXMuc291cmNlID0gbnVsbDtcbiAgdGhpcy5vcmlnaW5hbExpbmUgPSBudWxsO1xuICB0aGlzLm9yaWdpbmFsQ29sdW1uID0gbnVsbDtcbiAgdGhpcy5uYW1lID0gbnVsbDtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHZhciBnZW5lcmF0ZWRMaW5lID0gMTtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsTGluZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzTmFtZSA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFTdHIubGVuZ3RoO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNhY2hlZFNlZ21lbnRzID0ge307XG4gICAgdmFyIHRlbXAgPSB7fTtcbiAgICB2YXIgb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuICAgIHZhciBnZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgIHZhciBtYXBwaW5nLCBzdHIsIHNlZ21lbnQsIGVuZCwgdmFsdWU7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhU3RyLmNoYXJBdChpbmRleCkgPT09ICc7Jykge1xuICAgICAgICBnZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGFTdHIuY2hhckF0KGluZGV4KSA9PT0gJywnKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbWFwcGluZyA9IG5ldyBNYXBwaW5nKCk7XG4gICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9IGdlbmVyYXRlZExpbmU7XG5cbiAgICAgICAgLy8gQmVjYXVzZSBlYWNoIG9mZnNldCBpcyBlbmNvZGVkIHJlbGF0aXZlIHRvIHRoZSBwcmV2aW91cyBvbmUsXG4gICAgICAgIC8vIG1hbnkgc2VnbWVudHMgb2Z0ZW4gaGF2ZSB0aGUgc2FtZSBlbmNvZGluZy4gV2UgY2FuIGV4cGxvaXQgdGhpc1xuICAgICAgICAvLyBmYWN0IGJ5IGNhY2hpbmcgdGhlIHBhcnNlZCB2YXJpYWJsZSBsZW5ndGggZmllbGRzIG9mIGVhY2ggc2VnbWVudCxcbiAgICAgICAgLy8gYWxsb3dpbmcgdXMgdG8gYXZvaWQgYSBzZWNvbmQgcGFyc2UgaWYgd2UgZW5jb3VudGVyIHRoZSBzYW1lXG4gICAgICAgIC8vIHNlZ21lbnQgYWdhaW4uXG4gICAgICAgIGZvciAoZW5kID0gaW5kZXg7IGVuZCA8IGxlbmd0aDsgZW5kKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5fY2hhcklzTWFwcGluZ1NlcGFyYXRvcihhU3RyLCBlbmQpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyID0gYVN0ci5zbGljZShpbmRleCwgZW5kKTtcblxuICAgICAgICBzZWdtZW50ID0gY2FjaGVkU2VnbWVudHNbc3RyXTtcbiAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICBpbmRleCArPSBzdHIubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZ21lbnQgPSBbXTtcbiAgICAgICAgICB3aGlsZSAoaW5kZXggPCBlbmQpIHtcbiAgICAgICAgICAgIGJhc2U2NFZMUS5kZWNvZGUoYVN0ciwgaW5kZXgsIHRlbXApO1xuICAgICAgICAgICAgdmFsdWUgPSB0ZW1wLnZhbHVlO1xuICAgICAgICAgICAgaW5kZXggPSB0ZW1wLnJlc3Q7XG4gICAgICAgICAgICBzZWdtZW50LnB1c2godmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSwgYnV0IG5vIGxpbmUgYW5kIGNvbHVtbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSBhbmQgbGluZSwgYnV0IG5vIGNvbHVtbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhY2hlZFNlZ21lbnRzW3N0cl0gPSBzZWdtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2VuZXJhdGVkIGNvbHVtbi5cbiAgICAgICAgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gPSBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiArIHNlZ21lbnRbMF07XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID4gMSkge1xuICAgICAgICAgIC8vIE9yaWdpbmFsIHNvdXJjZS5cbiAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHByZXZpb3VzU291cmNlICsgc2VnbWVudFsxXTtcbiAgICAgICAgICBwcmV2aW91c1NvdXJjZSArPSBzZWdtZW50WzFdO1xuXG4gICAgICAgICAgLy8gT3JpZ2luYWwgbGluZS5cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9IHByZXZpb3VzT3JpZ2luYWxMaW5lICsgc2VnbWVudFsyXTtcbiAgICAgICAgICBwcmV2aW91c09yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lO1xuICAgICAgICAgIC8vIExpbmVzIGFyZSBzdG9yZWQgMC1iYXNlZFxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lICs9IDE7XG5cbiAgICAgICAgICAvLyBPcmlnaW5hbCBjb2x1bW4uXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gKyBzZWdtZW50WzNdO1xuICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgLy8gT3JpZ2luYWwgbmFtZS5cbiAgICAgICAgICAgIG1hcHBpbmcubmFtZSA9IHByZXZpb3VzTmFtZSArIHNlZ21lbnRbNF07XG4gICAgICAgICAgICBwcmV2aW91c05hbWUgKz0gc2VnbWVudFs0XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBnZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKG1hcHBpbmcpO1xuICAgICAgICBpZiAodHlwZW9mIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG9yaWdpbmFsTWFwcGluZ3MucHVzaChtYXBwaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHF1aWNrU29ydChnZW5lcmF0ZWRNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCk7XG4gICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gZ2VuZXJhdGVkTWFwcGluZ3M7XG5cbiAgICBxdWlja1NvcnQob3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG4gICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MgPSBvcmlnaW5hbE1hcHBpbmdzO1xuICB9O1xuXG4vKipcbiAqIEZpbmQgdGhlIG1hcHBpbmcgdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGh5cG90aGV0aWNhbCBcIm5lZWRsZVwiIG1hcHBpbmcgdGhhdFxuICogd2UgYXJlIHNlYXJjaGluZyBmb3IgaW4gdGhlIGdpdmVuIFwiaGF5c3RhY2tcIiBvZiBtYXBwaW5ncy5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZmluZE1hcHBpbmcoYU5lZWRsZSwgYU1hcHBpbmdzLCBhTGluZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFDb2x1bW5OYW1lLCBhQ29tcGFyYXRvciwgYUJpYXMpIHtcbiAgICAvLyBUbyByZXR1cm4gdGhlIHBvc2l0aW9uIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCB3ZSBtdXN0IGZpcnN0IGZpbmQgdGhlXG4gICAgLy8gbWFwcGluZyBmb3IgdGhlIGdpdmVuIHBvc2l0aW9uIGFuZCB0aGVuIHJldHVybiB0aGUgb3Bwb3NpdGUgcG9zaXRpb24gaXRcbiAgICAvLyBwb2ludHMgdG8uIEJlY2F1c2UgdGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHdlIGNhbiB1c2UgYmluYXJ5IHNlYXJjaCB0b1xuICAgIC8vIGZpbmQgdGhlIGJlc3QgbWFwcGluZy5cblxuICAgIGlmIChhTmVlZGxlW2FMaW5lTmFtZV0gPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTGluZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAxLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICArIGFOZWVkbGVbYUxpbmVOYW1lXSk7XG4gICAgfVxuICAgIGlmIChhTmVlZGxlW2FDb2x1bW5OYW1lXSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbHVtbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAwLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICArIGFOZWVkbGVbYUNvbHVtbk5hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmluYXJ5U2VhcmNoLnNlYXJjaChhTmVlZGxlLCBhTWFwcGluZ3MsIGFDb21wYXJhdG9yLCBhQmlhcyk7XG4gIH07XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgbGFzdCBjb2x1bW4gZm9yIGVhY2ggZ2VuZXJhdGVkIG1hcHBpbmcuIFRoZSBsYXN0IGNvbHVtbiBpc1xuICogaW5jbHVzaXZlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb21wdXRlQ29sdW1uU3BhbnMgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9jb21wdXRlQ29sdW1uU3BhbnMoKSB7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIC8vIE1hcHBpbmdzIGRvIG5vdCBjb250YWluIGEgZmllbGQgZm9yIHRoZSBsYXN0IGdlbmVyYXRlZCBjb2x1bW50LiBXZVxuICAgICAgLy8gY2FuIGNvbWUgdXAgd2l0aCBhbiBvcHRpbWlzdGljIGVzdGltYXRlLCBob3dldmVyLCBieSBhc3N1bWluZyB0aGF0XG4gICAgICAvLyBtYXBwaW5ncyBhcmUgY29udGlndW91cyAoaS5lLiBnaXZlbiB0d28gY29uc2VjdXRpdmUgbWFwcGluZ3MsIHRoZVxuICAgICAgLy8gZmlyc3QgbWFwcGluZyBlbmRzIHdoZXJlIHRoZSBzZWNvbmQgb25lIHN0YXJ0cykuXG4gICAgICBpZiAoaW5kZXggKyAxIDwgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoKSB7XG4gICAgICAgIHZhciBuZXh0TWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4ICsgMV07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9PT0gbmV4dE1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbiA9IG5leHRNYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtIDE7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGxhc3QgbWFwcGluZyBmb3IgZWFjaCBsaW5lIHNwYW5zIHRoZSBlbnRpcmUgbGluZS5cbiAgICAgIG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbiA9IEluZmluaXR5O1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UsIGxpbmUsIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdFxuICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBiaWFzOiBFaXRoZXIgJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdTb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSwgb3IgbnVsbC5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIG5hbWU6IFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLCBvciBudWxsLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfb3JpZ2luYWxQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgIH07XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhcbiAgICAgIG5lZWRsZSxcbiAgICAgIHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLFxuICAgICAgXCJnZW5lcmF0ZWRMaW5lXCIsXG4gICAgICBcImdlbmVyYXRlZENvbHVtblwiLFxuICAgICAgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCxcbiAgICAgIHV0aWwuZ2V0QXJnKGFBcmdzLCAnYmlhcycsIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EKVxuICAgICk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhtYXBwaW5nLCAnc291cmNlJywgbnVsbCk7XG4gICAgICAgIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmF0KHNvdXJjZSk7XG4gICAgICAgICAgc291cmNlID0gdXRpbC5jb21wdXRlU291cmNlVVJMKHRoaXMuc291cmNlUm9vdCwgc291cmNlLCB0aGlzLl9zb3VyY2VNYXBVUkwpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuYW1lID0gdXRpbC5nZXRBcmcobWFwcGluZywgJ25hbWUnLCBudWxsKTtcbiAgICAgICAgaWYgKG5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICBuYW1lID0gdGhpcy5fbmFtZXMuYXQobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnb3JpZ2luYWxMaW5lJywgbnVsbCksXG4gICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnb3JpZ2luYWxDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgIGxpbmU6IG51bGwsXG4gICAgICBjb2x1bW46IG51bGwsXG4gICAgICBuYW1lOiBudWxsXG4gICAgfTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBoYXZlIHRoZSBzb3VyY2UgY29udGVudCBmb3IgZXZlcnkgc291cmNlIGluIHRoZSBzb3VyY2VcbiAqIG1hcCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5oYXNDb250ZW50c09mQWxsU291cmNlcyA9XG4gIGZ1bmN0aW9uIEJhc2ljU291cmNlTWFwQ29uc3VtZXJfaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKSB7XG4gICAgaWYgKCF0aGlzLnNvdXJjZXNDb250ZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50Lmxlbmd0aCA+PSB0aGlzLl9zb3VyY2VzLnNpemUoKSAmJlxuICAgICAgIXRoaXMuc291cmNlc0NvbnRlbnQuc29tZShmdW5jdGlvbiAoc2MpIHsgcmV0dXJuIHNjID09IG51bGw7IH0pO1xuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50LiBUaGUgb25seSBhcmd1bWVudCBpcyB0aGUgdXJsIG9mIHRoZVxuICogb3JpZ2luYWwgc291cmNlIGZpbGUuIFJldHVybnMgbnVsbCBpZiBubyBvcmlnaW5hbCBzb3VyY2UgY29udGVudCBpc1xuICogYXZhaWxhYmxlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfc291cmNlQ29udGVudEZvcihhU291cmNlLCBudWxsT25NaXNzaW5nKSB7XG4gICAgaWYgKCF0aGlzLnNvdXJjZXNDb250ZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kU291cmNlSW5kZXgoYVNvdXJjZSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W2luZGV4XTtcbiAgICB9XG5cbiAgICB2YXIgcmVsYXRpdmVTb3VyY2UgPSBhU291cmNlO1xuICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgcmVsYXRpdmVTb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuc291cmNlUm9vdCwgcmVsYXRpdmVTb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciB1cmw7XG4gICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsXG4gICAgICAgICYmICh1cmwgPSB1dGlsLnVybFBhcnNlKHRoaXMuc291cmNlUm9vdCkpKSB7XG4gICAgICAvLyBYWFg6IGZpbGU6Ly8gVVJJcyBhbmQgYWJzb2x1dGUgcGF0aHMgbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yIGZvclxuICAgICAgLy8gbWFueSB1c2Vycy4gV2UgY2FuIGhlbHAgdGhlbSBvdXQgd2hlbiB0aGV5IGV4cGVjdCBmaWxlOi8vIFVSSXMgdG9cbiAgICAgIC8vIGJlaGF2ZSBsaWtlIGl0IHdvdWxkIGlmIHRoZXkgd2VyZSBydW5uaW5nIGEgbG9jYWwgSFRUUCBzZXJ2ZXIuIFNlZVxuICAgICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODg1NTk3LlxuICAgICAgdmFyIGZpbGVVcmlBYnNQYXRoID0gcmVsYXRpdmVTb3VyY2UucmVwbGFjZSgvXmZpbGU6XFwvXFwvLywgXCJcIik7XG4gICAgICBpZiAodXJsLnNjaGVtZSA9PSBcImZpbGVcIlxuICAgICAgICAgICYmIHRoaXMuX3NvdXJjZXMuaGFzKGZpbGVVcmlBYnNQYXRoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoZmlsZVVyaUFic1BhdGgpXVxuICAgICAgfVxuXG4gICAgICBpZiAoKCF1cmwucGF0aCB8fCB1cmwucGF0aCA9PSBcIi9cIilcbiAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhcIi9cIiArIHJlbGF0aXZlU291cmNlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoXCIvXCIgKyByZWxhdGl2ZVNvdXJjZSldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCByZWN1cnNpdmVseSBmcm9tXG4gICAgLy8gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yLiBJbiB0aGF0IGNhc2UsIHdlXG4gICAgLy8gZG9uJ3Qgd2FudCB0byB0aHJvdyBpZiB3ZSBjYW4ndCBmaW5kIHRoZSBzb3VyY2UgLSB3ZSBqdXN0IHdhbnQgdG9cbiAgICAvLyByZXR1cm4gbnVsbCwgc28gd2UgcHJvdmlkZSBhIGZsYWcgdG8gZXhpdCBncmFjZWZ1bGx5LlxuICAgIGlmIChudWxsT25NaXNzaW5nKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHJlbGF0aXZlU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICogbGluZSwgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoXG4gKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBiaWFzOiBFaXRoZXIgJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdTb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZ2VuZXJhdGVkUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpO1xuICAgIHNvdXJjZSA9IHRoaXMuX2ZpbmRTb3VyY2VJbmRleChzb3VyY2UpO1xuICAgIGlmIChzb3VyY2UgPCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lOiBudWxsLFxuICAgICAgICBjb2x1bW46IG51bGwsXG4gICAgICAgIGxhc3RDb2x1bW46IG51bGxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgb3JpZ2luYWxMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgfTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKFxuICAgICAgbmVlZGxlLFxuICAgICAgdGhpcy5fb3JpZ2luYWxNYXBwaW5ncyxcbiAgICAgIFwib3JpZ2luYWxMaW5lXCIsXG4gICAgICBcIm9yaWdpbmFsQ29sdW1uXCIsXG4gICAgICB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zLFxuICAgICAgdXRpbC5nZXRBcmcoYUFyZ3MsICdiaWFzJywgU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQpXG4gICAgKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgPT09IG5lZWRsZS5zb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgIGxhc3RDb2x1bW46IG51bGxcbiAgICB9O1xuICB9O1xuXG5leHBvcnRzLkJhc2ljU291cmNlTWFwQ29uc3VtZXIgPSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIEFuIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciBpbnN0YW5jZSByZXByZXNlbnRzIGEgcGFyc2VkIHNvdXJjZSBtYXAgd2hpY2hcbiAqIHdlIGNhbiBxdWVyeSBmb3IgaW5mb3JtYXRpb24uIEl0IGRpZmZlcnMgZnJvbSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyIGluXG4gKiB0aGF0IGl0IHRha2VzIFwiaW5kZXhlZFwiIHNvdXJjZSBtYXBzIChpLmUuIG9uZXMgd2l0aCBhIFwic2VjdGlvbnNcIiBmaWVsZCkgYXNcbiAqIGlucHV0LlxuICpcbiAqIFRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgYSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yIGFscmVhZHlcbiAqIHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMgZm9yIGluZGV4ZWQgc291cmNlIG1hcHMsIHRoZXlcbiAqIGhhdmUgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICpcbiAqICAgLSB2ZXJzaW9uOiBXaGljaCB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwIHNwZWMgdGhpcyBtYXAgaXMgZm9sbG93aW5nLlxuICogICAtIGZpbGU6IE9wdGlvbmFsLiBUaGUgZ2VuZXJhdGVkIGZpbGUgdGhpcyBzb3VyY2UgbWFwIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqICAgLSBzZWN0aW9uczogQSBsaXN0IG9mIHNlY3Rpb24gZGVmaW5pdGlvbnMuXG4gKlxuICogRWFjaCB2YWx1ZSB1bmRlciB0aGUgXCJzZWN0aW9uc1wiIGZpZWxkIGhhcyB0d28gZmllbGRzOlxuICogICAtIG9mZnNldDogVGhlIG9mZnNldCBpbnRvIHRoZSBvcmlnaW5hbCBzcGVjaWZpZWQgYXQgd2hpY2ggdGhpcyBzZWN0aW9uXG4gKiAgICAgICBiZWdpbnMgdG8gYXBwbHksIGRlZmluZWQgYXMgYW4gb2JqZWN0IHdpdGggYSBcImxpbmVcIiBhbmQgXCJjb2x1bW5cIlxuICogICAgICAgZmllbGQuXG4gKiAgIC0gbWFwOiBBIHNvdXJjZSBtYXAgZGVmaW5pdGlvbi4gVGhpcyBzb3VyY2UgbWFwIGNvdWxkIGFsc28gYmUgaW5kZXhlZCxcbiAqICAgICAgIGJ1dCBkb2Vzbid0IGhhdmUgdG8gYmUuXG4gKlxuICogSW5zdGVhZCBvZiB0aGUgXCJtYXBcIiBmaWVsZCwgaXQncyBhbHNvIHBvc3NpYmxlIHRvIGhhdmUgYSBcInVybFwiIGZpZWxkXG4gKiBzcGVjaWZ5aW5nIGEgVVJMIHRvIHJldHJpZXZlIGEgc291cmNlIG1hcCBmcm9tLCBidXQgdGhhdCdzIGN1cnJlbnRseVxuICogdW5zdXBwb3J0ZWQuXG4gKlxuICogSGVyZSdzIGFuIGV4YW1wbGUgc291cmNlIG1hcCwgdGFrZW4gZnJvbSB0aGUgc291cmNlIG1hcCBzcGVjWzBdLCBidXRcbiAqIG1vZGlmaWVkIHRvIG9taXQgYSBzZWN0aW9uIHdoaWNoIHVzZXMgdGhlIFwidXJsXCIgZmllbGQuXG4gKlxuICogIHtcbiAqICAgIHZlcnNpb24gOiAzLFxuICogICAgZmlsZTogXCJhcHAuanNcIixcbiAqICAgIHNlY3Rpb25zOiBbe1xuICogICAgICBvZmZzZXQ6IHtsaW5lOjEwMCwgY29sdW1uOjEwfSxcbiAqICAgICAgbWFwOiB7XG4gKiAgICAgICAgdmVyc2lvbiA6IDMsXG4gKiAgICAgICAgZmlsZTogXCJzZWN0aW9uLmpzXCIsXG4gKiAgICAgICAgc291cmNlczogW1wiZm9vLmpzXCIsIFwiYmFyLmpzXCJdLFxuICogICAgICAgIG5hbWVzOiBbXCJzcmNcIiwgXCJtYXBzXCIsIFwiYXJlXCIsIFwiZnVuXCJdLFxuICogICAgICAgIG1hcHBpbmdzOiBcIkFBQUEsRTs7QUJDREU7XCJcbiAqICAgICAgfVxuICogICAgfV0sXG4gKiAgfVxuICpcbiAqIFRoZSBzZWNvbmQgcGFyYW1ldGVyLCBpZiBnaXZlbiwgaXMgYSBzdHJpbmcgd2hvc2UgdmFsdWUgaXMgdGhlIFVSTFxuICogYXQgd2hpY2ggdGhlIHNvdXJjZSBtYXAgd2FzIGZvdW5kLiAgVGhpcyBVUkwgaXMgdXNlZCB0byBjb21wdXRlIHRoZVxuICogc291cmNlcyBhcnJheS5cbiAqXG4gKiBbMF06IGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMVUxUkdBZWhRd1J5cFVUb3ZGMUtSbHBpT0Z6ZTBiLV8yZ2M2ZkFIMEtZMGsvZWRpdCNoZWFkaW5nPWguNTM1ZXMzeGVwcmd0XG4gKi9cbmZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgc291cmNlTWFwID0gdXRpbC5wYXJzZVNvdXJjZU1hcElucHV0KGFTb3VyY2VNYXApO1xuICB9XG5cbiAgdmFyIHZlcnNpb24gPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICd2ZXJzaW9uJyk7XG4gIHZhciBzZWN0aW9ucyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NlY3Rpb25zJyk7XG5cbiAgaWYgKHZlcnNpb24gIT0gdGhpcy5fdmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICB9XG5cbiAgdGhpcy5fc291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICB0aGlzLl9uYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuXG4gIHZhciBsYXN0T2Zmc2V0ID0ge1xuICAgIGxpbmU6IC0xLFxuICAgIGNvbHVtbjogMFxuICB9O1xuICB0aGlzLl9zZWN0aW9ucyA9IHNlY3Rpb25zLm1hcChmdW5jdGlvbiAocykge1xuICAgIGlmIChzLnVybCkge1xuICAgICAgLy8gVGhlIHVybCBmaWVsZCB3aWxsIHJlcXVpcmUgc3VwcG9ydCBmb3IgYXN5bmNocm9uaWNpdHkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9pc3N1ZXMvMTZcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwcG9ydCBmb3IgdXJsIGZpZWxkIGluIHNlY3Rpb25zIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICB9XG4gICAgdmFyIG9mZnNldCA9IHV0aWwuZ2V0QXJnKHMsICdvZmZzZXQnKTtcbiAgICB2YXIgb2Zmc2V0TGluZSA9IHV0aWwuZ2V0QXJnKG9mZnNldCwgJ2xpbmUnKTtcbiAgICB2YXIgb2Zmc2V0Q29sdW1uID0gdXRpbC5nZXRBcmcob2Zmc2V0LCAnY29sdW1uJyk7XG5cbiAgICBpZiAob2Zmc2V0TGluZSA8IGxhc3RPZmZzZXQubGluZSB8fFxuICAgICAgICAob2Zmc2V0TGluZSA9PT0gbGFzdE9mZnNldC5saW5lICYmIG9mZnNldENvbHVtbiA8IGxhc3RPZmZzZXQuY29sdW1uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWN0aW9uIG9mZnNldHMgbXVzdCBiZSBvcmRlcmVkIGFuZCBub24tb3ZlcmxhcHBpbmcuJyk7XG4gICAgfVxuICAgIGxhc3RPZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZ2VuZXJhdGVkT2Zmc2V0OiB7XG4gICAgICAgIC8vIFRoZSBvZmZzZXQgZmllbGRzIGFyZSAwLWJhc2VkLCBidXQgd2UgdXNlIDEtYmFzZWQgaW5kaWNlcyB3aGVuXG4gICAgICAgIC8vIGVuY29kaW5nL2RlY29kaW5nIGZyb20gVkxRLlxuICAgICAgICBnZW5lcmF0ZWRMaW5lOiBvZmZzZXRMaW5lICsgMSxcbiAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBvZmZzZXRDb2x1bW4gKyAxXG4gICAgICB9LFxuICAgICAgY29uc3VtZXI6IG5ldyBTb3VyY2VNYXBDb25zdW1lcih1dGlsLmdldEFyZyhzLCAnbWFwJyksIGFTb3VyY2VNYXBVUkwpXG4gICAgfVxuICB9KTtcbn1cblxuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIFRoZSBsaXN0IG9mIG9yaWdpbmFsIHNvdXJjZXMuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnc291cmNlcycsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuX3NlY3Rpb25zW2ldLmNvbnN1bWVyLnNvdXJjZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgc291cmNlcy5wdXNoKHRoaXMuX3NlY3Rpb25zW2ldLmNvbnN1bWVyLnNvdXJjZXNbal0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc291cmNlcztcbiAgfVxufSk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlLCBsaW5lLCBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgZ2VuZXJhdGVkXG4gKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3RcbiAqIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgY29sdW1uXG4gKiAgICAgbnVtYmVyIGlzIDAtYmFzZWQuXG4gKlxuICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUsIG9yIG51bGwuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBuYW1lOiBUaGUgb3JpZ2luYWwgaWRlbnRpZmllciwgb3IgbnVsbC5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX29yaWdpbmFsUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgZ2VuZXJhdGVkTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICB9O1xuXG4gICAgLy8gRmluZCB0aGUgc2VjdGlvbiBjb250YWluaW5nIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24gd2UncmUgdHJ5aW5nIHRvIG1hcFxuICAgIC8vIHRvIGFuIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgIHZhciBzZWN0aW9uSW5kZXggPSBiaW5hcnlTZWFyY2guc2VhcmNoKG5lZWRsZSwgdGhpcy5fc2VjdGlvbnMsXG4gICAgICBmdW5jdGlvbihuZWVkbGUsIHNlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNtcCA9IG5lZWRsZS5nZW5lcmF0ZWRMaW5lIC0gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZTtcbiAgICAgICAgaWYgKGNtcCkge1xuICAgICAgICAgIHJldHVybiBjbXA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG5lZWRsZS5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgIHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbik7XG4gICAgICB9KTtcbiAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW3NlY3Rpb25JbmRleF07XG5cbiAgICBpZiAoIXNlY3Rpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICBuYW1lOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBzZWN0aW9uLmNvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe1xuICAgICAgbGluZTogbmVlZGxlLmdlbmVyYXRlZExpbmUgLVxuICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgY29sdW1uOiBuZWVkbGUuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lXG4gICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgIDogMCksXG4gICAgICBiaWFzOiBhQXJncy5iaWFzXG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgd2UgaGF2ZSB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGV2ZXJ5IHNvdXJjZSBpbiB0aGUgc291cmNlXG4gKiBtYXAsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5oYXNDb250ZW50c09mQWxsU291cmNlcyA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9oYXNDb250ZW50c09mQWxsU291cmNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VjdGlvbnMuZXZlcnkoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBzLmNvbnN1bWVyLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCk7XG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlIGNvbnRlbnQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIHRoZSB1cmwgb2YgdGhlXG4gKiBvcmlnaW5hbCBzb3VyY2UgZmlsZS4gUmV0dXJucyBudWxsIGlmIG5vIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50IGlzXG4gKiBhdmFpbGFibGUuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvciA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIG51bGxPbk1pc3NpbmcpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuXG4gICAgICB2YXIgY29udGVudCA9IHNlY3Rpb24uY29uc3VtZXIuc291cmNlQ29udGVudEZvcihhU291cmNlLCB0cnVlKTtcbiAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobnVsbE9uTWlzc2luZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICogbGluZSwgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoXG4gKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLiBcbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICogICAgIFRoZSBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZ2VuZXJhdGVkUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuXG4gICAgICAvLyBPbmx5IGNvbnNpZGVyIHRoaXMgc2VjdGlvbiBpZiB0aGUgcmVxdWVzdGVkIHNvdXJjZSBpcyBpbiB0aGUgbGlzdCBvZlxuICAgICAgLy8gc291cmNlcyBvZiB0aGUgY29uc3VtZXIuXG4gICAgICBpZiAoc2VjdGlvbi5jb25zdW1lci5fZmluZFNvdXJjZUluZGV4KHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJykpID09PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBnZW5lcmF0ZWRQb3NpdGlvbiA9IHNlY3Rpb24uY29uc3VtZXIuZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpO1xuICAgICAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uKSB7XG4gICAgICAgIHZhciByZXQgPSB7XG4gICAgICAgICAgbGluZTogZ2VuZXJhdGVkUG9zaXRpb24ubGluZSArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkUG9zaXRpb24uY29sdW1uICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBnZW5lcmF0ZWRQb3NpdGlvbi5saW5lXG4gICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICAgOiAwKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBudWxsLFxuICAgICAgY29sdW1uOiBudWxsXG4gICAgfTtcbiAgfTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcbiAgICAgIHZhciBzZWN0aW9uTWFwcGluZ3MgPSBzZWN0aW9uLmNvbnN1bWVyLl9nZW5lcmF0ZWRNYXBwaW5ncztcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VjdGlvbk1hcHBpbmdzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBtYXBwaW5nID0gc2VjdGlvbk1hcHBpbmdzW2pdO1xuXG4gICAgICAgIHZhciBzb3VyY2UgPSBzZWN0aW9uLmNvbnN1bWVyLl9zb3VyY2VzLmF0KG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgc291cmNlID0gdXRpbC5jb21wdXRlU291cmNlVVJMKHNlY3Rpb24uY29uc3VtZXIuc291cmNlUm9vdCwgc291cmNlLCB0aGlzLl9zb3VyY2VNYXBVUkwpO1xuICAgICAgICB0aGlzLl9zb3VyY2VzLmFkZChzb3VyY2UpO1xuICAgICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmluZGV4T2Yoc291cmNlKTtcblxuICAgICAgICB2YXIgbmFtZSA9IG51bGw7XG4gICAgICAgIGlmIChtYXBwaW5nLm5hbWUpIHtcbiAgICAgICAgICBuYW1lID0gc2VjdGlvbi5jb25zdW1lci5fbmFtZXMuYXQobWFwcGluZy5uYW1lKTtcbiAgICAgICAgICB0aGlzLl9uYW1lcy5hZGQobmFtZSk7XG4gICAgICAgICAgbmFtZSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgbWFwcGluZ3MgY29taW5nIGZyb20gdGhlIGNvbnN1bWVyIGZvciB0aGUgc2VjdGlvbiBoYXZlXG4gICAgICAgIC8vIGdlbmVyYXRlZCBwb3NpdGlvbnMgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBzZWN0aW9uLCBzbyB3ZVxuICAgICAgICAvLyBuZWVkIHRvIG9mZnNldCB0aGVtIHRvIGJlIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBvZiB0aGUgY29uY2F0ZW5hdGVkXG4gICAgICAgIC8vIGdlbmVyYXRlZCBmaWxlLlxuICAgICAgICB2YXIgYWRqdXN0ZWRNYXBwaW5nID0ge1xuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGdlbmVyYXRlZExpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgIGdlbmVyYXRlZENvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG1hcHBpbmcuZ2VuZXJhdGVkTGluZVxuICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICA6IDApLFxuICAgICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgb3JpZ2luYWxDb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgIGlmICh0eXBlb2YgYWRqdXN0ZWRNYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWlja1NvcnQodGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKTtcbiAgICBxdWlja1NvcnQodGhpcy5fX29yaWdpbmFsTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpO1xuICB9O1xuXG5leHBvcnRzLkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciA9IEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcjtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxuZXhwb3J0cy5HUkVBVEVTVF9MT1dFUl9CT1VORCA9IDE7XG5leHBvcnRzLkxFQVNUX1VQUEVSX0JPVU5EID0gMjtcblxuLyoqXG4gKiBSZWN1cnNpdmUgaW1wbGVtZW50YXRpb24gb2YgYmluYXJ5IHNlYXJjaC5cbiAqXG4gKiBAcGFyYW0gYUxvdyBJbmRpY2VzIGhlcmUgYW5kIGxvd2VyIGRvIG5vdCBjb250YWluIHRoZSBuZWVkbGUuXG4gKiBAcGFyYW0gYUhpZ2ggSW5kaWNlcyBoZXJlIGFuZCBoaWdoZXIgZG8gbm90IGNvbnRhaW4gdGhlIG5lZWRsZS5cbiAqIEBwYXJhbSBhTmVlZGxlIFRoZSBlbGVtZW50IGJlaW5nIHNlYXJjaGVkIGZvci5cbiAqIEBwYXJhbSBhSGF5c3RhY2sgVGhlIG5vbi1lbXB0eSBhcnJheSBiZWluZyBzZWFyY2hlZC5cbiAqIEBwYXJhbSBhQ29tcGFyZSBGdW5jdGlvbiB3aGljaCB0YWtlcyB0d28gZWxlbWVudHMgYW5kIHJldHVybnMgLTEsIDAsIG9yIDEuXG4gKiBAcGFyYW0gYUJpYXMgRWl0aGVyICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ2JpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIHJlY3Vyc2l2ZVNlYXJjaChhTG93LCBhSGlnaCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpIHtcbiAgLy8gVGhpcyBmdW5jdGlvbiB0ZXJtaW5hdGVzIHdoZW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgaXMgdHJ1ZTpcbiAgLy9cbiAgLy8gICAxLiBXZSBmaW5kIHRoZSBleGFjdCBlbGVtZW50IHdlIGFyZSBsb29raW5nIGZvci5cbiAgLy9cbiAgLy8gICAyLiBXZSBkaWQgbm90IGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQsIGJ1dCB3ZSBjYW4gcmV0dXJuIHRoZSBpbmRleCBvZlxuICAvLyAgICAgIHRoZSBuZXh0LWNsb3Nlc3QgZWxlbWVudC5cbiAgLy9cbiAgLy8gICAzLiBXZSBkaWQgbm90IGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQsIGFuZCB0aGVyZSBpcyBubyBuZXh0LWNsb3Nlc3RcbiAgLy8gICAgICBlbGVtZW50IHRoYW4gdGhlIG9uZSB3ZSBhcmUgc2VhcmNoaW5nIGZvciwgc28gd2UgcmV0dXJuIC0xLlxuICB2YXIgbWlkID0gTWF0aC5mbG9vcigoYUhpZ2ggLSBhTG93KSAvIDIpICsgYUxvdztcbiAgdmFyIGNtcCA9IGFDb21wYXJlKGFOZWVkbGUsIGFIYXlzdGFja1ttaWRdLCB0cnVlKTtcbiAgaWYgKGNtcCA9PT0gMCkge1xuICAgIC8vIEZvdW5kIHRoZSBlbGVtZW50IHdlIGFyZSBsb29raW5nIGZvci5cbiAgICByZXR1cm4gbWlkO1xuICB9XG4gIGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAvLyBPdXIgbmVlZGxlIGlzIGdyZWF0ZXIgdGhhbiBhSGF5c3RhY2tbbWlkXS5cbiAgICBpZiAoYUhpZ2ggLSBtaWQgPiAxKSB7XG4gICAgICAvLyBUaGUgZWxlbWVudCBpcyBpbiB0aGUgdXBwZXIgaGFsZi5cbiAgICAgIHJldHVybiByZWN1cnNpdmVTZWFyY2gobWlkLCBhSGlnaCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpO1xuICAgIH1cblxuICAgIC8vIFRoZSBleGFjdCBuZWVkbGUgZWxlbWVudCB3YXMgbm90IGZvdW5kIGluIHRoaXMgaGF5c3RhY2suIERldGVybWluZSBpZlxuICAgIC8vIHdlIGFyZSBpbiB0ZXJtaW5hdGlvbiBjYXNlICgzKSBvciAoMikgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgdGhpbmcuXG4gICAgaWYgKGFCaWFzID09IGV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQpIHtcbiAgICAgIHJldHVybiBhSGlnaCA8IGFIYXlzdGFjay5sZW5ndGggPyBhSGlnaCA6IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWlkO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICAvLyBPdXIgbmVlZGxlIGlzIGxlc3MgdGhhbiBhSGF5c3RhY2tbbWlkXS5cbiAgICBpZiAobWlkIC0gYUxvdyA+IDEpIHtcbiAgICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSBsb3dlciBoYWxmLlxuICAgICAgcmV0dXJuIHJlY3Vyc2l2ZVNlYXJjaChhTG93LCBtaWQsIGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKTtcbiAgICB9XG5cbiAgICAvLyB3ZSBhcmUgaW4gdGVybWluYXRpb24gY2FzZSAoMykgb3IgKDIpIGFuZCByZXR1cm4gdGhlIGFwcHJvcHJpYXRlIHRoaW5nLlxuICAgIGlmIChhQmlhcyA9PSBleHBvcnRzLkxFQVNUX1VQUEVSX0JPVU5EKSB7XG4gICAgICByZXR1cm4gbWlkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYUxvdyA8IDAgPyAtMSA6IGFMb3c7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hcnkgc2VhcmNoIHdoaWNoIHdpbGwgYWx3YXlzIHRyeSBhbmQgcmV0dXJuXG4gKiB0aGUgaW5kZXggb2YgdGhlIGNsb3Nlc3QgZWxlbWVudCBpZiB0aGVyZSBpcyBubyBleGFjdCBoaXQuIFRoaXMgaXMgYmVjYXVzZVxuICogbWFwcGluZ3MgYmV0d2VlbiBvcmlnaW5hbCBhbmQgZ2VuZXJhdGVkIGxpbmUvY29sIHBhaXJzIGFyZSBzaW5nbGUgcG9pbnRzLFxuICogYW5kIHRoZXJlIGlzIGFuIGltcGxpY2l0IHJlZ2lvbiBiZXR3ZWVuIGVhY2ggb2YgdGhlbSwgc28gYSBtaXNzIGp1c3QgbWVhbnNcbiAqIHRoYXQgeW91IGFyZW4ndCBvbiB0aGUgdmVyeSBzdGFydCBvZiBhIHJlZ2lvbi5cbiAqXG4gKiBAcGFyYW0gYU5lZWRsZSBUaGUgZWxlbWVudCB5b3UgYXJlIGxvb2tpbmcgZm9yLlxuICogQHBhcmFtIGFIYXlzdGFjayBUaGUgYXJyYXkgdGhhdCBpcyBiZWluZyBzZWFyY2hlZC5cbiAqIEBwYXJhbSBhQ29tcGFyZSBBIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHRoZSBuZWVkbGUgYW5kIGFuIGVsZW1lbnQgaW4gdGhlXG4gKiAgICAgYXJyYXkgYW5kIHJldHVybnMgLTEsIDAsIG9yIDEgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIG5lZWRsZSBpcyBsZXNzXG4gKiAgICAgdGhhbiwgZXF1YWwgdG8sIG9yIGdyZWF0ZXIgdGhhbiB0aGUgZWxlbWVudCwgcmVzcGVjdGl2ZWx5LlxuICogQHBhcmFtIGFCaWFzIEVpdGhlciAnYmluYXJ5U2VhcmNoLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdiaW5hcnlTZWFyY2guTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICogICAgIERlZmF1bHRzIHRvICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICovXG5leHBvcnRzLnNlYXJjaCA9IGZ1bmN0aW9uIHNlYXJjaChhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcykge1xuICBpZiAoYUhheXN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IHJlY3Vyc2l2ZVNlYXJjaCgtMSwgYUhheXN0YWNrLmxlbmd0aCwgYU5lZWRsZSwgYUhheXN0YWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYUNvbXBhcmUsIGFCaWFzIHx8IGV4cG9ydHMuR1JFQVRFU1RfTE9XRVJfQk9VTkQpO1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLy8gV2UgaGF2ZSBmb3VuZCBlaXRoZXIgdGhlIGV4YWN0IGVsZW1lbnQsIG9yIHRoZSBuZXh0LWNsb3Nlc3QgZWxlbWVudCB0aGFuXG4gIC8vIHRoZSBvbmUgd2UgYXJlIHNlYXJjaGluZyBmb3IuIEhvd2V2ZXIsIHRoZXJlIG1heSBiZSBtb3JlIHRoYW4gb25lIHN1Y2hcbiAgLy8gZWxlbWVudC4gTWFrZSBzdXJlIHdlIGFsd2F5cyByZXR1cm4gdGhlIHNtYWxsZXN0IG9mIHRoZXNlLlxuICB3aGlsZSAoaW5kZXggLSAxID49IDApIHtcbiAgICBpZiAoYUNvbXBhcmUoYUhheXN0YWNrW2luZGV4XSwgYUhheXN0YWNrW2luZGV4IC0gMV0sIHRydWUpICE9PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLS1pbmRleDtcbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn07XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbi8vIEl0IHR1cm5zIG91dCB0aGF0IHNvbWUgKG1vc3Q/KSBKYXZhU2NyaXB0IGVuZ2luZXMgZG9uJ3Qgc2VsZi1ob3N0XG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgLiBUaGlzIG1ha2VzIHNlbnNlIGJlY2F1c2UgQysrIHdpbGwgbGlrZWx5IHJlbWFpblxuLy8gZmFzdGVyIHRoYW4gSlMgd2hlbiBkb2luZyByYXcgQ1BVLWludGVuc2l2ZSBzb3J0aW5nLiBIb3dldmVyLCB3aGVuIHVzaW5nIGFcbi8vIGN1c3RvbSBjb21wYXJhdG9yIGZ1bmN0aW9uLCBjYWxsaW5nIGJhY2sgYW5kIGZvcnRoIGJldHdlZW4gdGhlIFZNJ3MgQysrIGFuZFxuLy8gSklUJ2QgSlMgaXMgcmF0aGVyIHNsb3cgKmFuZCogbG9zZXMgSklUIHR5cGUgaW5mb3JtYXRpb24sIHJlc3VsdGluZyBpblxuLy8gd29yc2UgZ2VuZXJhdGVkIGNvZGUgZm9yIHRoZSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRoYW4gd291bGQgYmUgb3B0aW1hbC4gSW5cbi8vIGZhY3QsIHdoZW4gc29ydGluZyB3aXRoIGEgY29tcGFyYXRvciwgdGhlc2UgY29zdHMgb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIG9mXG4vLyBzb3J0aW5nIGluIEMrKy4gQnkgdXNpbmcgb3VyIG93biBKUy1pbXBsZW1lbnRlZCBRdWljayBTb3J0IChiZWxvdyksIHdlIGdldFxuLy8gYSB+MzUwMG1zIG1lYW4gc3BlZWQtdXAgaW4gYGJlbmNoL2JlbmNoLmh0bWxgLlxuXG4vKipcbiAqIFN3YXAgdGhlIGVsZW1lbnRzIGluZGV4ZWQgYnkgYHhgIGFuZCBgeWAgaW4gdGhlIGFycmF5IGBhcnlgLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICogICAgICAgIFRoZSBhcnJheS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBpdGVtLlxuICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAqICAgICAgICBUaGUgaW5kZXggb2YgdGhlIHNlY29uZCBpdGVtLlxuICovXG5mdW5jdGlvbiBzd2FwKGFyeSwgeCwgeSkge1xuICB2YXIgdGVtcCA9IGFyeVt4XTtcbiAgYXJ5W3hdID0gYXJ5W3ldO1xuICBhcnlbeV0gPSB0ZW1wO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gaW50ZWdlciB3aXRoaW4gdGhlIHJhbmdlIGBsb3cgLi4gaGlnaGAgaW5jbHVzaXZlLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBsb3dcbiAqICAgICAgICBUaGUgbG93ZXIgYm91bmQgb24gdGhlIHJhbmdlLlxuICogQHBhcmFtIHtOdW1iZXJ9IGhpZ2hcbiAqICAgICAgICBUaGUgdXBwZXIgYm91bmQgb24gdGhlIHJhbmdlLlxuICovXG5mdW5jdGlvbiByYW5kb21JbnRJblJhbmdlKGxvdywgaGlnaCkge1xuICByZXR1cm4gTWF0aC5yb3VuZChsb3cgKyAoTWF0aC5yYW5kb20oKSAqIChoaWdoIC0gbG93KSkpO1xufVxuXG4vKipcbiAqIFRoZSBRdWljayBTb3J0IGFsZ29yaXRobS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBBbiBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGFyYXRvclxuICogICAgICAgIEZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIHR3byBpdGVtcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwXG4gKiAgICAgICAgU3RhcnQgaW5kZXggb2YgdGhlIGFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gclxuICogICAgICAgIEVuZCBpbmRleCBvZiB0aGUgYXJyYXlcbiAqL1xuZnVuY3Rpb24gZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBwLCByKSB7XG4gIC8vIElmIG91ciBsb3dlciBib3VuZCBpcyBsZXNzIHRoYW4gb3VyIHVwcGVyIGJvdW5kLCB3ZSAoMSkgcGFydGl0aW9uIHRoZVxuICAvLyBhcnJheSBpbnRvIHR3byBwaWVjZXMgYW5kICgyKSByZWN1cnNlIG9uIGVhY2ggaGFsZi4gSWYgaXQgaXMgbm90LCB0aGlzIGlzXG4gIC8vIHRoZSBlbXB0eSBhcnJheSBhbmQgb3VyIGJhc2UgY2FzZS5cblxuICBpZiAocCA8IHIpIHtcbiAgICAvLyAoMSkgUGFydGl0aW9uaW5nLlxuICAgIC8vXG4gICAgLy8gVGhlIHBhcnRpdGlvbmluZyBjaG9vc2VzIGEgcGl2b3QgYmV0d2VlbiBgcGAgYW5kIGByYCBhbmQgbW92ZXMgYWxsXG4gICAgLy8gZWxlbWVudHMgdGhhdCBhcmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwaXZvdCB0byB0aGUgYmVmb3JlIGl0LCBhbmRcbiAgICAvLyBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgYXJlIGdyZWF0ZXIgdGhhbiBpdCBhZnRlciBpdC4gVGhlIGVmZmVjdCBpcyB0aGF0XG4gICAgLy8gb25jZSBwYXJ0aXRpb24gaXMgZG9uZSwgdGhlIHBpdm90IGlzIGluIHRoZSBleGFjdCBwbGFjZSBpdCB3aWxsIGJlIHdoZW5cbiAgICAvLyB0aGUgYXJyYXkgaXMgcHV0IGluIHNvcnRlZCBvcmRlciwgYW5kIGl0IHdpbGwgbm90IG5lZWQgdG8gYmUgbW92ZWRcbiAgICAvLyBhZ2Fpbi4gVGhpcyBydW5zIGluIE8obikgdGltZS5cblxuICAgIC8vIEFsd2F5cyBjaG9vc2UgYSByYW5kb20gcGl2b3Qgc28gdGhhdCBhbiBpbnB1dCBhcnJheSB3aGljaCBpcyByZXZlcnNlXG4gICAgLy8gc29ydGVkIGRvZXMgbm90IGNhdXNlIE8obl4yKSBydW5uaW5nIHRpbWUuXG4gICAgdmFyIHBpdm90SW5kZXggPSByYW5kb21JbnRJblJhbmdlKHAsIHIpO1xuICAgIHZhciBpID0gcCAtIDE7XG5cbiAgICBzd2FwKGFyeSwgcGl2b3RJbmRleCwgcik7XG4gICAgdmFyIHBpdm90ID0gYXJ5W3JdO1xuXG4gICAgLy8gSW1tZWRpYXRlbHkgYWZ0ZXIgYGpgIGlzIGluY3JlbWVudGVkIGluIHRoaXMgbG9vcCwgdGhlIGZvbGxvd2luZyBob2xkXG4gICAgLy8gdHJ1ZTpcbiAgICAvL1xuICAgIC8vICAgKiBFdmVyeSBlbGVtZW50IGluIGBhcnlbcCAuLiBpXWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwaXZvdC5cbiAgICAvL1xuICAgIC8vICAgKiBFdmVyeSBlbGVtZW50IGluIGBhcnlbaSsxIC4uIGotMV1gIGlzIGdyZWF0ZXIgdGhhbiB0aGUgcGl2b3QuXG4gICAgZm9yICh2YXIgaiA9IHA7IGogPCByOyBqKyspIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFyeVtqXSwgcGl2b3QpIDw9IDApIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBzd2FwKGFyeSwgaSwgaik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dhcChhcnksIGkgKyAxLCBqKTtcbiAgICB2YXIgcSA9IGkgKyAxO1xuXG4gICAgLy8gKDIpIFJlY3Vyc2Ugb24gZWFjaCBoYWxmLlxuXG4gICAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBwLCBxIC0gMSk7XG4gICAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBxICsgMSwgcik7XG4gIH1cbn1cblxuLyoqXG4gKiBTb3J0IHRoZSBnaXZlbiBhcnJheSBpbi1wbGFjZSB3aXRoIHRoZSBnaXZlbiBjb21wYXJhdG9yIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICogICAgICAgIEFuIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJhdG9yXG4gKiAgICAgICAgRnVuY3Rpb24gdG8gdXNlIHRvIGNvbXBhcmUgdHdvIGl0ZW1zLlxuICovXG5leHBvcnRzLnF1aWNrU29ydCA9IGZ1bmN0aW9uIChhcnksIGNvbXBhcmF0b3IpIHtcbiAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCAwLCBhcnkubGVuZ3RoIC0gMSk7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgU291cmNlTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnLi9zb3VyY2UtbWFwLWdlbmVyYXRvcicpLlNvdXJjZU1hcEdlbmVyYXRvcjtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbi8vIE1hdGNoZXMgYSBXaW5kb3dzLXN0eWxlIGBcXHJcXG5gIG5ld2xpbmUgb3IgYSBgXFxuYCBuZXdsaW5lIHVzZWQgYnkgYWxsIG90aGVyXG4vLyBvcGVyYXRpbmcgc3lzdGVtcyB0aGVzZSBkYXlzIChjYXB0dXJpbmcgdGhlIHJlc3VsdCkuXG52YXIgUkVHRVhfTkVXTElORSA9IC8oXFxyP1xcbikvO1xuXG4vLyBOZXdsaW5lIGNoYXJhY3RlciBjb2RlIGZvciBjaGFyQ29kZUF0KCkgY29tcGFyaXNvbnNcbnZhciBORVdMSU5FX0NPREUgPSAxMDtcblxuLy8gUHJpdmF0ZSBzeW1ib2wgZm9yIGlkZW50aWZ5aW5nIGBTb3VyY2VOb2RlYHMgd2hlbiBtdWx0aXBsZSB2ZXJzaW9ucyBvZlxuLy8gdGhlIHNvdXJjZS1tYXAgbGlicmFyeSBhcmUgbG9hZGVkLiBUaGlzIE1VU1QgTk9UIENIQU5HRSBhY3Jvc3Ncbi8vIHZlcnNpb25zIVxudmFyIGlzU291cmNlTm9kZSA9IFwiJCQkaXNTb3VyY2VOb2RlJCQkXCI7XG5cbi8qKlxuICogU291cmNlTm9kZXMgcHJvdmlkZSBhIHdheSB0byBhYnN0cmFjdCBvdmVyIGludGVycG9sYXRpbmcvY29uY2F0ZW5hdGluZ1xuICogc25pcHBldHMgb2YgZ2VuZXJhdGVkIEphdmFTY3JpcHQgc291cmNlIGNvZGUgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIGxpbmUgYW5kXG4gKiBjb2x1bW4gaW5mb3JtYXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcGFyYW0gYUxpbmUgVGhlIG9yaWdpbmFsIGxpbmUgbnVtYmVyLlxuICogQHBhcmFtIGFDb2x1bW4gVGhlIG9yaWdpbmFsIGNvbHVtbiBudW1iZXIuXG4gKiBAcGFyYW0gYVNvdXJjZSBUaGUgb3JpZ2luYWwgc291cmNlJ3MgZmlsZW5hbWUuXG4gKiBAcGFyYW0gYUNodW5rcyBPcHRpb25hbC4gQW4gYXJyYXkgb2Ygc3RyaW5ncyB3aGljaCBhcmUgc25pcHBldHMgb2ZcbiAqICAgICAgICBnZW5lcmF0ZWQgSlMsIG9yIG90aGVyIFNvdXJjZU5vZGVzLlxuICogQHBhcmFtIGFOYW1lIFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLlxuICovXG5mdW5jdGlvbiBTb3VyY2VOb2RlKGFMaW5lLCBhQ29sdW1uLCBhU291cmNlLCBhQ2h1bmtzLCBhTmFtZSkge1xuICB0aGlzLmNoaWxkcmVuID0gW107XG4gIHRoaXMuc291cmNlQ29udGVudHMgPSB7fTtcbiAgdGhpcy5saW5lID0gYUxpbmUgPT0gbnVsbCA/IG51bGwgOiBhTGluZTtcbiAgdGhpcy5jb2x1bW4gPSBhQ29sdW1uID09IG51bGwgPyBudWxsIDogYUNvbHVtbjtcbiAgdGhpcy5zb3VyY2UgPSBhU291cmNlID09IG51bGwgPyBudWxsIDogYVNvdXJjZTtcbiAgdGhpcy5uYW1lID0gYU5hbWUgPT0gbnVsbCA/IG51bGwgOiBhTmFtZTtcbiAgdGhpc1tpc1NvdXJjZU5vZGVdID0gdHJ1ZTtcbiAgaWYgKGFDaHVua3MgIT0gbnVsbCkgdGhpcy5hZGQoYUNodW5rcyk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFNvdXJjZU5vZGUgZnJvbSBnZW5lcmF0ZWQgY29kZSBhbmQgYSBTb3VyY2VNYXBDb25zdW1lci5cbiAqXG4gKiBAcGFyYW0gYUdlbmVyYXRlZENvZGUgVGhlIGdlbmVyYXRlZCBjb2RlXG4gKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBTb3VyY2VNYXAgZm9yIHRoZSBnZW5lcmF0ZWQgY29kZVxuICogQHBhcmFtIGFSZWxhdGl2ZVBhdGggT3B0aW9uYWwuIFRoZSBwYXRoIHRoYXQgcmVsYXRpdmUgc291cmNlcyBpbiB0aGVcbiAqICAgICAgICBTb3VyY2VNYXBDb25zdW1lciBzaG91bGQgYmUgcmVsYXRpdmUgdG8uXG4gKi9cblNvdXJjZU5vZGUuZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VOb2RlX2Zyb21TdHJpbmdXaXRoU291cmNlTWFwKGFHZW5lcmF0ZWRDb2RlLCBhU291cmNlTWFwQ29uc3VtZXIsIGFSZWxhdGl2ZVBhdGgpIHtcbiAgICAvLyBUaGUgU291cmNlTm9kZSB3ZSB3YW50IHRvIGZpbGwgd2l0aCB0aGUgZ2VuZXJhdGVkIGNvZGVcbiAgICAvLyBhbmQgdGhlIFNvdXJjZU1hcFxuICAgIHZhciBub2RlID0gbmV3IFNvdXJjZU5vZGUoKTtcblxuICAgIC8vIEFsbCBldmVuIGluZGljZXMgb2YgdGhpcyBhcnJheSBhcmUgb25lIGxpbmUgb2YgdGhlIGdlbmVyYXRlZCBjb2RlLFxuICAgIC8vIHdoaWxlIGFsbCBvZGQgaW5kaWNlcyBhcmUgdGhlIG5ld2xpbmVzIGJldHdlZW4gdHdvIGFkamFjZW50IGxpbmVzXG4gICAgLy8gKHNpbmNlIGBSRUdFWF9ORVdMSU5FYCBjYXB0dXJlcyBpdHMgbWF0Y2gpLlxuICAgIC8vIFByb2Nlc3NlZCBmcmFnbWVudHMgYXJlIGFjY2Vzc2VkIGJ5IGNhbGxpbmcgYHNoaWZ0TmV4dExpbmVgLlxuICAgIHZhciByZW1haW5pbmdMaW5lcyA9IGFHZW5lcmF0ZWRDb2RlLnNwbGl0KFJFR0VYX05FV0xJTkUpO1xuICAgIHZhciByZW1haW5pbmdMaW5lc0luZGV4ID0gMDtcbiAgICB2YXIgc2hpZnROZXh0TGluZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxpbmVDb250ZW50cyA9IGdldE5leHRMaW5lKCk7XG4gICAgICAvLyBUaGUgbGFzdCBsaW5lIG9mIGEgZmlsZSBtaWdodCBub3QgaGF2ZSBhIG5ld2xpbmUuXG4gICAgICB2YXIgbmV3TGluZSA9IGdldE5leHRMaW5lKCkgfHwgXCJcIjtcbiAgICAgIHJldHVybiBsaW5lQ29udGVudHMgKyBuZXdMaW5lO1xuXG4gICAgICBmdW5jdGlvbiBnZXROZXh0TGluZSgpIHtcbiAgICAgICAgcmV0dXJuIHJlbWFpbmluZ0xpbmVzSW5kZXggPCByZW1haW5pbmdMaW5lcy5sZW5ndGggP1xuICAgICAgICAgICAgcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleCsrXSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gV2UgbmVlZCB0byByZW1lbWJlciB0aGUgcG9zaXRpb24gb2YgXCJyZW1haW5pbmdMaW5lc1wiXG4gICAgdmFyIGxhc3RHZW5lcmF0ZWRMaW5lID0gMSwgbGFzdEdlbmVyYXRlZENvbHVtbiA9IDA7XG5cbiAgICAvLyBUaGUgZ2VuZXJhdGUgU291cmNlTm9kZXMgd2UgbmVlZCBhIGNvZGUgcmFuZ2UuXG4gICAgLy8gVG8gZXh0cmFjdCBpdCBjdXJyZW50IGFuZCBsYXN0IG1hcHBpbmcgaXMgdXNlZC5cbiAgICAvLyBIZXJlIHdlIHN0b3JlIHRoZSBsYXN0IG1hcHBpbmcuXG4gICAgdmFyIGxhc3RNYXBwaW5nID0gbnVsbDtcblxuICAgIGFTb3VyY2VNYXBDb25zdW1lci5lYWNoTWFwcGluZyhmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgaWYgKGxhc3RNYXBwaW5nICE9PSBudWxsKSB7XG4gICAgICAgIC8vIFdlIGFkZCB0aGUgY29kZSBmcm9tIFwibGFzdE1hcHBpbmdcIiB0byBcIm1hcHBpbmdcIjpcbiAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhlcmUgaXMgYSBuZXcgbGluZSBpbiBiZXR3ZWVuLlxuICAgICAgICBpZiAobGFzdEdlbmVyYXRlZExpbmUgPCBtYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICAvLyBBc3NvY2lhdGUgZmlyc3QgbGluZSB3aXRoIFwibGFzdE1hcHBpbmdcIlxuICAgICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgc2hpZnROZXh0TGluZSgpKTtcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkTGluZSsrO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgICAgIC8vIFRoZSByZW1haW5pbmcgY29kZSBpcyBhZGRlZCB3aXRob3V0IG1hcHBpbmdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGVyZSBpcyBubyBuZXcgbGluZSBpbiBiZXR3ZWVuLlxuICAgICAgICAgIC8vIEFzc29jaWF0ZSB0aGUgY29kZSBiZXR3ZWVuIFwibGFzdEdlbmVyYXRlZENvbHVtblwiIGFuZFxuICAgICAgICAgIC8vIFwibWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cIiB3aXRoIFwibGFzdE1hcHBpbmdcIlxuICAgICAgICAgIHZhciBuZXh0TGluZSA9IHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdIHx8ICcnO1xuICAgICAgICAgIHZhciBjb2RlID0gbmV4dExpbmUuc3Vic3RyKDAsIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgICByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSA9IG5leHRMaW5lLnN1YnN0cihtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuICAgICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgY29kZSk7XG4gICAgICAgICAgLy8gTm8gbW9yZSByZW1haW5pbmcgY29kZSwgY29udGludWVcbiAgICAgICAgICBsYXN0TWFwcGluZyA9IG1hcHBpbmc7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBXZSBhZGQgdGhlIGdlbmVyYXRlZCBjb2RlIHVudGlsIHRoZSBmaXJzdCBtYXBwaW5nXG4gICAgICAvLyB0byB0aGUgU291cmNlTm9kZSB3aXRob3V0IGFueSBtYXBwaW5nLlxuICAgICAgLy8gRWFjaCBsaW5lIGlzIGFkZGVkIGFzIHNlcGFyYXRlIHN0cmluZy5cbiAgICAgIHdoaWxlIChsYXN0R2VuZXJhdGVkTGluZSA8IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICBub2RlLmFkZChzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgICBsYXN0R2VuZXJhdGVkTGluZSsrO1xuICAgICAgfVxuICAgICAgaWYgKGxhc3RHZW5lcmF0ZWRDb2x1bW4gPCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikge1xuICAgICAgICB2YXIgbmV4dExpbmUgPSByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSB8fCAnJztcbiAgICAgICAgbm9kZS5hZGQobmV4dExpbmUuc3Vic3RyKDAsIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uKSk7XG4gICAgICAgIHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdID0gbmV4dExpbmUuc3Vic3RyKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuICAgICAgfVxuICAgICAgbGFzdE1hcHBpbmcgPSBtYXBwaW5nO1xuICAgIH0sIHRoaXMpO1xuICAgIC8vIFdlIGhhdmUgcHJvY2Vzc2VkIGFsbCBtYXBwaW5ncy5cbiAgICBpZiAocmVtYWluaW5nTGluZXNJbmRleCA8IHJlbWFpbmluZ0xpbmVzLmxlbmd0aCkge1xuICAgICAgaWYgKGxhc3RNYXBwaW5nKSB7XG4gICAgICAgIC8vIEFzc29jaWF0ZSB0aGUgcmVtYWluaW5nIGNvZGUgaW4gdGhlIGN1cnJlbnQgbGluZSB3aXRoIFwibGFzdE1hcHBpbmdcIlxuICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICB9XG4gICAgICAvLyBhbmQgYWRkIHRoZSByZW1haW5pbmcgbGluZXMgd2l0aG91dCBhbnkgbWFwcGluZ1xuICAgICAgbm9kZS5hZGQocmVtYWluaW5nTGluZXMuc3BsaWNlKHJlbWFpbmluZ0xpbmVzSW5kZXgpLmpvaW4oXCJcIikpO1xuICAgIH1cblxuICAgIC8vIENvcHkgc291cmNlc0NvbnRlbnQgaW50byBTb3VyY2VOb2RlXG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlRmlsZSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGFSZWxhdGl2ZVBhdGggIT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLmpvaW4oYVJlbGF0aXZlUGF0aCwgc291cmNlRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5vZGU7XG5cbiAgICBmdW5jdGlvbiBhZGRNYXBwaW5nV2l0aENvZGUobWFwcGluZywgY29kZSkge1xuICAgICAgaWYgKG1hcHBpbmcgPT09IG51bGwgfHwgbWFwcGluZy5zb3VyY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBub2RlLmFkZChjb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhUmVsYXRpdmVQYXRoXG4gICAgICAgICAgPyB1dGlsLmpvaW4oYVJlbGF0aXZlUGF0aCwgbWFwcGluZy5zb3VyY2UpXG4gICAgICAgICAgOiBtYXBwaW5nLnNvdXJjZTtcbiAgICAgICAgbm9kZS5hZGQobmV3IFNvdXJjZU5vZGUobWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGluZy5uYW1lKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIEFkZCBhIGNodW5rIG9mIGdlbmVyYXRlZCBKUyB0byB0aGlzIHNvdXJjZSBub2RlLlxuICpcbiAqIEBwYXJhbSBhQ2h1bmsgQSBzdHJpbmcgc25pcHBldCBvZiBnZW5lcmF0ZWQgSlMgY29kZSwgYW5vdGhlciBpbnN0YW5jZSBvZlxuICogICAgICAgIFNvdXJjZU5vZGUsIG9yIGFuIGFycmF5IHdoZXJlIGVhY2ggbWVtYmVyIGlzIG9uZSBvZiB0aG9zZSB0aGluZ3MuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfYWRkKGFDaHVuaykge1xuICBpZiAoQXJyYXkuaXNBcnJheShhQ2h1bmspKSB7XG4gICAgYUNodW5rLmZvckVhY2goZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICB0aGlzLmFkZChjaHVuayk7XG4gICAgfSwgdGhpcyk7XG4gIH1cbiAgZWxzZSBpZiAoYUNodW5rW2lzU291cmNlTm9kZV0gfHwgdHlwZW9mIGFDaHVuayA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmIChhQ2h1bmspIHtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChhQ2h1bmspO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgXCJFeHBlY3RlZCBhIFNvdXJjZU5vZGUsIHN0cmluZywgb3IgYW4gYXJyYXkgb2YgU291cmNlTm9kZXMgYW5kIHN0cmluZ3MuIEdvdCBcIiArIGFDaHVua1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZCBhIGNodW5rIG9mIGdlbmVyYXRlZCBKUyB0byB0aGUgYmVnaW5uaW5nIG9mIHRoaXMgc291cmNlIG5vZGUuXG4gKlxuICogQHBhcmFtIGFDaHVuayBBIHN0cmluZyBzbmlwcGV0IG9mIGdlbmVyYXRlZCBKUyBjb2RlLCBhbm90aGVyIGluc3RhbmNlIG9mXG4gKiAgICAgICAgU291cmNlTm9kZSwgb3IgYW4gYXJyYXkgd2hlcmUgZWFjaCBtZW1iZXIgaXMgb25lIG9mIHRob3NlIHRoaW5ncy5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfcHJlcGVuZChhQ2h1bmspIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYUNodW5rKSkge1xuICAgIGZvciAodmFyIGkgPSBhQ2h1bmsubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB0aGlzLnByZXBlbmQoYUNodW5rW2ldKTtcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoYUNodW5rW2lzU291cmNlTm9kZV0gfHwgdHlwZW9mIGFDaHVuayA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRoaXMuY2hpbGRyZW4udW5zaGlmdChhQ2h1bmspO1xuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBcIkV4cGVjdGVkIGEgU291cmNlTm9kZSwgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBTb3VyY2VOb2RlcyBhbmQgc3RyaW5ncy4gR290IFwiICsgYUNodW5rXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogV2FsayBvdmVyIHRoZSB0cmVlIG9mIEpTIHNuaXBwZXRzIGluIHRoaXMgbm9kZSBhbmQgaXRzIGNoaWxkcmVuLiBUaGVcbiAqIHdhbGtpbmcgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgZm9yIGVhY2ggc25pcHBldCBvZiBKUyBhbmQgaXMgcGFzc2VkIHRoYXRcbiAqIHNuaXBwZXQgYW5kIHRoZSBpdHMgb3JpZ2luYWwgYXNzb2NpYXRlZCBzb3VyY2UncyBsaW5lL2NvbHVtbiBsb2NhdGlvbi5cbiAqXG4gKiBAcGFyYW0gYUZuIFRoZSB0cmF2ZXJzYWwgZnVuY3Rpb24uXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3dhbGsoYUZuKSB7XG4gIHZhciBjaHVuaztcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjaHVuayA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgaWYgKGNodW5rW2lzU291cmNlTm9kZV0pIHtcbiAgICAgIGNodW5rLndhbGsoYUZuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAoY2h1bmsgIT09ICcnKSB7XG4gICAgICAgIGFGbihjaHVuaywgeyBzb3VyY2U6IHRoaXMuc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgbGluZTogdGhpcy5saW5lLFxuICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogTGlrZSBgU3RyaW5nLnByb3RvdHlwZS5qb2luYCBleGNlcHQgZm9yIFNvdXJjZU5vZGVzLiBJbnNlcnRzIGBhU3RyYCBiZXR3ZWVuXG4gKiBlYWNoIG9mIGB0aGlzLmNoaWxkcmVuYC5cbiAqXG4gKiBAcGFyYW0gYVNlcCBUaGUgc2VwYXJhdG9yLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gU291cmNlTm9kZV9qb2luKGFTZXApIHtcbiAgdmFyIG5ld0NoaWxkcmVuO1xuICB2YXIgaTtcbiAgdmFyIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICBpZiAobGVuID4gMCkge1xuICAgIG5ld0NoaWxkcmVuID0gW107XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbi0xOyBpKyspIHtcbiAgICAgIG5ld0NoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XG4gICAgICBuZXdDaGlsZHJlbi5wdXNoKGFTZXApO1xuICAgIH1cbiAgICBuZXdDaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBuZXdDaGlsZHJlbjtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Ugb24gdGhlIHZlcnkgcmlnaHQtbW9zdCBzb3VyY2Ugc25pcHBldC4gVXNlZnVsXG4gKiBmb3IgdHJpbW1pbmcgd2hpdGVzcGFjZSBmcm9tIHRoZSBlbmQgb2YgYSBzb3VyY2Ugbm9kZSwgZXRjLlxuICpcbiAqIEBwYXJhbSBhUGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICogQHBhcmFtIGFSZXBsYWNlbWVudCBUaGUgdGhpbmcgdG8gcmVwbGFjZSB0aGUgcGF0dGVybiB3aXRoLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5yZXBsYWNlUmlnaHQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3JlcGxhY2VSaWdodChhUGF0dGVybiwgYVJlcGxhY2VtZW50KSB7XG4gIHZhciBsYXN0Q2hpbGQgPSB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gIGlmIChsYXN0Q2hpbGRbaXNTb3VyY2VOb2RlXSkge1xuICAgIGxhc3RDaGlsZC5yZXBsYWNlUmlnaHQoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIGxhc3RDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV0gPSBsYXN0Q2hpbGQucmVwbGFjZShhUGF0dGVybiwgYVJlcGxhY2VtZW50KTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLmNoaWxkcmVuLnB1c2goJycucmVwbGFjZShhUGF0dGVybiwgYVJlcGxhY2VtZW50KSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGEgc291cmNlIGZpbGUuIFRoaXMgd2lsbCBiZSBhZGRlZCB0byB0aGUgU291cmNlTWFwR2VuZXJhdG9yXG4gKiBpbiB0aGUgc291cmNlc0NvbnRlbnQgZmllbGQuXG4gKlxuICogQHBhcmFtIGFTb3VyY2VGaWxlIFRoZSBmaWxlbmFtZSBvZiB0aGUgc291cmNlIGZpbGVcbiAqIEBwYXJhbSBhU291cmNlQ29udGVudCBUaGUgY29udGVudCBvZiB0aGUgc291cmNlIGZpbGVcbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUuc2V0U291cmNlQ29udGVudCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU5vZGVfc2V0U291cmNlQ29udGVudChhU291cmNlRmlsZSwgYVNvdXJjZUNvbnRlbnQpIHtcbiAgICB0aGlzLnNvdXJjZUNvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoYVNvdXJjZUZpbGUpXSA9IGFTb3VyY2VDb250ZW50O1xuICB9O1xuXG4vKipcbiAqIFdhbGsgb3ZlciB0aGUgdHJlZSBvZiBTb3VyY2VOb2Rlcy4gVGhlIHdhbGtpbmcgZnVuY3Rpb24gaXMgY2FsbGVkIGZvciBlYWNoXG4gKiBzb3VyY2UgZmlsZSBjb250ZW50IGFuZCBpcyBwYXNzZWQgdGhlIGZpbGVuYW1lIGFuZCBzb3VyY2UgY29udGVudC5cbiAqXG4gKiBAcGFyYW0gYUZuIFRoZSB0cmF2ZXJzYWwgZnVuY3Rpb24uXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLndhbGtTb3VyY2VDb250ZW50cyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU5vZGVfd2Fsa1NvdXJjZUNvbnRlbnRzKGFGbikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5jaGlsZHJlbltpXVtpc1NvdXJjZU5vZGVdKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW5baV0ud2Fsa1NvdXJjZUNvbnRlbnRzKGFGbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNvdXJjZXMgPSBPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUNvbnRlbnRzKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgYUZuKHV0aWwuZnJvbVNldFN0cmluZyhzb3VyY2VzW2ldKSwgdGhpcy5zb3VyY2VDb250ZW50c1tzb3VyY2VzW2ldXSk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFJldHVybiB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc291cmNlIG5vZGUuIFdhbGtzIG92ZXIgdGhlIHRyZWVcbiAqIGFuZCBjb25jYXRlbmF0ZXMgYWxsIHRoZSB2YXJpb3VzIHNuaXBwZXRzIHRvZ2V0aGVyIHRvIG9uZSBzdHJpbmcuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gU291cmNlTm9kZV90b1N0cmluZygpIHtcbiAgdmFyIHN0ciA9IFwiXCI7XG4gIHRoaXMud2FsayhmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBzdHIgKz0gY2h1bms7XG4gIH0pO1xuICByZXR1cm4gc3RyO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZSBhbG9uZyB3aXRoIGEgc291cmNlXG4gKiBtYXAuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnRvU3RyaW5nV2l0aFNvdXJjZU1hcCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfdG9TdHJpbmdXaXRoU291cmNlTWFwKGFBcmdzKSB7XG4gIHZhciBnZW5lcmF0ZWQgPSB7XG4gICAgY29kZTogXCJcIixcbiAgICBsaW5lOiAxLFxuICAgIGNvbHVtbjogMFxuICB9O1xuICB2YXIgbWFwID0gbmV3IFNvdXJjZU1hcEdlbmVyYXRvcihhQXJncyk7XG4gIHZhciBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG4gIHZhciBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICB2YXIgbGFzdE9yaWdpbmFsTGluZSA9IG51bGw7XG4gIHZhciBsYXN0T3JpZ2luYWxDb2x1bW4gPSBudWxsO1xuICB2YXIgbGFzdE9yaWdpbmFsTmFtZSA9IG51bGw7XG4gIHRoaXMud2FsayhmdW5jdGlvbiAoY2h1bmssIG9yaWdpbmFsKSB7XG4gICAgZ2VuZXJhdGVkLmNvZGUgKz0gY2h1bms7XG4gICAgaWYgKG9yaWdpbmFsLnNvdXJjZSAhPT0gbnVsbFxuICAgICAgICAmJiBvcmlnaW5hbC5saW5lICE9PSBudWxsXG4gICAgICAgICYmIG9yaWdpbmFsLmNvbHVtbiAhPT0gbnVsbCkge1xuICAgICAgaWYobGFzdE9yaWdpbmFsU291cmNlICE9PSBvcmlnaW5hbC5zb3VyY2VcbiAgICAgICAgIHx8IGxhc3RPcmlnaW5hbExpbmUgIT09IG9yaWdpbmFsLmxpbmVcbiAgICAgICAgIHx8IGxhc3RPcmlnaW5hbENvbHVtbiAhPT0gb3JpZ2luYWwuY29sdW1uXG4gICAgICAgICB8fCBsYXN0T3JpZ2luYWxOYW1lICE9PSBvcmlnaW5hbC5uYW1lKSB7XG4gICAgICAgIG1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgICBzb3VyY2U6IG9yaWdpbmFsLnNvdXJjZSxcbiAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgbGluZTogb3JpZ2luYWwubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogb3JpZ2luYWwuY29sdW1uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBuYW1lOiBvcmlnaW5hbC5uYW1lXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgbGFzdE9yaWdpbmFsU291cmNlID0gb3JpZ2luYWwuc291cmNlO1xuICAgICAgbGFzdE9yaWdpbmFsTGluZSA9IG9yaWdpbmFsLmxpbmU7XG4gICAgICBsYXN0T3JpZ2luYWxDb2x1bW4gPSBvcmlnaW5hbC5jb2x1bW47XG4gICAgICBsYXN0T3JpZ2luYWxOYW1lID0gb3JpZ2luYWwubmFtZTtcbiAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc291cmNlTWFwcGluZ0FjdGl2ZSkge1xuICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZC5jb2x1bW5cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW5ndGggPSBjaHVuay5sZW5ndGg7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHtcbiAgICAgIGlmIChjaHVuay5jaGFyQ29kZUF0KGlkeCkgPT09IE5FV0xJTkVfQ09ERSkge1xuICAgICAgICBnZW5lcmF0ZWQubGluZSsrO1xuICAgICAgICBnZW5lcmF0ZWQuY29sdW1uID0gMDtcbiAgICAgICAgLy8gTWFwcGluZ3MgZW5kIGF0IGVvbFxuICAgICAgICBpZiAoaWR4ICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgICAgICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoc291cmNlTWFwcGluZ0FjdGl2ZSkge1xuICAgICAgICAgIG1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgICAgIHNvdXJjZTogb3JpZ2luYWwuc291cmNlLFxuICAgICAgICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgICAgICAgbGluZTogb3JpZ2luYWwubGluZSxcbiAgICAgICAgICAgICAgY29sdW1uOiBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hbWU6IG9yaWdpbmFsLm5hbWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VuZXJhdGVkLmNvbHVtbisrO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHRoaXMud2Fsa1NvdXJjZUNvbnRlbnRzKGZ1bmN0aW9uIChzb3VyY2VGaWxlLCBzb3VyY2VDb250ZW50KSB7XG4gICAgbWFwLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgc291cmNlQ29udGVudCk7XG4gIH0pO1xuXG4gIHJldHVybiB7IGNvZGU6IGdlbmVyYXRlZC5jb2RlLCBtYXA6IG1hcCB9O1xufTtcblxuZXhwb3J0cy5Tb3VyY2VOb2RlID0gU291cmNlTm9kZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInBhdGhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7IiwidmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuXG52YXIgaXNNb2Rlcm4gPSAoXG4gIHR5cGVvZiBCdWZmZXIuYWxsb2MgPT09ICdmdW5jdGlvbicgJiZcbiAgdHlwZW9mIEJ1ZmZlci5hbGxvY1Vuc2FmZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICB0eXBlb2YgQnVmZmVyLmZyb20gPT09ICdmdW5jdGlvbidcbilcblxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlciAoaW5wdXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaW5wdXQpLnNsaWNlKDgsIC0xKSA9PT0gJ0FycmF5QnVmZmVyJ1xufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKG9iaiwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGJ5dGVPZmZzZXQgPj4+PSAwXG5cbiAgdmFyIG1heExlbmd0aCA9IG9iai5ieXRlTGVuZ3RoIC0gYnl0ZU9mZnNldFxuXG4gIGlmIChtYXhMZW5ndGggPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCInb2Zmc2V0JyBpcyBvdXQgb2YgYm91bmRzXCIpXG4gIH1cblxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSBtYXhMZW5ndGhcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPj4+PSAwXG5cbiAgICBpZiAobGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIidsZW5ndGgnIGlzIG91dCBvZiBib3VuZHNcIilcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXNNb2Rlcm5cbiAgICA/IEJ1ZmZlci5mcm9tKG9iai5zbGljZShieXRlT2Zmc2V0LCBieXRlT2Zmc2V0ICsgbGVuZ3RoKSlcbiAgICA6IG5ldyBCdWZmZXIobmV3IFVpbnQ4QXJyYXkob2JqLnNsaWNlKGJ5dGVPZmZzZXQsIGJ5dGVPZmZzZXQgKyBsZW5ndGgpKSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICByZXR1cm4gaXNNb2Rlcm5cbiAgICA/IEJ1ZmZlci5mcm9tKHN0cmluZywgZW5jb2RpbmcpXG4gICAgOiBuZXcgQnVmZmVyKHN0cmluZywgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKGlzQXJyYXlCdWZmZXIodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBpc01vZGVyblxuICAgID8gQnVmZmVyLmZyb20odmFsdWUpXG4gICAgOiBuZXcgQnVmZmVyKHZhbHVlKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlckZyb21cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm1vZHVsZVwiKTsiLCJpbXBvcnQgeyBCcm93c2VyV2luZG93LCBpcGNNYWluIH0gZnJvbSAnZWxlY3Ryb24nXHJcblxyXG5pbXBvcnQgV2luZG93IGZyb20gJy4vd2luZG93J1xyXG5pbXBvcnQgU3RvcmFnZSBmcm9tICcuLi9zdG9yYWdlJ1xyXG5pbXBvcnQgQ29sb3JwaWNrZXJUb3VjaGJhciBmcm9tICcuLi90b3VjaGJhci9jb2xvcnBpY2tlclRvdWNoYmFyJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sb3JwaWNrZXJWaWV3IGV4dGVuZHMgV2luZG93IHtcclxuXHJcbiAgcHJvdGVjdGVkIHdpbmRvd1BhcmFtczogT2JqZWN0ID0ge1xyXG4gICAgZnJhbWU6IGZhbHNlLFxyXG4gICAgYXV0b0hpZGVNZW51QmFyOiB0cnVlLFxyXG4gICAgbWluV2lkdGg6IDQ0MCxcclxuICAgIG1pbkhlaWdodDogMTUwLFxyXG4gICAgd2lkdGg6IDQ0MCxcclxuICAgIGhlaWdodDogMTUwLFxyXG4gICAgdHJhbnNwYXJlbnQ6IGZhbHNlLFxyXG4gICAgaWNvbjogYCR7X19kaXJuYW1lfS9sb2dvLnBuZ2BcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yICgpIHtcclxuICAgIHN1cGVyKCdjb2xvcnBpY2tlcicpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlV2luZG93ICgpOiBCcm93c2VyV2luZG93IHtcclxuICAgIGNvbnN0IHdpbmRvdyA9IHN1cGVyLmNyZWF0ZVdpbmRvdygpXHJcbiAgICBjb25zdCB0b3VjaGJhciA9IG5ldyBDb2xvcnBpY2tlclRvdWNoYmFyKClcclxuXHJcbiAgICB3aW5kb3cuc2V0VG91Y2hCYXIodG91Y2hiYXIuZ2V0VG91Y2hCYXIoKSlcclxuICAgIHdpbmRvdy53ZWJDb250ZW50cy5vcGVuRGV2VG9vbHMoKVxyXG5cclxuICAgIHJldHVybiB3aW5kb3dcclxuICB9XHJcblxyXG4gIC8vIHByaXZhdGUgaW5pdFdpbmRvd0V2ZW50cyAoKTogdm9pZCB7XHJcbiAgLy8gICBpZiAoIXRoaXMud2luZG93KSByZXR1cm5cclxuICAvLyAgIGxldCB0aW1pbmdcclxuXHJcbiAgLy8gICB0aGlzLndpbmRvdy5vbignZm9jdXMnLCBldmVudCA9PiB0aGlzLndpbmRvdy53ZWJDb250ZW50cy5zZW5kKCdoYXNMb29zZUZvY3VzJywgZmFsc2UpKVxyXG4gIC8vICAgdGhpcy53aW5kb3cub24oJ2JsdXInLCBldmVudCA9PiB0aGlzLndpbmRvdy53ZWJDb250ZW50cy5zZW5kKCdoYXNMb29zZUZvY3VzJywgdHJ1ZSkpXHJcblxyXG4gIC8vICAgdGhpcy53aW5kb3cub24oJ3Jlc2l6ZScsIGV2ZW50ID0+IHtcclxuICAvLyAgICAgY29uc3Qgc2l6ZSA9IHRoaXMud2luZG93LmdldEJvdW5kcygpXHJcbiAgLy8gICAgIGNsZWFyVGltZW91dCh0aW1pbmcpXHJcbiAgLy8gICAgIHRpbWluZyA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zdG9yYWdlLnNldCh7IHdpZHRoOiBzaXplLndpZHRoLCBoZWlnaHQ6IHNpemUuaGVpZ2h0IH0sICdzaXplJyksIDMwMClcclxuICAvLyAgIH0pXHJcblxyXG4gIC8vICAgdGhpcy53aW5kb3cub24oJ21vdmUnLCBldmVudCA9PiB7XHJcbiAgLy8gICAgIGNvbnN0IHBvcyA9IHRoaXMud2luZG93LmdldEJvdW5kcygpXHJcbiAgLy8gICAgIGNsZWFyVGltZW91dCh0aW1pbmcpXHJcbiAgLy8gICAgIHRpbWluZyA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zdG9yYWdlLnNldCh7IHg6IHBvcy54LCB5OiBwb3MueSB9LCAncG9zJyksIDMwMClcclxuICAvLyAgIH0pXHJcbiAgLy8gfVxyXG5cclxuICAvLyBwcml2YXRlIGluaXRFdmVudHMgKCk6IHZvaWQge1xyXG4gIC8vICAgbGV0IG9wYWNpdHlcclxuICAvLyAgIGxldCBzaGFkaW5nXHJcblxyXG4gIC8vICAgdGhpcy51dGlsLmV2ZW50RW1pdHRlci5vbignY2hhbmdlQ29sb3InLCBjb2xvciA9PiB7XHJcbiAgLy8gICAgIHRoaXMud2luZG93LndlYkNvbnRlbnRzLnNlbmQoJ2NoYW5nZUNvbG9yJywgY29sb3IpXHJcbiAgLy8gICB9KVxyXG5cclxuICAvLyAgIGlwY01haW4ub24oJ2luaXQtY29sb3JwaWNrZXInLCBldmVudCA9PiB7XHJcbiAgLy8gICAgIGxldCBjb25maWcgPSB7XHJcbiAgLy8gICAgICAgY29sb3I6IHRoaXMuc3RvcmFnZS5oYXMoJ2xhc3RDb2xvcicpID8gdGhpcy5zdG9yYWdlLmdldCgnbGFzdENvbG9yJykgOiAnIzAwQUVFRicsXHJcbiAgLy8gICAgICAgcG9zQnV0dG9uOiB0aGlzLnN0b3JhZ2UuZ2V0KCdidXR0b25zUG9zaXRpb24nKSxcclxuICAvLyAgICAgICB0eXBlQnV0dG9uOiAgdGhpcy5zdG9yYWdlLmdldCgnYnV0dG9uc1R5cGUnKSxcclxuICAvLyAgICAgICB0b29sczogdGhpcy5zdG9yYWdlLmdldCgndG9vbHMnKSxcclxuICAvLyAgICAgICBjb2xvcmZ1bGxBcHA6IHRoaXMuc3RvcmFnZS5nZXQoJ2NvbG9yZnVsbEFwcCcpLFxyXG4gIC8vICAgICAgIGhpc3Rvcnk6IHRoaXMuc3RvcmFnZS5nZXQoJ2hpc3RvcnknKVxyXG4gIC8vICAgICB9XHJcblxyXG4gIC8vICAgICBldmVudC5zZW5kZXIuc2VuZCgnaW5pdCcsIGNvbmZpZylcclxuICAvLyAgIH0pXHJcblxyXG4gIC8vICAgaXBjTWFpbi5vbignY2hhbmdlTGFzdENvbG9yJywgKGV2ZW50LCBjb2xvcikgPT4ge1xyXG4gIC8vICAgICB0aGlzLnN0b3JhZ2Uuc2V0KCdsYXN0Q29sb3InLCBjb2xvcilcclxuICAvLyAgIH0pXHJcblxyXG4gIC8vICAgaXBjTWFpbi5vbignc2F2ZUNvbG9yJywgKGV2ZW50LCBjb2xvcikgPT4ge1xyXG4gIC8vICAgICBsZXQgY29sb3JzYm9vayA9IHRoaXMuc3RvcmFnZS5nZXQoJ2NvbG9ycycsICdjb2xvcnNib29rJylcclxuICAvLyAgICAgY29sb3JzYm9va1tPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjb2xvcnNib29rKVtPYmplY3QudmFsdWVzKGNvbG9yc2Jvb2spLmxlbmd0aCAtIDFdXS5wdXNoKGNvbG9yKVxyXG4gIC8vICAgICB0aGlzLnN0b3JhZ2Uuc2V0KCdjb2xvcnMnLCBjb2xvcnNib29rLCAnY29sb3JzYm9vaycpXHJcbiAgLy8gICB9KVxyXG5cclxuICAvLyAgIGlwY01haW4ub24oJ2NoYW5nZUhpc3RvcnknLCAoZXZlbnQsIGFycmF5KSA9PiB7XHJcbiAgLy8gICAgIHRoaXMuc3RvcmFnZS5zZXQoJ2hpc3RvcnknLCBhcnJheSlcclxuICAvLyAgICAgdGhpcy51dGlsLmV2ZW50RW1pdHRlci5lbWl0KCd1cGRhdGVIaXN0b3J5JywgYXJyYXkpXHJcbiAgLy8gICB9KVxyXG5cclxuICAvLyAgIGlwY01haW4ub24oJ29wYWNpdHlBY3RpdmUnLCAoZXZlbnQsIGJvb2wpID0+IHtcclxuICAvLyAgICAgb3BhY2l0eSA9IGJvb2xcclxuICAvLyAgICAgbGV0IHNpemUgPSB0aGlzLndpbmRvdy5nZXRTaXplKClcclxuICAvLyAgICAgaWYgKCFvcGFjaXR5ICYmIHNoYWRpbmcpIHJldHVybiB0aGlzLndpbmRvdy5zZXRNaW5pbXVtU2l6ZSg0NDAsIDIyMClcclxuICAvLyAgICAgaWYgKCFvcGFjaXR5KSByZXR1cm4gdGhpcy53aW5kb3cuc2V0TWluaW11bVNpemUoNDQwLCAxNTApXHJcbiAgLy8gICAgIGlmIChzaXplWzFdIDwgMTgwICYmICFzaGFkaW5nKSB0aGlzLndpbmRvdy5zZXRTaXplKHNpemVbMF0sIDE4MCwgdHJ1ZSlcclxuICAvLyAgICAgaWYgKHNpemVbMV0gPCAyNTUgJiYgc2hhZGluZykgdGhpcy53aW5kb3cuc2V0U2l6ZShzaXplWzBdLCAyNTUsIHRydWUpXHJcbiAgLy8gICAgIGlmICghc2hhZGluZykgdGhpcy53aW5kb3cuc2V0TWluaW11bVNpemUoNDQwLCAxODApXHJcbiAgLy8gICAgIGVsc2UgdGhpcy53aW5kb3cuc2V0TWluaW11bVNpemUoNDQwLCAyNTUpXHJcbiAgLy8gICB9KVxyXG5cclxuICAvLyAgIGlwY01haW4ub24oJ3NoYWRpbmdBY3RpdmUnLCAoZXZlbnQsIGJvb2wpID0+IHtcclxuICAvLyAgICAgc2hhZGluZyA9IGJvb2xcclxuICAvLyAgICAgbGV0IHNpemUgPSB0aGlzLndpbmRvdy5nZXRTaXplKClcclxuICAvLyAgICAgaWYgKCFzaGFkaW5nICYmICFvcGFjaXR5KSByZXR1cm4gdGhpcy53aW5kb3cuc2V0TWluaW11bVNpemUoNDQwLCAxNTApXHJcbiAgLy8gICAgIGlmICghc2hhZGluZyAmJiBvcGFjaXR5KSByZXR1cm4gdGhpcy53aW5kb3cuc2V0TWluaW11bVNpemUoNDQwLCAxODApXHJcbiAgLy8gICAgIGlmIChzaXplWzFdIDwgMjIwICYmICFvcGFjaXR5KSB0aGlzLndpbmRvdy5zZXRTaXplKHNpemVbMF0sIDIyMCwgdHJ1ZSlcclxuICAvLyAgICAgaWYgKHNpemVbMV0gPCAyNTUgJiYgb3BhY2l0eSkgdGhpcy53aW5kb3cuc2V0U2l6ZShzaXplWzBdLCAyNTUsIHRydWUpXHJcbiAgLy8gICAgIGlmICghb3BhY2l0eSkgdGhpcy53aW5kb3cuc2V0TWluaW11bVNpemUoNDQwLCAyMjApXHJcbiAgLy8gICAgIGVsc2UgdGhpcy53aW5kb3cuc2V0TWluaW11bVNpemUoNDQwLCAyNTUpXHJcbiAgLy8gICB9KVxyXG5cclxuICAvLyAgIGlwY01haW4ub24oJ21pbmltaXplLWNvbG9ycGlja2VyJywgZXZlbnQgPT4gdGhpcy53aW5kb3cubWluaW1pemUoKSlcclxuICAvLyAgIGlwY01haW4ub24oJ21heGltaXplLWNvbG9ycGlja2VyJywgZXZlbnQgPT4ge1xyXG4gIC8vICAgICBpZiAodGhpcy53aW5kb3cuaXNNYXhpbWl6ZWQoKSkgcmV0dXJuIHRoaXMud2luZG93LnVubWF4aW1pemUoKVxyXG4gIC8vICAgICBlbHNlIHJldHVybiB0aGlzLndpbmRvdy5tYXhpbWl6ZSgpXHJcbiAgLy8gICB9KVxyXG4gIC8vICAgaXBjTWFpbi5vbignY2xvc2UtY29sb3JwaWNrZXInLCBldmVudCA9PiB0aGlzLndpbmRvdy5jbG9zZSgpKVxyXG4gIC8vICAgaXBjTWFpbi5vbignc2V0T25Ub3AnLCAoZXZlbnQsIGJvb2wpID0+IHRoaXMud2luZG93LnNldEFsd2F5c09uVG9wKGJvb2wpKVxyXG5cclxuICAvLyAgIC8vIGlwY01haW4ub24oJ2xhdW5jaFBpY2tlcicsIGV2ZW50ID0+IHBpY2tlci5pbml0KCkpXHJcbiAgLy8gICAvLyB0aGlzLmV2ZW50RW1pdHRlci5vbignbGF1bmNoUGlja2VyJywgZXZlbnQgPT4gcGlja2VyLmluaXQoKSlcclxuICAvLyAgIC8vIGlwY01haW4ub24oJ2xhdW5jaENvbG9yc2Jvb2snLCBldmVudCA9PiBjb2xvcnNib29rLmluaXQoKSlcclxuICAvLyAgIC8vIHRoaXMuZXZlbnRFbWl0dGVyLm9uKCdsYXVuY2hDb2xvcnNib29rJywgZXZlbnQgPT4gY29sb3JzYm9vay5pbml0KCkpXHJcbiAgLy8gICAvLyBpcGNNYWluLm9uKCdzaG93UHJlZmVyZW5jZXMnLCBldmVudCA9PiBzZXR0aW5ncy5pbml0KCkpXHJcbiAgLy8gICAvLyB0aGlzLmV2ZW50RW1pdHRlci5vbignc2hvd1ByZWZlcmVuY2VzJywgZXZlbnQgPT4gc2V0dGluZ3MuaW5pdCgpKVxyXG4gIC8vIH1cclxuXHJcbiAgcHJvdGVjdGVkIGNsb3NlV2luZG93ICgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLndpbmRvdykgdGhpcy53aW5kb3cgPSB1bmRlZmluZWRcclxuICAgIGxldCB0b3RhbFdpbmRvd3MgPSBCcm93c2VyV2luZG93LmdldEFsbFdpbmRvd3MoKVxyXG4gICAgZm9yIChsZXQgd2luZG93IG9mIHRvdGFsV2luZG93cykgd2luZG93LmNsb3NlKClcclxuICB9XHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnXHJcbmltcG9ydCB7IFRvdWNoQmFyLCBuYXRpdmVJbWFnZSB9IGZyb20gJ2VsZWN0cm9uJ1xyXG5cclxuY29uc3QgeyBUb3VjaEJhckNvbG9yUGlja2VyLCBUb3VjaEJhckJ1dHRvbiB9ID0gVG91Y2hCYXJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbG9ycGlja2VyVG91Y2hiYXIge1xyXG4gIHByaXZhdGUgZXZlbnRFbWl0dGVyOiBFdmVudEVtaXR0ZXJcclxuICBwcml2YXRlIHRvdWNoQmFyOiBUb3VjaEJhclxyXG5cclxuICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICB0aGlzLmV2ZW50RW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKVxyXG4gICAgdGhpcy50b3VjaEJhciA9IG5ldyBUb3VjaEJhcih7IGl0ZW1zOiBbXSB9KVxyXG4gICAgdGhpcy5pbml0KClcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdCAoKTogdm9pZCB7XHJcbiAgICBjb25zdCBjb2xvcnBpY2tlciA9IG5ldyBUb3VjaEJhckNvbG9yUGlja2VyKHtcclxuICAgICAgY2hhbmdlOiBjb2xvciA9PiB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCdjaGFuZ2VDb2xvcicsIGNvbG9yKVxyXG4gICAgfSlcclxuICAgIGNvbnN0IGV5ZWRyb3BwZXIgPSBuZXcgVG91Y2hCYXJCdXR0b24oe1xyXG4gICAgICBpY29uOiBuYXRpdmVJbWFnZS5jcmVhdGVGcm9tUGF0aChgJHtfX2Rpcm5hbWV9L2V5ZWRyb3BwZXItdG91Y2hiYXIucG5nYCksXHJcbiAgICAgIGNsaWNrOiAoKSA9PiB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCdsYXVuY2hQaWNrZXInKVxyXG4gICAgfSlcclxuICAgIGNvbnN0IGNvbG9yc2Jvb2sgPSBuZXcgVG91Y2hCYXJCdXR0b24oe1xyXG4gICAgICBpY29uOiBuYXRpdmVJbWFnZS5jcmVhdGVGcm9tUGF0aChgJHtfX2Rpcm5hbWV9L2NvbG9yc2Jvb2stdG91Y2hiYXIucG5nYCksXHJcbiAgICAgIGNsaWNrOiAoKSA9PiB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCdsYXVuY2hDb2xvcnNib29rJylcclxuICAgIH0pXHJcbiAgICBjb25zdCBzZXR0aW5ncyA9IG5ldyBUb3VjaEJhckJ1dHRvbih7XHJcbiAgICAgIGljb246IG5hdGl2ZUltYWdlLmNyZWF0ZUZyb21QYXRoKGAke19fZGlybmFtZX0vc2V0dGluZ3MtdG91Y2hiYXIucG5nYCksXHJcbiAgICAgIGNsaWNrOiAoKSA9PiB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCdzaG93UHJlZmVyZW5jZXMnKVxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLnRvdWNoQmFyID0gbmV3IFRvdWNoQmFyKHtcclxuICAgICAgaXRlbXM6IFtjb2xvcnBpY2tlciwgZXllZHJvcHBlciwgY29sb3JzYm9vaywgc2V0dGluZ3NdXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFRvdWNoQmFyICgpOiBUb3VjaEJhciB7XHJcbiAgICByZXR1cm4gdGhpcy50b3VjaEJhclxyXG4gIH1cclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJldmVudHNcIik7IiwiaW1wb3J0IHsgaXBjTWFpbiB9IGZyb20gJ2VsZWN0cm9uJ1xyXG5cclxuaW1wb3J0IFdpbmRvdyBmcm9tICcuL3dpbmRvdydcclxuaW1wb3J0IFN0b3JhZ2UgZnJvbSAnLi4vc3RvcmFnZSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbG9yc2Jvb2tWaWV3IGV4dGVuZHMgV2luZG93IHtcclxuXHJcbiAgcHJvdGVjdGVkIHdpbmRvd1BhcmFtczogT2JqZWN0ID0ge1xyXG4gICAgZnJhbWU6IGZhbHNlLFxyXG4gICAgYXV0b0hpZGVNZW51QmFyOiB0cnVlLFxyXG4gICAgd2lkdGg6IDM2NSxcclxuICAgIGhlaWdodDogNDAwLFxyXG4gICAgbWluSGVpZ2h0OiAyODUsXHJcbiAgICBtaW5XaWR0aDogMzYwLFxyXG4gICAgaWNvbjogYCR7X19kaXJuYW1lfS9sb2dvLnBuZ2BcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yICgpIHtcclxuICAgIHN1cGVyKCdjb2xvcnNib29rJylcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaXBjTWFpbiB9IGZyb20gJ2VsZWN0cm9uJ1xyXG5cclxuaW1wb3J0IFdpbmRvdyBmcm9tICcuL3dpbmRvdydcclxuaW1wb3J0IFN0b3JhZ2UgZnJvbSAnLi4vc3RvcmFnZSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBpY2tlclZpZXcgZXh0ZW5kcyBXaW5kb3cge1xyXG5cclxuICBwcm90ZWN0ZWQgd2luZG93UGFyYW1zOiBPYmplY3QgPSB7XHJcbiAgICBmcmFtZTogZmFsc2UsXHJcbiAgICBhdXRvSGlkZU1lbnVCYXI6IHRydWUsXHJcbiAgICB3aWR0aDogMTAwLFxyXG4gICAgaGVpZ2h0OiAxMDAsXHJcbiAgICB0cmFuc3BhcmVudDogdHJ1ZSxcclxuICAgIGFsd2F5c09uVG9wOiB0cnVlLFxyXG4gICAgcmVzaXphYmxlOiBmYWxzZSxcclxuICAgIGZvY3VzYWJsZTogdHJ1ZSxcclxuICAgIGhhc1NoYWRvdzogZmFsc2UsXHJcbiAgICBpY29uOiBgJHtfX2Rpcm5hbWV9L2xvZ28ucG5nYFxyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgc3VwZXIoJ3BpY2tlcicpXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IGlwY01haW4gfSBmcm9tICdlbGVjdHJvbidcclxuXHJcbmltcG9ydCBXaW5kb3cgZnJvbSAnLi93aW5kb3cnXHJcbmltcG9ydCBTdG9yYWdlIGZyb20gJy4uL3N0b3JhZ2UnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXR0aW5nc1ZpZXcgZXh0ZW5kcyBXaW5kb3cge1xyXG5cclxuICBwcm90ZWN0ZWQgd2luZG93UGFyYW1zOiBPYmplY3QgPSB7XHJcbiAgICB3aWR0aDogNzAwLFxyXG4gICAgaGVpZ2h0OiA1MDAsXHJcbiAgICBtaW5XaWR0aDogNDYwLFxyXG4gICAgbWluSGVpZ2h0OiAzNDAsXHJcbiAgICBmdWxsc2NyZWVuYWJsZTogZmFsc2UsXHJcbiAgICBpY29uOiBgJHtfX2Rpcm5hbWV9L2xvZ28ucG5nYFxyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgc3VwZXIoJ3NldHRpbmdzJylcclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==
=======
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
class Colorpicker {
    static onWindowAllClosed() {
        if (process.platform !== 'darwin') {
            Colorpicker.application.quit();
        }
    }
    static onClose() {
        Colorpicker.window = null;
    }
    static ready() {
        Colorpicker.window = new electron_1.BrowserWindow({ width: 800, height: 600 });
        Colorpicker.window.on('closed', Colorpicker.onClose);
    }
    static init(app) {
        Colorpicker.application = app;
        Colorpicker.application.on('window-all-closed', Colorpicker.onWindowAllClosed);
        Colorpicker.application.on('ready', Colorpicker.ready);
    }
}
exports.default = Colorpicker;
Colorpicker.init(electron_1.app);
>>>>>>> init typescript
