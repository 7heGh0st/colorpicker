!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1);class o extends n.default{constructor(){super(),this.testColor("111"),this.testColor("a2c843"),this.testColor("123456"),this.testColor("8e2fff")}getRGBCSS(){return`rgb(${this.red}, ${this.green}, ${this.blue})`}getRGBACSS(){return`rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`}testColor(e){console.log("hex",e);const t=this.getRGBfromHEX(e);console.log("rgb",t.red,t.green,t.blue);const r=this.getHSLfromRGB(t);console.log("hsl",r.hue,r.saturation,r.lightness);const n=this.getRGBfromHSL(r);console.log("rgb",n.red,n.green,n.blue);const o=this.getCMYKfromRGB(n);console.log("cmyk",o.cyan,o.magenta,o.yellow,o.key);const s=this.getRGBfromCMYK(o);console.log("rgb",s.red,s.green,s.blue);const i=this.getHEXfromRGB(n);console.log("hex",i),console.log("###########")}}t.default=o;new o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.red=0,this.green=0,this.blue=0,this.alpha=1,this.hex="000000",this.rgb={red:this.red,green:this.green,blue:this.blue},this.rgba=Object.assign({alpha:this.alpha},this.rgb),this.hsl=this.getHSLfromRGB(this.rgb)}updateColorFromRGB(e){return this.red=e.red,this.green=e.green,this.blue=e.blue,this.rgb=e,this.hex=this.getHEXfromRGB(this.rgb),this.hsl=this.getHSLfromRGB(this.rgb),this}updateColorFromHEX(e){const t=this.getRGBfromHEX(e);return this.red=t.red,this.green=t.green,this.blue=t.blue,this.rgb=t,this.hex=e,this.hsl=this.getHSLfromRGB(this.rgb),this}getHEXfromRGB(e){return[Number(e.red).toString(16),Number(e.green).toString(16),Number(e.blue).toString(16)].map(e=>1===e.length?"0"+e:e).join("")}getRGBfromHEX(e){3===(e=e.replace(/^#/,"")).length&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]);const t=parseInt(e,16);return{red:t>>16,green:t>>8&255,blue:255&t}}getHSLfromRGB(e){let t=e.red/255,r=e.green/255,n=e.blue/255,o=Math.min(t,r,n),s=Math.max(t,r,n),i=0,l=0,u=(s+o)/2;return s!==o&&(l=u<.5?(s-o)/(s+o):(s-o)/(2-s-o)),t===s&&r===s&&n===s?i=0:t===s?i=(r-n)/(s-o):r===s?i=2+(n-t)/(s-o):n===s&&(i=4+(t-r)/(s-o)),(i*=60)<0&&(i+=360),{hue:i,saturation:l,lightness:u}}getRGBfromHSL(e){const t=e.hue/60;let r=0;r=e.lightness<=.5?e.lightness*(e.saturation+1):e.lightness+e.saturation-e.lightness*e.saturation;let n=2*e.lightness-r;const o=255*this.hueToRGB(n,r,t+2),s=255*this.hueToRGB(n,r,t),i=255*this.hueToRGB(n,r,t-2);return{red:Math.round(o),green:Math.round(s),blue:Math.round(i)}}getRGBfromCMYK(e){const t=255-255*Math.min(1,e.cyan*(1-e.key)+e.key),r=255-255*Math.min(1,e.magenta*(1-e.key)+e.key),n=255-255*Math.min(1,e.yellow*(1-e.key)+e.key);return{red:Math.round(t),green:Math.round(r),blue:Math.round(n)}}getCMYKfromRGB(e){let t=0,r=0,n=0,o=e.red/255,s=e.green/255,i=e.blue/255,l=1-Math.max(o,s,i);return 1!==l&&(t=(1-o-l)/(1-l),r=(1-s-l)/(1-l),n=(1-i-l)/(1-l)),{cyan:t,magenta:r,yellow:n,key:l}}hueToRGB(e,t,r){return r<0&&(r+=6),r>=6&&(r-=6),r<1?(t-e)*r+e:r<3?t:r<4?(t-e)*(4-r)+e:e}isDark(e=128){return(299*this.red+587*this.green+114*this.blue)/1e3<e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,